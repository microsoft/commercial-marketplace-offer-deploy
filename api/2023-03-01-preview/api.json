{
  "swagger": "2.0",
  "info": {
    "description": "Commercial Marketplace deployment management for azure offers.",
    "version": "0.1.0",
    "title": "Marketplace Offer Deployment Manager",
    "license": {
      "name": "MIT",
      "url": "https://opensource.org/license/mit/"
    }
  },
  "tags": [
    {
      "name": "azure-marketplace",
      "description": "Commercial Marketplace Offer Deployment Management"
    }
  ],
  "schemes": [
    "https"
  ],
  "consumes": [
    "application/json"
  ],
  "produces": [
    "application/json"
  ],
  "securityDefinitions": {
    "azure_auth": {
      "flow": "implicit",
      "authorizationUrl": "https://login.microsoftonline.com/common/oauth2/authorize",
      "scopes": {
        "user_impersonation": "impersonate your user account"
      },
      "type": "oauth2",
      "description": "Azure Active Directory OAuth2 Flow"
    }
  },
  "security": [
    {
      "azure_auth": [
        "user_impersonation"
      ]
    }
  ],
  "x-ms-parameterized-host": {
    "hostTemplate": "{endpoint}",
    "useSchemePrefix": false,
    "positionInOperation": "first",
    "parameters": [
      {
        "name": "endpoint",
        "description": "The management endpoint of the Deployement Management service",
        "required": true,
        "type": "string",
        "in": "path",
        "x-ms-skip-url-encoding": true,
        "x-ms-parameter-location": "client"
      }
    ]
  },
  "paths": {
    "/deployments": {
      "get": {
        "tags": [
          "Deployment"
        ],
        "summary": "List all Deployments",
        "description": "List all deployments",
        "operationId": "ListDeployments",
        "parameters": [
          {
            "name": "status",
            "in": "query",
            "description": "Status values that need to be considered for filter",
            "required": false,
            "type": "array",
            "items": {
              "type": "string",
              "enum": [
                "none",
                "scheduled",
                "running",
                "success"
              ],
              "default": "none",
              "x-ms-enum": {
                "name": "status",
                "modelAsString": true
              }
            },
            "collectionFormat": "multi"
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/Deployment"
              }
            }
          }
        }
      },
      "post": {
        "tags": [
          "Deployment"
        ],
        "summary": "Creates a new deployment",
        "description": "Creates a new deployment instances",
        "operationId": "CreateDeployment",
        "parameters": [
          {
            "in": "body",
            "name": "body",
            "description": "Deployment object that needs to be added to the store",
            "required": true,
            "schema": {
              "$ref": "#/definitions/CreateDeployment"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "$ref": "#/definitions/Deployment"
            }
          },
          "405": {
            "description": "Invalid input"
          }
        }
      },
      "put": {
        "tags": [
          "Deployment"
        ],
        "summary": "Update an existing deployment",
        "description": "",
        "operationId": "UpdateDeployment",
        "parameters": [
          {
            "in": "body",
            "name": "body",
            "description": "Deployment object that needs to be added to the store",
            "required": true,
            "schema": {
              "$ref": "#/definitions/Deployment"
            }
          }
        ],
        "responses": {
          "400": {
            "description": "Invalid ID supplied"
          },
          "404": {
            "description": "Deployment not found"
          },
          "405": {
            "description": "Validation exception"
          }
        }
      }
    },
    "/deployments/{deploymentId}": {
      "get": {
        "tags": [
          "Deployment"
        ],
        "summary": "Get deployment by ID",
        "description": "Returns a single deployment",
        "operationId": "GetDeployment",
        "parameters": [
          {
            "name": "deploymentId",
            "in": "path",
            "description": "ID of deployment to return",
            "required": true,
            "type": "integer"
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "$ref": "#/definitions/Deployment"
            }
          },
          "400": {
            "description": "Invalid ID supplied"
          },
          "404": {
            "description": "Deployment not found"
          }
        }
      }
    },
    "/deployments/{deploymentId}/operation": {
      "post": {
        "tags": [
          "Deployment"
        ],
        "summary": "Invokes an operation on the deployment",
        "description": "Invokes a deployment operation with parameters",
        "operationId": "InvokeDeploymentOperation",
        "parameters": [
          {
            "name": "deploymentId",
            "in": "path",
            "description": "ID of deployment",
            "required": true,
            "type": "integer"
          },
          {
            "in": "body",
            "name": "body",
            "description": "Deployment operation invocation",
            "required": true,
            "schema": {
              "$ref": "#/definitions/InvokeDeploymentOperationRequest"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "$ref": "#/definitions/InvokedDeploymentOperationResponse"
            }
          }
        }
      }
    },
    "/operations/{operationId}": {
      "get": {
        "tags": [
          "Operation"
        ],
        "summary": "Gets the state of an invoked operation",
        "description": "Gets the state of a command operation that's been invoked",
        "operationId": "GetInvokedDeploymentOperation",
        "parameters": [
          {
            "name": "operationId",
            "in": "path",
            "description": "ID of the triggered operation",
            "required": true,
            "type": "string",
            "format": "uuid"
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "$ref": "#/definitions/GetInvokedOperationResponse"
            }
          }
        }
      }
    },
    "/operations": {
      "get": {
        "tags": [
          "Operation"
        ],
        "summary": "Returns the list of all invoked operations",
        "description": "Returns a list of invoked operations",
        "operationId": "ListInvokedOperations",
        "parameters": [],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "$ref": "#/definitions/ListInvokedOperationResponse"
            }
          }
        }
      }
    },
    "/events": {
      "get": {
        "tags": [
          "Event"
        ],
        "summary": "Returns the list of event types",
        "description": "Returns a list of all event types",
        "operationId": "GetEventTypes",
        "produces": [
          "application/json"
        ],
        "parameters": [],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/EventType"
              }
            }
          }
        }
      }
    },
    "/events/hooks": {
      "post": {
        "tags": [
          "Hook"
        ],
        "summary": "Create event hook",
        "description": "Create an event hook",
        "operationId": "CreateEvenHook",
        "parameters": [
          {
            "in": "body",
            "name": "body",
            "description": "Create event hook",
            "required": true,
            "schema": {
              "$ref": "#/definitions/CreateEventHookRequest"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "$ref": "#/definitions/CreateEventHookResponse"
            }
          },
          "405": {
            "description": "Invalid input"
          }
        }
      },
      "get": {
        "tags": [
          "Hook"
        ],
        "summary": "Lists all event hooks",
        "description": "List all event hooks",
        "operationId": "ListEventHooks",
        "parameters": [
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/EventHookResponse"
              }
            }
          }
        }
      }
    },
    "/events/hooks/{hookId}": {
      "get": {
        "tags": [
          "Hook"
        ],
        "summary": "Gets an event hook",
        "description": "Gets an event hook instance",
        "operationId": "GetEventHook",
        "parameters": [
          {
            "name": "hookId",
            "in": "path",
            "description": "ID of the hook",
            "required": true,
            "type": "string",
            "format": "uuid"
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "$ref": "#/definitions/EventHookResponse"
            }
          },
          "400": {
            "description": "Invalid ID supplied"
          }
        }
      },
      "delete": {
        "tags": [
          "Event"
        ],
        "summary": "Delete an event hook",
        "description": "Deletes an event hook by id",
        "operationId": "DeleteEventHook",
        "parameters": [
          {
            "name": "hookId",
            "in": "path",
            "description": "ID of the hook",
            "required": true,
            "type": "string",
            "format": "uuid"
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation"
          },
          "400": {
            "description": "Invalid ID supplied"
          },
          "404": {
            "description": "Hook not found"
          }
        }
      }
    }
  },
  "definitions": {
    "CreateDeployment": {
      "type": "object",
      "required": [
        "name",
        "template"
      ],
      "properties": {
        "name": {
          "type": "string"
        },
        "subscriptionId": {
          "type": "string",
          "format": "uuid"
        },
        "resourceGroup": {
          "type": "string"
        },
        "location": {
          "type": "string"
        },
        "template": {
          "type": "object"
        }
      }
    },
    "Deployment": {
      "type": "object",
      "properties": {
        "id": {
          "type": "integer"
        },
        "name": {
          "type": "string"
        },
        "status": {
          "type": "string"
        },
        "stages": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/DeploymentStage"
          }
        },
        "template": {
          "type": "object"
        }
      }
    },
    "DeploymentStage": {
      "type": "object",
      "properties": {
        "id": {
          "type": "string",
          "format": "uuid"
        },
        "name": {
          "type": "string"
        },
        "deploymentName": {
          "type": "string"
        },
        "retries": {
          "type": "integer",
          "description": "the default number of retries. can be set with tag modm.retry. defaults to 0."
        }
      }
    },
    "InvokedOperation": {
      "type": "object",
      "description": "An invoked operation",
      "properties": {
        "id": {
          "type": "string",
          "format": "uuid"
        },
        "name": {
          "type": "string"
        },
        "deploymentId": {
          "type": "integer",
          "description": "the associated deployment ID if the operation was invoked against a deployment"
        },
        "retries": {
          "type": "integer"
        },
        "attempts": {
          "type": "integer"
        },
        "parameters": {
          "type": "object"
        },
        "result": {
          "type": "object"
        },
        "status": {
          "type": "string"
        },
        "invokedOn": {
          "type": "string",
          "format": "date-time"
        }
      }
    },
    "GetInvokedOperationResponse": {
      "type": "object",
      "properties": {
        "invokedOperation": {
         "$ref": "#/definitions/InvokedOperation"
        }
      }
    },
    "ListInvokedOperationResponse": {
      "type": "object",
      "description": "List response of invoked operations",
      "properties": {
        "items": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/InvokedOperation"
          }
        }
      }
    },

    "InvokeDeploymentOperationRequest": {
      "type": "object",
      "properties": {
        "name": {
          "type": "string"
        },
        "retries": {
          "type": "integer"
        },
        "parameters": {
          "type": "object"
        },
        "wait": {
          "type": "boolean",
          "description": "whether the call wants to wait for the operation or if the result of the invocation will be received async from an event susbscription"
        }
      }
    },
    "InvokedDeploymentOperationResponse": {
      "type": "object",
      "properties": {
        "invokedOperation": {
         "$ref": "#/definitions/InvokedOperation"
        }
      }
    },
    "EventType": {
      "type": "object",
      "properties": {
        "name": {
          "type": "string",
          "description": "The type of event, e.g. the topic"
        }
      }
    },
    "EventHookResponse": {
      "type": "object",
      "properties": {
        "id": {
          "type": "string",
          "format": "uuid"
        },
        "name": {
          "type": "string",
          "description": "the name of the subscription"
        },
        "callback": {
          "type": "string",
          "format": "uri",
          "description": "The webhook callback"
        }
      }
    },
    "CreateEventHookRequest": {
      "type": "object",
      "properties": {
        "name": {
          "type": "string",
          "description": "the name of the subscription"
        },
        "apiKey":{
          "type": "string",
          "description": "API key to be used in the Authorization header, e.g. 'apiKey =234dfsdf324234', to call the webhook callback URL."
        },
        "callback": {
          "type": "string",
          "format": "uri",
          "description": "The webhook callback"
        }
      }
    },
    "CreateEventHookResponse": {
      "type": "object",
      "properties": {
        "id": {
          "type": "string",
          "format": "uuid"
        },
        "name": {
          "type": "string",
          "description": "the name of the subscription"
        }
      }
    }
  }
}