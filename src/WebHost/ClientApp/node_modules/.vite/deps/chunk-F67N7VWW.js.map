{
  "version": 3,
  "sources": ["../../@fluentui/react/lib/utilities/selection/utilities/selection/SelectionZone.tsx", "../../@fluentui/react/lib/components/GroupedList/components/GroupedList/GroupedList.types.ts", "../../@fluentui/react/lib/components/DetailsList/components/DetailsList/DetailsHeader.base.tsx", "../../@fluentui/react/lib/components/DetailsList/components/DetailsList/DetailsList.types.ts", "../../@fluentui/react/lib/components/GroupedList/components/GroupedList/GroupSpacer.tsx", "../../@fluentui/react/lib/components/GroupedList/components/GroupedList/GroupedList.styles.ts", "../../@fluentui/react/lib/components/GroupedList/components/GroupedList/GroupedList.base.tsx", "../../@fluentui/react/lib/components/GroupedList/components/GroupedList/GroupedListSection.tsx", "../../@fluentui/react/lib/components/Link/components/Link/Link.styles.ts", "../../@fluentui/react/lib/components/DetailsList/components/DetailsList/DetailsRow.styles.ts", "../../@fluentui/react/lib/components/DetailsList/components/DetailsList/DetailsHeader.styles.ts", "../../@fluentui/react/lib/components/Check/components/Check/Check.styles.ts", "../../@fluentui/react/lib/components/DetailsList/components/DetailsList/DetailsRowCheck.styles.ts", "../../@fluentui/react/lib/components/GroupedList/components/GroupedList/GroupHeader.styles.ts", "../../@fluentui/react/lib/components/GroupedList/components/GroupedList/GroupHeader.base.tsx", "../../@fluentui/react/lib/components/Check/components/Check/Check.base.tsx", "../../@fluentui/react/lib/components/Check/components/Check/Check.tsx", "../../@fluentui/react/lib/components/Spinner/components/Spinner/Spinner.base.tsx", "../../@fluentui/react/lib/components/Spinner/components/Spinner/Spinner.types.ts", "../../@fluentui/react/lib/components/Spinner/components/Spinner/Spinner.styles.tsx", "../../@fluentui/react/lib/components/Spinner/components/Spinner/Spinner.tsx", "../../@fluentui/react/lib/components/GroupedList/components/GroupedList/GroupHeader.ts", "../../@fluentui/react/lib/components/GroupedList/components/GroupedList/GroupShowAll.styles.ts", "../../@fluentui/react/lib/components/GroupedList/components/GroupedList/GroupShowAll.base.tsx", "../../@fluentui/react/lib/components/Link/components/Link/Link.base.tsx", "../../@fluentui/react/lib/components/Link/components/Link/useLink.ts", "../../@fluentui/react/lib/components/Link/components/Link/Link.tsx", "../../@fluentui/react/lib/components/GroupedList/components/GroupedList/GroupShowAll.ts", "../../@fluentui/react/lib/components/GroupedList/components/GroupedList/GroupFooter.styles.ts", "../../@fluentui/react/lib/components/GroupedList/components/GroupedList/GroupFooter.base.tsx", "../../@fluentui/react/lib/components/GroupedList/components/GroupedList/GroupFooter.ts", "../../@fluentui/react/lib/components/List/components/List/List.tsx", "../../@fluentui/react/lib/components/List/components/List/List.types.ts", "../../@fluentui/react/lib/components/List/utils/components/List/utils/scroll.ts", "../../@fluentui/react/lib/components/GroupedList/components/GroupedList/GroupedList.ts", "../../@fluentui/react/lib/components/GroupedList/components/GroupedList/GroupedListV2.base.tsx", "../../@fluentui/react/lib/components/GroupedList/components/GroupedList/GroupedListV2.tsx", "../../@fluentui/react/lib/utilities/groupedList/utilities/groupedList/GroupedListUtility.tsx", "../../@fluentui/react/lib/components/DetailsList/components/DetailsList/DetailsRowCheck.tsx", "../../@fluentui/react/lib/utilities/dragdrop/utilities/dragdrop/DragDropHelper.tsx", "../../@fluentui/react/lib/components/DetailsList/components/DetailsList/DetailsColumn.base.tsx", "../../@fluentui/react/lib/components/DetailsList/components/DetailsList/DetailsColumn.styles.ts", "../../@fluentui/react/lib/components/DetailsList/components/DetailsList/DetailsColumn.ts", "../../@fluentui/react/lib/components/DetailsList/components/DetailsList/DetailsHeader.types.ts", "../../@fluentui/react/lib/components/DetailsList/components/DetailsList/DetailsHeader.ts", "../../@fluentui/react/lib/components/DetailsList/components/DetailsList/DetailsList.base.tsx", "../../@fluentui/react/lib/components/DetailsList/components/DetailsList/DetailsRow.base.tsx", "../../@fluentui/react/lib/components/DetailsList/components/DetailsList/DetailsRowFields.tsx", "../../@fluentui/react/lib/components/DetailsList/components/DetailsList/DetailsRow.ts", "../../@fluentui/react/lib/utilities/decorators/utilities/decorators/withViewport.tsx", "../../@fluentui/react/lib/components/DetailsList/components/DetailsList/DetailsList.styles.ts", "../../@fluentui/react/lib/components/DetailsList/components/DetailsList/DetailsList.ts"],
  "sourcesContent": ["import * as React from 'react';\nimport {\n  Async,\n  EventGroup,\n  KeyCodes,\n  elementContains,\n  findScrollableParent,\n  getParent,\n  getDocument,\n  getWindow,\n  isElementTabbable,\n  css,\n  initializeComponentRef,\n  FocusRects,\n} from '../../Utilities';\nimport { SelectionMode } from './interfaces';\nimport type { ISelection, IObjectWithKey } from './interfaces';\n\n// Selection definitions:\n//\n// Anchor index: the point from which a range selection starts.\n// Focus index: the point from which layout movement originates from.\n//\n// These two can differ. Tests:\n//\n// If you start at index 5\n// Shift click to index 10\n//    The focus is 10, the anchor is 5.\n// If you shift click at index 0\n//    The anchor remains at 5, the items between 0 and 5 are selected and everything else is cleared.\n// If you click index 8\n//    The anchor and focus are set to 8.\n\nconst SELECTION_DISABLED_ATTRIBUTE_NAME = 'data-selection-disabled';\nconst SELECTION_INDEX_ATTRIBUTE_NAME = 'data-selection-index';\nconst SELECTION_SPAN_ATTRIBUTE_NAME = 'data-selection-span';\nconst SELECTION_TOGGLE_ATTRIBUTE_NAME = 'data-selection-toggle';\nconst SELECTION_INVOKE_ATTRIBUTE_NAME = 'data-selection-invoke';\nconst SELECTION_INVOKE_TOUCH_ATTRIBUTE_NAME = 'data-selection-touch-invoke';\nconst SELECTALL_TOGGLE_ALL_ATTRIBUTE_NAME = 'data-selection-all-toggle';\nconst SELECTION_SELECT_ATTRIBUTE_NAME = 'data-selection-select';\n\n/**\n * {@docCategory Selection}\n */\nexport interface ISelectionZone {\n  /**\n   * Method to ignore subsequent focus.\n   */\n  ignoreNextFocus: () => void;\n}\n\n/**\n * {@docCategory Selection}\n */\nexport interface ISelectionZoneProps extends React.ClassAttributes<SelectionZone> {\n  children?: React.ReactNode;\n  /**\n   * Reference to the component interface.\n   */\n  componentRef?: () => void;\n  /**\n   * Required {@link ISelection} instance bound to the {@link SelectionZone}.\n   */\n  selection: ISelection;\n  /**\n   * @deprecated No longer in use, focus is now managed by {@link FocusZone}.\n   */\n  layout?: {};\n  /**\n   * The mode of Selection, where the value is one of\n   * 'none', 'single', or 'multiple'.\n   *\n   * @defaultvalue {@link SelectionMode.multiple}\n   */\n  selectionMode?: SelectionMode;\n  /**\n   * If true, selection is preserved on outer click.\n   */\n  selectionPreservedOnEmptyClick?: boolean;\n  /**\n   * If true, disables automatic selection on input elements.\n   */\n  disableAutoSelectOnInputElements?: boolean;\n  /**\n   * If true, modal selection is enabled on touch event.\n   */\n  enterModalOnTouch?: boolean;\n  /**\n   * Determines whether elements with the attribute `data-selection-touch-invoke` should be used as invocation targets\n   * for an item if the user is using touch.\n   *\n   * @defaultvalue false\n   */\n  enableTouchInvocationTarget?: boolean;\n  /**\n   * Determines if an item is selected on focus.\n   *\n   * @defaultvalue true\n   */\n  isSelectedOnFocus?: boolean;\n  /**\n   * Determines if elements within the selection zone that DO NOT have the 'data-selection-toggle' or\n   * 'data-selection-all-toggle' attribute are clickable and can alter the selection.\n   *\n   * @defaultvalue true\n   */\n  selectionClearedOnSurfaceClick?: boolean;\n\n  /**\n   * Determines if pressing the Escape clears the selection.\n   *\n   * @defaultvalue true\n   */\n  selectionClearedOnEscapePress?: boolean;\n\n  /**\n   * Allows the default toggle behavior to be overridden.\n   * When set to `true` users do not have press a modifier key (e.g., ctrl or meta)\n   * to toggle values.\n   *\n   * @default false\n   */\n  toggleWithoutModifierPressed?: boolean;\n\n  /**\n   * Optional callback for when an item is\n   * invoked via ENTER or double-click.\n   */\n  onItemInvoked?: (item?: IObjectWithKey, index?: number, ev?: Event) => void;\n  /**\n   * Optional callback for when an\n   * item's contextual menu action occurs.\n   */\n  onItemContextMenu?: (item?: any, index?: number, ev?: Event) => void | boolean;\n  /**\n   * Additional CSS class(es) to apply to the SelectionZone.\n   */\n  className?: string;\n}\n\n/**\n * {@docCategory Selection}\n */\nexport interface ISelectionZoneState {\n  isModal: boolean | undefined;\n}\n\n/**\n * {@docCategory Selection}\n */\nexport class SelectionZone extends React.Component<ISelectionZoneProps, ISelectionZoneState> {\n  public static defaultProps = {\n    isSelectedOnFocus: true,\n    toggleWithoutModifierPressed: false,\n    selectionMode: SelectionMode.multiple,\n    selectionClearedOnEscapePress: true,\n  };\n\n  private _async: Async;\n  private _events: EventGroup;\n  private _root = React.createRef<HTMLDivElement>();\n  private _isCtrlPressed: boolean;\n  private _isShiftPressed: boolean;\n  private _isMetaPressed: boolean;\n  private _isTabPressed: boolean;\n  private _shouldHandleFocus: boolean;\n  private _shouldHandleFocusTimeoutId: number | undefined;\n  private _isTouch: boolean;\n  private _isTouchTimeoutId: number | undefined;\n\n  public static getDerivedStateFromProps(\n    nextProps: ISelectionZoneProps,\n    prevState: ISelectionZoneState,\n  ): ISelectionZoneState {\n    const isModal = nextProps.selection.isModal && nextProps.selection.isModal();\n\n    return {\n      ...prevState,\n      isModal,\n    };\n  }\n\n  constructor(props: ISelectionZoneProps) {\n    super(props);\n\n    this._events = new EventGroup(this);\n    this._async = new Async(this);\n    initializeComponentRef(this);\n\n    const { selection } = this.props;\n\n    // Reflect the initial modal state of selection into the state.\n    const isModal = selection.isModal && selection.isModal();\n\n    this.state = {\n      isModal,\n    };\n  }\n\n  public componentDidMount(): void {\n    const win = getWindow(this._root.current);\n\n    // Track the latest modifier keys globally.\n    this._events.on(win, 'keydown, keyup', this._updateModifiers, true);\n    this._events.on(document, 'click', this._findScrollParentAndTryClearOnEmptyClick);\n    this._events.on(document.body, 'touchstart', this._onTouchStartCapture, true);\n    this._events.on(document.body, 'touchend', this._onTouchStartCapture, true);\n\n    // Subscribe to the selection to keep modal state updated.\n    this._events.on(this.props.selection, 'change', this._onSelectionChange);\n  }\n\n  public render(): JSX.Element {\n    const { isModal } = this.state;\n\n    return (\n      <div\n        className={css('ms-SelectionZone', this.props.className, {\n          'ms-SelectionZone--modal': !!isModal,\n        })}\n        ref={this._root}\n        onKeyDown={this._onKeyDown}\n        onMouseDown={this._onMouseDown}\n        onKeyDownCapture={this._onKeyDownCapture}\n        onClick={this._onClick}\n        role=\"presentation\"\n        onDoubleClick={this._onDoubleClick}\n        onContextMenu={this._onContextMenu}\n        onMouseDownCapture={this._onMouseDownCapture}\n        onFocusCapture={this._onFocus}\n        data-selection-is-modal={isModal ? true : undefined}\n      >\n        {this.props.children}\n        <FocusRects />\n      </div>\n    );\n  }\n\n  public componentDidUpdate(previousProps: ISelectionZoneProps): void {\n    const { selection } = this.props;\n\n    if (selection !== previousProps.selection) {\n      // Whenever selection changes, update the subscripton to keep modal state updated.\n      this._events.off(previousProps.selection);\n      this._events.on(selection, 'change', this._onSelectionChange);\n    }\n  }\n\n  public componentWillUnmount(): void {\n    this._events.dispose();\n    this._async.dispose();\n  }\n\n  /**\n   * In some cases, the consuming scenario requires to set focus on a row without having SelectionZone\n   * react to the event. Note that focus events in IE \\<= 11 will occur asynchronously after .focus() has\n   * been called on an element, so we need a flag to store the idea that we will bypass the \"next\"\n   * focus event that occurs. This method does that.\n   */\n  public ignoreNextFocus = (): void => {\n    this._handleNextFocus(false);\n  };\n\n  private _onSelectionChange = (): void => {\n    const { selection } = this.props;\n\n    const isModal = selection.isModal && selection.isModal();\n\n    this.setState({\n      isModal,\n    });\n  };\n\n  private _onMouseDownCapture = (ev: React.MouseEvent<HTMLElement>): void => {\n    let target = ev.target as HTMLElement;\n\n    if (document.activeElement !== target && !elementContains(document.activeElement as HTMLElement, target)) {\n      this.ignoreNextFocus();\n      return;\n    }\n\n    if (!elementContains(target, this._root.current)) {\n      return;\n    }\n\n    while (target !== this._root.current) {\n      if (this._hasAttribute(target, SELECTION_INVOKE_ATTRIBUTE_NAME)) {\n        this.ignoreNextFocus();\n        break;\n      }\n\n      target = getParent(target) as HTMLElement;\n    }\n  };\n\n  /**\n   * When we focus an item, for single/multi select scenarios, we should try to select it immediately\n   * as long as the focus did not originate from a mouse down/touch event. For those cases, we handle them\n   * specially.\n   */\n  private _onFocus = (ev: React.FocusEvent<HTMLElement>): void => {\n    const target = ev.target as HTMLElement;\n    const { selection } = this.props;\n    const isToggleModifierPressed = this._isCtrlPressed || this._isMetaPressed;\n\n    const selectionMode = this._getSelectionMode();\n\n    if (this._shouldHandleFocus && selectionMode !== SelectionMode.none) {\n      const isToggle = this._hasAttribute(target, SELECTION_TOGGLE_ATTRIBUTE_NAME);\n      const itemRoot = this._findItemRoot(target);\n\n      if (!isToggle && itemRoot) {\n        const index = this._getItemIndex(itemRoot);\n        const span = this._getItemSpan(itemRoot);\n\n        if (span === undefined) {\n          if (isToggleModifierPressed) {\n            // set anchor only.\n            selection.setIndexSelected(index, selection.isIndexSelected(index), true);\n            if (this.props.enterModalOnTouch && this._isTouch && selection.setModal) {\n              selection.setModal(true);\n              this._setIsTouch(false);\n            }\n          } else {\n            if (this.props.isSelectedOnFocus) {\n              this._onItemSurfaceClick('focus', index);\n            }\n          }\n        }\n      }\n    }\n\n    this._handleNextFocus(false);\n  };\n\n  private _onMouseDown = (ev: React.MouseEvent<HTMLElement>): void => {\n    this._updateModifiers(ev);\n\n    const { toggleWithoutModifierPressed } = this.props;\n\n    let target = ev.target as HTMLElement;\n    const itemRoot = this._findItemRoot(target);\n\n    // No-op if selection is disabled\n    if (this._isSelectionDisabled(target)) {\n      return;\n    }\n\n    while (target !== this._root.current) {\n      if (this._hasAttribute(target, SELECTALL_TOGGLE_ALL_ATTRIBUTE_NAME)) {\n        break;\n      } else if (itemRoot) {\n        if (this._hasAttribute(target, SELECTION_TOGGLE_ATTRIBUTE_NAME)) {\n          break;\n        } else if (this._hasAttribute(target, SELECTION_INVOKE_ATTRIBUTE_NAME)) {\n          break;\n        } else if (\n          (target === itemRoot || this._shouldAutoSelect(target)) &&\n          !this._isShiftPressed &&\n          !this._isCtrlPressed &&\n          !this._isMetaPressed &&\n          !toggleWithoutModifierPressed\n        ) {\n          this._onInvokeMouseDown(ev, this._getItemIndex(itemRoot), this._getItemSpan(itemRoot));\n\n          break;\n        } else if (\n          this.props.disableAutoSelectOnInputElements &&\n          (target.tagName === 'A' || target.tagName === 'BUTTON' || target.tagName === 'INPUT')\n        ) {\n          return;\n        }\n      }\n\n      target = getParent(target) as HTMLElement;\n    }\n  };\n\n  private _onTouchStartCapture = (ev: React.TouchEvent<HTMLElement>): void => {\n    this._setIsTouch(true);\n  };\n\n  private _onClick = (ev: React.MouseEvent<HTMLElement>): void => {\n    const { enableTouchInvocationTarget = false } = this.props;\n\n    this._updateModifiers(ev);\n\n    let target = ev.target as HTMLElement;\n    const itemRoot = this._findItemRoot(target);\n\n    const isSelectionDisabled = this._isSelectionDisabled(target);\n\n    while (target !== this._root.current) {\n      if (this._hasAttribute(target, SELECTALL_TOGGLE_ALL_ATTRIBUTE_NAME)) {\n        if (!isSelectionDisabled) {\n          this._onToggleAllClick(ev);\n        }\n        break;\n      } else if (itemRoot) {\n        const index = this._getItemIndex(itemRoot);\n        const span = this._getItemSpan(itemRoot);\n\n        if (this._hasAttribute(target, SELECTION_TOGGLE_ATTRIBUTE_NAME)) {\n          if (!isSelectionDisabled) {\n            if (this._isShiftPressed) {\n              this._onItemSurfaceClick('click', index, span);\n            } else {\n              this._onToggleClick(ev, index, span);\n            }\n          }\n          break;\n        } else if (\n          (this._isTouch &&\n            enableTouchInvocationTarget &&\n            this._hasAttribute(target, SELECTION_INVOKE_TOUCH_ATTRIBUTE_NAME)) ||\n          this._hasAttribute(target, SELECTION_INVOKE_ATTRIBUTE_NAME)\n        ) {\n          if (span === undefined) {\n            // Items should be invokable even if selection is disabled.\n            this._onInvokeClick(ev, index);\n          }\n          break;\n        } else if (target === itemRoot) {\n          if (!isSelectionDisabled) {\n            this._onItemSurfaceClick('click', index, span);\n          }\n          break;\n        } else if (target.tagName === 'A' || target.tagName === 'BUTTON' || target.tagName === 'INPUT') {\n          return;\n        }\n      }\n\n      target = getParent(target) as HTMLElement;\n    }\n  };\n\n  private _onContextMenu = (ev: React.MouseEvent<HTMLElement>): void => {\n    const target = ev.target as HTMLElement;\n\n    const { onItemContextMenu, selection } = this.props;\n    if (onItemContextMenu) {\n      const itemRoot = this._findItemRoot(target);\n\n      if (itemRoot) {\n        const index = this._getItemIndex(itemRoot);\n\n        this._onInvokeMouseDown(ev, index);\n\n        const skipPreventDefault = onItemContextMenu(selection.getItems()[index], index, ev.nativeEvent);\n\n        // In order to keep back compat, if the value here is undefined, then we should still\n        // call preventDefault(). Only in the case where true is explicitly returned should\n        // the call be skipped.\n        if (!skipPreventDefault) {\n          ev.preventDefault();\n        }\n      }\n    }\n  };\n\n  private _isSelectionDisabled(target: HTMLElement): boolean {\n    if (this._getSelectionMode() === SelectionMode.none) {\n      return true;\n    }\n\n    while (target !== this._root.current) {\n      if (this._hasAttribute(target, SELECTION_DISABLED_ATTRIBUTE_NAME)) {\n        return true;\n      }\n      target = getParent(target) as HTMLElement;\n    }\n\n    return false;\n  }\n\n  /**\n   * In multi selection, if you double click within an item's root (but not within the invoke element or\n   * input elements), we should execute the invoke handler.\n   */\n  private _onDoubleClick = (ev: React.MouseEvent<HTMLElement>): void => {\n    let target = ev.target as HTMLElement;\n\n    const { onItemInvoked } = this.props;\n    const itemRoot = this._findItemRoot(target);\n\n    if (itemRoot && onItemInvoked && !this._isInputElement(target)) {\n      const index = this._getItemIndex(itemRoot);\n\n      while (target !== this._root.current) {\n        if (\n          this._hasAttribute(target, SELECTION_TOGGLE_ATTRIBUTE_NAME) ||\n          this._hasAttribute(target, SELECTION_INVOKE_ATTRIBUTE_NAME)\n        ) {\n          break;\n        } else if (target === itemRoot) {\n          this._onInvokeClick(ev, index);\n          break;\n        }\n\n        target = getParent(target) as HTMLElement;\n      }\n\n      target = getParent(target) as HTMLElement;\n    }\n  };\n\n  private _onKeyDownCapture = (ev: React.KeyboardEvent<HTMLElement>): void => {\n    this._updateModifiers(ev);\n\n    this._handleNextFocus(true);\n  };\n\n  private _onKeyDown = (ev: React.KeyboardEvent<HTMLElement>): boolean | undefined => {\n    this._updateModifiers(ev);\n\n    let target = ev.target as HTMLElement;\n\n    const isSelectionDisabled = this._isSelectionDisabled(target);\n\n    const { selection, selectionClearedOnEscapePress } = this.props;\n    // eslint-disable-next-line deprecation/deprecation\n    const isSelectAllKey = ev.which === KeyCodes.a && (this._isCtrlPressed || this._isMetaPressed);\n    // eslint-disable-next-line deprecation/deprecation\n    const isClearSelectionKey = ev.which === KeyCodes.escape;\n\n    // Ignore key downs from input elements.\n    if (this._isInputElement(target)) {\n      // A key was pressed while an item in this zone was focused.\n      return;\n    }\n\n    const selectionMode = this._getSelectionMode();\n\n    // If ctrl-a is pressed, select all (if all are not already selected.)\n    if (isSelectAllKey && selectionMode === SelectionMode.multiple && !selection.isAllSelected()) {\n      if (!isSelectionDisabled) {\n        selection.setAllSelected(true);\n      }\n      ev.stopPropagation();\n      ev.preventDefault();\n      return;\n    }\n\n    // If escape is pressed and the component is configured to clear on escape press,\n    // clear selection (if any are selected.)\n    if (selectionClearedOnEscapePress && isClearSelectionKey && selection.getSelectedCount() > 0) {\n      if (!isSelectionDisabled) {\n        selection.setAllSelected(false);\n      }\n      ev.stopPropagation();\n      ev.preventDefault();\n      return;\n    }\n\n    const itemRoot = this._findItemRoot(target);\n\n    // If a key was pressed within an item, we should treat \"enters\" as invokes and \"space\" as toggle\n    if (itemRoot) {\n      const index = this._getItemIndex(itemRoot);\n      const span = this._getItemSpan(itemRoot);\n\n      while (target !== this._root.current) {\n        if (this._hasAttribute(target, SELECTION_TOGGLE_ATTRIBUTE_NAME)) {\n          // For toggle elements, assuming they are rendered as buttons, they will generate a click event,\n          // so we can no-op for any keydowns in this case.\n          break;\n        } else if (this._shouldAutoSelect(target)) {\n          if (!isSelectionDisabled && span === undefined) {\n            // If the event went to an element which should trigger auto-select, select it and then let\n            // the default behavior kick in.\n            this._onInvokeMouseDown(ev, index, span);\n          }\n          break;\n        } else if (\n          // eslint-disable-next-line deprecation/deprecation\n          (ev.which === KeyCodes.enter || ev.which === KeyCodes.space) &&\n          (target.tagName === 'BUTTON' ||\n            target.tagName === 'A' ||\n            target.tagName === 'INPUT' ||\n            target.tagName === 'SUMMARY')\n        ) {\n          return false;\n        } else if (target === itemRoot) {\n          // eslint-disable-next-line deprecation/deprecation\n          if (ev.which === KeyCodes.enter) {\n            if (span === undefined) {\n              // Items should be invokable even if selection is disabled.\n              this._onInvokeClick(ev, index);\n              ev.preventDefault();\n            }\n            return;\n            // eslint-disable-next-line deprecation/deprecation\n          } else if (ev.which === KeyCodes.space) {\n            if (!isSelectionDisabled) {\n              this._onToggleClick(ev, index, span);\n            }\n            ev.preventDefault();\n            return;\n          }\n          break;\n        }\n\n        target = getParent(target) as HTMLElement;\n      }\n    }\n  };\n\n  private _onToggleAllClick(ev: React.MouseEvent<HTMLElement>): void {\n    const { selection } = this.props;\n\n    const selectionMode = this._getSelectionMode();\n\n    if (selectionMode === SelectionMode.multiple) {\n      selection.toggleAllSelected();\n      ev.stopPropagation();\n      ev.preventDefault();\n    }\n  }\n\n  private _onToggleClick(\n    ev: React.MouseEvent<HTMLElement> | React.KeyboardEvent<HTMLElement>,\n    index: number,\n    span?: number,\n  ): void {\n    const { selection } = this.props;\n\n    const selectionMode = this._getSelectionMode();\n\n    selection.setChangeEvents(false);\n\n    if (\n      this.props.enterModalOnTouch &&\n      this._isTouch &&\n      (span !== undefined ? !selection.isRangeSelected(index, span) : !selection.isIndexSelected(index)) &&\n      selection.setModal\n    ) {\n      selection.setModal(true);\n      this._setIsTouch(false);\n    }\n\n    if (selectionMode === SelectionMode.multiple) {\n      if (span !== undefined) {\n        selection.toggleRangeSelected(index, span);\n      } else {\n        selection.toggleIndexSelected(index);\n      }\n    } else if (selectionMode === SelectionMode.single) {\n      if (span === undefined || span === 1) {\n        const isSelected = selection.isIndexSelected(index);\n        const isModal = selection.isModal && selection.isModal();\n        selection.setAllSelected(false);\n        selection.setIndexSelected(index, !isSelected, true);\n        if (isModal && selection.setModal) {\n          // Since the above call to setAllSelected(false) clears modal state,\n          // restore it. This occurs because the SelectionMode of the Selection\n          // may differ from the SelectionZone.\n          selection.setModal(true);\n        }\n      }\n    } else {\n      selection.setChangeEvents(true);\n      return;\n    }\n\n    selection.setChangeEvents(true);\n\n    ev.stopPropagation();\n\n    // NOTE: ev.preventDefault is not called for toggle clicks, because this will kill the browser behavior\n    // for checkboxes if you use a checkbox for the toggle.\n  }\n\n  private _onInvokeClick(ev: React.MouseEvent<HTMLElement> | React.KeyboardEvent<HTMLElement>, index: number): void {\n    const { selection, onItemInvoked } = this.props;\n\n    if (onItemInvoked) {\n      onItemInvoked(selection.getItems()[index], index, ev.nativeEvent);\n      ev.preventDefault();\n      ev.stopPropagation();\n    }\n  }\n\n  private _onItemSurfaceClick(type: 'focus' | 'click', index: number, span?: number): void {\n    const { selection, toggleWithoutModifierPressed } = this.props;\n    const isToggleModifierPressed = this._isCtrlPressed || this._isMetaPressed;\n\n    const selectionMode = this._getSelectionMode();\n\n    if (selectionMode === SelectionMode.multiple) {\n      if (this._isShiftPressed && !this._isTabPressed) {\n        if (span !== undefined) {\n          selection.selectToRange?.(index, span, !isToggleModifierPressed);\n        } else {\n          selection.selectToIndex(index, !isToggleModifierPressed);\n        }\n      } else if (type === 'click' && (isToggleModifierPressed || toggleWithoutModifierPressed)) {\n        if (span !== undefined) {\n          selection.toggleRangeSelected(index, span);\n        } else {\n          selection.toggleIndexSelected(index);\n        }\n      } else {\n        this._clearAndSelectIndex(index, span);\n      }\n    } else if (selectionMode === SelectionMode.single) {\n      this._clearAndSelectIndex(index, span);\n    }\n  }\n\n  private _onInvokeMouseDown(\n    ev: React.MouseEvent<HTMLElement> | React.KeyboardEvent<HTMLElement>,\n    index: number,\n    span?: number,\n  ): void {\n    const { selection } = this.props;\n\n    if (span !== undefined) {\n      if (selection.isRangeSelected(index, span)) {\n        return;\n      }\n    } else {\n      // Only do work if item is not selected.\n      if (selection.isIndexSelected(index)) {\n        return;\n      }\n    }\n\n    this._clearAndSelectIndex(index, span);\n  }\n\n  /**\n   * To avoid high startup cost of traversing the DOM on component mount,\n   * defer finding the scrollable parent until a click interaction.\n   *\n   * The styles will probably already calculated since we're running in a click handler,\n   * so this is less likely to cause layout thrashing then doing it in mount.\n   */\n  private _findScrollParentAndTryClearOnEmptyClick(ev: MouseEvent) {\n    const scrollParent = findScrollableParent(this._root.current) as HTMLElement;\n    // unbind this handler and replace binding with a binding on the actual scrollable parent\n    this._events.off(document, 'click', this._findScrollParentAndTryClearOnEmptyClick);\n    this._events.on(scrollParent, 'click', this._tryClearOnEmptyClick);\n\n    // If we clicked inside the scrollable parent, call through to the handler on this click.\n    if ((scrollParent && ev.target instanceof Node && scrollParent.contains(ev.target)) || scrollParent === ev.target) {\n      this._tryClearOnEmptyClick(ev);\n    }\n  }\n\n  private _tryClearOnEmptyClick(ev: MouseEvent): void {\n    if (!this.props.selectionPreservedOnEmptyClick && this._isNonHandledClick(ev.target as HTMLElement)) {\n      this.props.selection.setAllSelected(false);\n    }\n  }\n\n  private _clearAndSelectIndex(index: number, span?: number): void {\n    const { selection, selectionClearedOnSurfaceClick = true } = this.props;\n    const isAlreadySingleSelected =\n      (span === undefined || span === 1) && selection.getSelectedCount() === 1 && selection.isIndexSelected(index);\n\n    if (!isAlreadySingleSelected && selectionClearedOnSurfaceClick) {\n      const isModal = selection.isModal && selection.isModal();\n      selection.setChangeEvents(false);\n      selection.setAllSelected(false);\n      if (span !== undefined) {\n        selection.setRangeSelected?.(index, span, true, true);\n      } else {\n        selection.setIndexSelected(index, true, true);\n      }\n      if (isModal || (this.props.enterModalOnTouch && this._isTouch)) {\n        if (selection.setModal) {\n          selection.setModal(true);\n        }\n        if (this._isTouch) {\n          this._setIsTouch(false);\n        }\n      }\n      selection.setChangeEvents(true);\n    }\n  }\n\n  /**\n   * We need to track the modifier key states so that when focus events occur, which do not contain\n   * modifier states in the Event object, we know how to behave.\n   */\n  private _updateModifiers(ev: React.KeyboardEvent<HTMLElement> | React.MouseEvent<HTMLElement>): void {\n    this._isShiftPressed = ev.shiftKey;\n    this._isCtrlPressed = ev.ctrlKey;\n    this._isMetaPressed = ev.metaKey;\n\n    // eslint-disable-next-line deprecation/deprecation\n    const keyCode = (ev as React.KeyboardEvent<HTMLElement>).keyCode;\n    this._isTabPressed = keyCode ? keyCode === KeyCodes.tab : false;\n  }\n\n  private _findItemRoot(target: HTMLElement): HTMLElement | undefined {\n    const { selection } = this.props;\n\n    while (target !== this._root.current) {\n      const indexValue = target.getAttribute(SELECTION_INDEX_ATTRIBUTE_NAME);\n      const index = Number(indexValue);\n\n      if (indexValue !== null && index >= 0 && index < selection.getItems().length) {\n        break;\n      }\n\n      target = getParent(target) as HTMLElement;\n    }\n\n    if (target === this._root.current) {\n      return undefined;\n    }\n\n    return target;\n  }\n\n  private _getItemIndex(itemRoot: HTMLElement): number {\n    const indexValue = parseInt(itemRoot.getAttribute(SELECTION_INDEX_ATTRIBUTE_NAME) ?? '', 10);\n\n    return isNaN(indexValue) ? -1 : indexValue;\n  }\n\n  private _getItemSpan(itemRoot: HTMLElement): number | undefined {\n    const spanValue = parseInt(itemRoot.getAttribute(SELECTION_SPAN_ATTRIBUTE_NAME) ?? '', 10);\n\n    return isNaN(spanValue) ? undefined : spanValue;\n  }\n\n  private _shouldAutoSelect(element: HTMLElement): boolean {\n    return this._hasAttribute(element, SELECTION_SELECT_ATTRIBUTE_NAME);\n  }\n\n  private _hasAttribute(element: HTMLElement, attributeName: string): boolean {\n    let isToggle = false;\n\n    while (!isToggle && element !== this._root.current) {\n      const value = element.getAttribute(attributeName);\n      if (value === 'false') {\n        isToggle = false;\n        break;\n      }\n      isToggle = value === 'true';\n      element = getParent(element) as HTMLElement;\n    }\n\n    return isToggle;\n  }\n\n  private _isInputElement(element: HTMLElement): boolean {\n    return (\n      element.tagName === 'INPUT' ||\n      element.tagName === 'TEXTAREA' ||\n      element.getAttribute('contenteditable') === 'true' ||\n      element.getAttribute('contenteditable') === ''\n    );\n  }\n\n  private _isNonHandledClick(element: HTMLElement): boolean {\n    const doc = getDocument();\n\n    if (doc && element) {\n      while (element && element !== doc.documentElement) {\n        if (isElementTabbable(element) || element.hasAttribute('data-selection-index')) {\n          return false;\n        }\n\n        element = getParent(element) as HTMLElement;\n      }\n    }\n\n    return true;\n  }\n\n  private _handleNextFocus(handleFocus: boolean): void {\n    if (this._shouldHandleFocusTimeoutId) {\n      this._async.clearTimeout(this._shouldHandleFocusTimeoutId);\n      this._shouldHandleFocusTimeoutId = undefined;\n    }\n\n    this._shouldHandleFocus = handleFocus;\n\n    if (handleFocus) {\n      this._async.setTimeout(() => {\n        this._shouldHandleFocus = false;\n      }, 100);\n    }\n  }\n\n  private _setIsTouch(isTouch: boolean): void {\n    if (this._isTouchTimeoutId) {\n      this._async.clearTimeout(this._isTouchTimeoutId);\n      this._isTouchTimeoutId = undefined;\n    }\n\n    this._isTouch = true;\n\n    if (isTouch) {\n      this._async.setTimeout(() => {\n        this._isTouch = false;\n      }, 300);\n    }\n  }\n\n  private _getSelectionMode(): SelectionMode {\n    const { selection } = this.props;\n\n    const { selectionMode = selection ? selection.mode : SelectionMode.none } = this.props;\n\n    return selectionMode;\n  }\n}\n", "import * as React from 'react';\nimport { GroupedListBase } from './GroupedList.base';\nimport { SelectionMode } from '../../Selection';\nimport type { IList, IListProps } from '../../List';\nimport type { IFocusZoneProps } from '../../FocusZone';\nimport type { IRefObject, IRenderFunction, IStyleFunctionOrObject } from '../../Utilities';\nimport type { IDragDropContext, IDragDropEvents, IDragDropHelper } from '../../DragDrop';\nimport type { ISelection } from '../../Selection';\nimport type { IViewport } from '../../utilities/decorators/withViewport';\nimport type { ITheme, IStyle } from '../../Styling';\nimport type { IGroupHeaderProps } from './GroupHeader.types';\nimport type { IGroupShowAllProps } from './GroupShowAll.types';\nimport type { IGroupFooterProps } from './GroupFooter.types';\n\n/**\n * {@docCategory GroupedList}\n */\nexport enum CollapseAllVisibility {\n  hidden = 0,\n  visible = 1,\n}\n\n/**\n * {@docCategory GroupedList}\n */\nexport interface IGroupedList extends IList {\n  /**\n   * Ensures that the list content is updated. Call this in cases where the list props don't change, but the list still\n   * needs to be re-evaluated. For example, if a sizer bar is adjusted and causes the list width to change, you can\n   * call this to force a re-evaluation. Be aware that this can be an expensive operation and should be done sparingly.\n   */\n  forceUpdate: () => void;\n\n  /**\n   * Toggles the collapsed state of all the groups in the list.\n   */\n  toggleCollapseAll: (allCollapsed: boolean) => void;\n}\n\n/**\n * {@docCategory GroupedList}\n */\nexport interface IGroupedListProps extends React.ClassAttributes<GroupedListBase> {\n  /**\n   * Theme that is passed in from Higher Order Component\n   */\n  theme?: ITheme;\n\n  /**\n   * Style function to be passed in to override the themed or default styles\n   */\n  styles?: IStyleFunctionOrObject<IGroupedListStyleProps, IGroupedListStyles>;\n\n  /**\n   * Optional callback to access the IGroupedList interface. Use this instead of ref for accessing\n   * the public methods and properties of the component.\n   */\n  componentRef?: IRefObject<IGroupedList>;\n\n  /** Optional class name to add to the root element. */\n  className?: string;\n\n  /** Boolean value to indicate if the component should render in compact mode. Set to false by default */\n  compact?: boolean;\n\n  /** Map of callback functions related to drag and drop functionality. */\n  dragDropEvents?: IDragDropEvents;\n\n  /** helper to manage drag/drop across item and groups */\n  dragDropHelper?: IDragDropHelper;\n\n  /** Event names and corresponding callbacks that will be registered to groups and rendered elements */\n  eventsToRegister?: { eventName: string; callback: (context: IDragDropContext, event?: any) => void }[];\n\n  /** Optional override properties to render groups. */\n  groupProps?: IGroupRenderProps;\n\n  /** Optional grouping instructions. */\n  groups?: IGroup[];\n\n  /** List of items to render. */\n  items: any[];\n\n  /** Optional properties to pass through to the FocusZone. */\n  focusZoneProps?: IFocusZoneProps;\n\n  /** Optional properties to pass through to the list components being rendered. */\n  listProps?: IListProps;\n\n  /** Optional properties to pass through to the root list component being rendered. */\n  rootListProps?: IListProps;\n\n  /** Rendering callback to render the group items. */\n  onRenderCell: (nestingDepth?: number, item?: any, index?: number) => React.ReactNode;\n\n  /** Override the default role for GroupedList.  */\n  role?: string;\n\n  /** Optional selection model to track selection state.  */\n  selection?: ISelection;\n\n  /** Controls how/if the list manages selection. */\n  selectionMode?: SelectionMode;\n\n  /** Optional Viewport, provided by the parent component. */\n  viewport?: IViewport;\n\n  /** Optional callback when the group expand state changes between all collapsed and at least one group is expanded. */\n  onGroupExpandStateChanged?: (isSomeGroupExpanded: boolean) => void;\n\n  /**\n   * boolean to control if pages containing unchanged items should be cached, this is a perf optimization\n   * The same property in List.Props\n   */\n  usePageCache?: boolean;\n\n  /**\n   * Optional callback to determine whether the list should be rendered in full, or virtualized.\n   * Virtualization will add and remove pages of items as the user scrolls them into the visible range.\n   * This benefits larger list scenarios by reducing the DOM on the screen, but can negatively affect performance for\n   * smaller lists.\n   * The default implementation will virtualize when this callback is not provided.\n   */\n  onShouldVirtualize?: (props: IListProps) => boolean;\n\n  /**\n   * Optional function to override default group height calculation used by list virtualization.\n   */\n  getGroupHeight?: (group: IGroup, groupIndex: number) => number;\n}\n\n/**\n * {@docCategory GroupedList}\n */\nexport interface IGroup {\n  /**\n   * Unique identifier for the group.\n   */\n  key: string;\n\n  /**\n   * Display name for the group, rendered on the header.\n   */\n  name: string;\n\n  /**\n   * Start index for the group within the given items.\n   */\n  startIndex: number;\n\n  /**\n   * How many items should be rendered within the group.\n   */\n  count: number;\n\n  /**\n   * Nested groups, if any.\n   */\n  children?: IGroup[];\n\n  /**\n   * Number indicating the level of nested groups.\n   */\n  level?: number;\n\n  /**\n   * @deprecated At 1.0.0, selection state wil be controlled by the selection store only.\n   */\n  isSelected?: boolean;\n\n  /**\n   * If all the items in the group are collapsed.\n   */\n  isCollapsed?: boolean;\n\n  /**\n   * If the items within the group are summarized or showing all.\n   */\n  isShowingAll?: boolean;\n\n  /**\n   * If drag/drop is enabled for the group header.\n   */\n  isDropEnabled?: boolean;\n\n  /**\n   * Arbitrary data required to be preserved by the caller.\n   */\n  data?: any;\n\n  /**\n   * Optional accessibility label (aria-label) attribute that will be stamped on to the element.\n   * If none is specified, the arai-label attribute will contain the group name\n   */\n  ariaLabel?: string;\n\n  /**\n   * Optional flag to indicate the group has more data to load than the current group count indicated.\n   * This can be used to indicate that a plus should be rendered next to the group count in the header.\n   */\n  hasMoreData?: boolean;\n}\n\n/**\n * {@docCategory GroupedList}\n */\nexport interface IGroupRenderProps {\n  /** Boolean indicating if all groups are in collapsed state. */\n  isAllGroupsCollapsed?: boolean;\n\n  /** Grouping item limit. */\n  getGroupItemLimit?: (group: IGroup) => number;\n\n  /** Callback for when all groups are expanded or collapsed. */\n  onToggleCollapseAll?: (isAllCollapsed: boolean) => void;\n\n  /** Information to pass in to the group header. */\n  headerProps?: IGroupHeaderProps;\n\n  /** Information to pass in to the group Show all footer. */\n  showAllProps?: IGroupShowAllProps;\n\n  /** Information to pass in to the group footer. */\n  footerProps?: IGroupFooterProps;\n\n  /**\n   * Override which allows the caller to provide a custom header.\n   */\n  onRenderHeader?: IRenderFunction<IGroupHeaderProps>;\n\n  /**\n   * Override which allows the caller to provide a custom Show All link.\n   */\n  onRenderShowAll?: IRenderFunction<IGroupShowAllProps>;\n\n  /**\n   * Override which allows the caller to provide a custom footer.\n   */\n  onRenderFooter?: IRenderFunction<IGroupFooterProps>;\n\n  /**\n   * Flag to indicate whether to ignore the collapsing icon on header.\n   * @defaultvalue CollapseAllVisibility.visible\n   */\n  collapseAllVisibility?: CollapseAllVisibility;\n\n  /**\n   * Boolean indicating if empty groups are shown\n   * @defaultvalue false\n   */\n  showEmptyGroups?: boolean;\n\n  /**\n   * Override which allows the caller to provide a custom aria role\n   */\n  role?: string;\n}\n\n/**\n * {@docCategory GroupedList}\n */\nexport interface IGroupDividerProps {\n  componentRef?: IRefObject<{}>;\n\n  /** Boolean value to indicate if the component should render in compact mode. Set to false by default */\n  compact?: boolean;\n\n  /** Callback to determine if a group has missing items and needs to load them from the server. */\n  isGroupLoading?: (group: IGroup) => boolean;\n\n  /** Text shown on group headers to indicate the group is being loaded. */\n  loadingText?: string;\n\n  /** The group to be rendered by the header. */\n  group?: IGroup;\n\n  /** The index of the group. */\n  groupIndex?: number;\n\n  /** The indent level of the group. */\n  groupLevel?: number;\n\n  /** Defines the number of columns a group header needs to span in the case of a grid or treegrid */\n  ariaColSpan?: number;\n\n  /** Defines an element's nesting depth in the current set of treeitems */\n  ariaLevel?: number;\n\n  /** Defines the number of items in the current set of treeitems */\n  ariaSetSize?: number;\n\n  /** Defines an element's number or position in the current set of treeitems */\n  ariaPosInSet?: number;\n\n  /** Defines the number of items in the current set of grid items */\n  ariaRowCount?: number;\n\n  /** Defines an element's number or position in the current set of grid items */\n  ariaRowIndex?: number;\n\n  /**\n   * Width corresponding to a single level.\n   * This is multiplied by the groupLevel to get the full spacer width for the group.\n   */\n  indentWidth?: number;\n\n  /** If all items in the group are selected. */\n  selected?: boolean;\n\n  /**\n   * @deprecated Use `selected` instead. Deprecated at v.65.1.\n   */\n  isSelected?: boolean;\n\n  /** A reference to the viewport in which the header is rendered. */\n  viewport?: IViewport;\n\n  /** The selection mode of the list the group lives within. */\n  selectionMode?: SelectionMode;\n\n  /** Text to display for the group footer. */\n  footerText?: string;\n\n  /** Text to display for the group \"Show All\" link. */\n  showAllLinkText?: string;\n\n  /** Callback for when the group \"Show All\" link is clicked */\n  onToggleSummarize?: (group: IGroup) => void;\n\n  /** Callback for when the group header is clicked. */\n  onGroupHeaderClick?: (group: IGroup) => void;\n\n  /** Callback for when the \"keyup\" event is fired on the group header. */\n  onGroupHeaderKeyUp?: (ev: React.KeyboardEvent<HTMLElement>, group?: IGroup) => void;\n\n  /** Callback for when the group is expanded or collapsed. */\n  onToggleCollapse?: (group: IGroup) => void;\n\n  /** Callback for when the group is selected. */\n  onToggleSelectGroup?: (group: IGroup) => void;\n\n  /** Determines if the group selection check box is shown for collapsed groups. */\n  isCollapsedGroupSelectVisible?: boolean;\n\n  /** Override which allows the caller to provider a custom renderer for the GroupHeader title. */\n  onRenderTitle?: IRenderFunction<IGroupHeaderProps>;\n  /** Override which allows the caller to provide a custom renderer for just the name. */\n  onRenderName?: IRenderFunction<IGroupHeaderProps>;\n\n  /** Props for expand/collapse button\n   * @deprecated Use {@link IGroupHeaderProps.expandButtonProps} instead.\n   */\n  expandButtonProps?: React.HTMLAttributes<HTMLButtonElement>;\n\n  /** Stores parent group's children. */\n  groups?: IGroup[];\n\n  /** Custom className */\n  className?: string;\n\n  /** Theme provided by the Higher Order Component */\n  theme?: ITheme;\n}\n\n/**\n * {@docCategory GroupedList}\n */\nexport type IGroupedListStyleProps = Required<Pick<IGroupedListProps, 'theme'>> &\n  Pick<IGroupedListProps, 'className'> & {\n    /** whether or not the group is collapsed */\n    isCollapsed?: boolean;\n\n    /** Whether the group is in compact mode or not */\n    compact?: boolean;\n  };\n\n/**\n * {@docCategory GroupedList}\n */\nexport interface IGroupedListStyles {\n  root: IStyle;\n  group: IStyle;\n  groupIsDropping: IStyle;\n}\n", "import * as React from 'react';\nimport { initializeComponentRef, EventGroup, css, getRTL, getId, KeyCodes, classNamesFunction } from '../../Utilities';\nimport { ColumnDragEndLocation, CheckboxVisibility } from './DetailsList.types';\nimport { FocusZone, FocusZoneDirection } from '../../FocusZone';\nimport { Icon, FontIcon } from '../../Icon';\nimport { Layer } from '../../Layer';\nimport { GroupSpacer } from '../GroupedList/GroupSpacer';\nimport { CollapseAllVisibility } from '../../GroupedList';\nimport { DetailsRowCheck } from './DetailsRowCheck';\nimport { SelectionMode, SELECTION_CHANGE } from '../../Selection';\nimport { DragDropHelper } from '../../DragDrop';\nimport { DetailsColumn } from '../../components/DetailsList/DetailsColumn';\nimport { SelectAllVisibility } from './DetailsHeader.types';\nimport type { IProcessedStyleSet } from '../../Styling';\nimport type { IDisposable } from '../../Utilities';\nimport type { IColumn, IDetailsHeaderBaseProps, IColumnDragDropDetails } from './DetailsList.types';\nimport type { IFocusZone } from '../../FocusZone';\nimport type { ITooltipHostProps } from '../../Tooltip';\nimport type { ISelection } from '../../Selection';\nimport type { IDragDropOptions } from '../../DragDrop';\nimport type { IDetailsColumnProps } from '../../components/DetailsList/DetailsColumn';\nimport type {\n  IDropHintDetails,\n  IColumnReorderHeaderProps,\n  IDetailsHeaderState,\n  IDetailsHeaderStyleProps,\n  IDetailsHeaderStyles,\n  IDetailsHeader,\n} from './DetailsHeader.types';\n\nconst getClassNames = classNamesFunction<IDetailsHeaderStyleProps, IDetailsHeaderStyles>();\n\nconst MOUSEDOWN_PRIMARY_BUTTON = 0; // for mouse down event we are using ev.button property, 0 means left button\nconst MOUSEMOVE_PRIMARY_BUTTON = 1; // for mouse move event we are using ev.buttons property, 1 means left button\n\nconst NO_COLUMNS: IColumn[] = [];\n\nexport class DetailsHeaderBase\n  extends React.Component<IDetailsHeaderBaseProps, IDetailsHeaderState>\n  implements IDetailsHeader\n{\n  public static defaultProps = {\n    selectAllVisibility: SelectAllVisibility.visible,\n    collapseAllVisibility: CollapseAllVisibility.visible,\n    useFastIcons: true,\n  };\n\n  private _classNames: IProcessedStyleSet<IDetailsHeaderStyles>;\n  private _rootElement = React.createRef<HTMLElement>();\n  private _events: EventGroup;\n  private _rootComponent = React.createRef<IFocusZone>();\n  private _id: string;\n  private _draggedColumnIndex = -1;\n  private _dropHintDetails: { [key: number]: IDropHintDetails } = {};\n  private _dragDropHelper: DragDropHelper;\n  private _currentDropHintIndex: number;\n  private _subscriptionObject?: IDisposable;\n  private _onDropIndexInfo: {\n    sourceIndex: number;\n    targetIndex: number;\n  };\n\n  constructor(props: IDetailsHeaderBaseProps) {\n    super(props);\n\n    initializeComponentRef(this);\n    this._events = new EventGroup(this);\n\n    this.state = {\n      columnResizeDetails: undefined,\n      isAllCollapsed: this.props.isAllCollapsed,\n      isAllSelected: !!this.props.selection && this.props.selection.isAllSelected(),\n    };\n\n    this._onDropIndexInfo = {\n      sourceIndex: -1,\n      targetIndex: -1,\n    };\n    this._id = getId('header');\n    this._currentDropHintIndex = -1;\n\n    // The drag drop handler won't do any work until subscribe() is called,\n    // so always set it up for convenience\n    this._dragDropHelper = new DragDropHelper({\n      selection: {\n        getSelection: () => {\n          return;\n        },\n      } as ISelection,\n      minimumPixelsForDrag: this.props.minimumPixelsForDrag,\n    });\n  }\n\n  public componentDidMount(): void {\n    const { selection } = this.props;\n\n    this._events.on(selection, SELECTION_CHANGE, this._onSelectionChanged);\n\n    // this._rootElement.current will be null in tests using react-test-renderer\n    if (this._rootElement.current) {\n      // We need to use native on this to prevent MarqueeSelection from handling the event before us.\n      this._events.on(this._rootElement.current, 'mousedown', this._onRootMouseDown);\n\n      this._events.on(this._rootElement.current, 'keydown', this._onRootKeyDown);\n\n      if (this._getColumnReorderProps()) {\n        this._subscriptionObject = this._dragDropHelper.subscribe(\n          this._rootElement.current,\n          this._events,\n          this._getHeaderDragDropOptions(),\n        );\n      }\n    }\n  }\n\n  public componentDidUpdate(prevProps: IDetailsHeaderBaseProps): void {\n    if (this._getColumnReorderProps()) {\n      if (!this._subscriptionObject && this._rootElement.current) {\n        this._subscriptionObject = this._dragDropHelper.subscribe(\n          this._rootElement.current,\n          this._events,\n          this._getHeaderDragDropOptions(),\n        );\n      }\n    } else if (this._subscriptionObject) {\n      this._subscriptionObject.dispose();\n      delete this._subscriptionObject;\n    }\n\n    if (this.props !== prevProps && this._onDropIndexInfo.sourceIndex >= 0 && this._onDropIndexInfo.targetIndex >= 0) {\n      const { columns: previousColumns = NO_COLUMNS } = prevProps;\n      const { columns = NO_COLUMNS } = this.props;\n      if (previousColumns[this._onDropIndexInfo.sourceIndex].key === columns[this._onDropIndexInfo.targetIndex].key) {\n        this._onDropIndexInfo = {\n          sourceIndex: -1,\n          targetIndex: -1,\n        };\n      }\n    }\n\n    if (this.props.isAllCollapsed !== prevProps.isAllCollapsed) {\n      this.setState({ isAllCollapsed: this.props.isAllCollapsed });\n    }\n  }\n\n  public componentWillUnmount(): void {\n    if (this._subscriptionObject) {\n      this._subscriptionObject.dispose();\n      delete this._subscriptionObject;\n    }\n\n    this._dragDropHelper.dispose();\n\n    this._events.dispose();\n  }\n\n  public render(): JSX.Element {\n    const {\n      columns = NO_COLUMNS,\n      ariaLabel,\n      ariaLabelForToggleAllGroupsButton,\n      ariaLabelForSelectAllCheckbox,\n      selectAllVisibility,\n      ariaLabelForSelectionColumn,\n      indentWidth,\n      onColumnClick,\n      onColumnContextMenu,\n      onRenderColumnHeaderTooltip = this._onRenderColumnHeaderTooltip,\n      styles,\n      selectionMode,\n      theme,\n      onRenderDetailsCheckbox,\n      groupNestingDepth,\n      useFastIcons,\n      checkboxVisibility,\n      className,\n    } = this.props;\n    const { isAllSelected, columnResizeDetails, isSizing, isAllCollapsed } = this.state;\n    const showCheckbox = selectAllVisibility !== SelectAllVisibility.none;\n    const isCheckboxHidden = selectAllVisibility === SelectAllVisibility.hidden;\n    const isCheckboxAlwaysVisible = checkboxVisibility === CheckboxVisibility.always;\n\n    const columnReorderProps = this._getColumnReorderProps();\n    const frozenColumnCountFromStart =\n      columnReorderProps && columnReorderProps.frozenColumnCountFromStart\n        ? columnReorderProps.frozenColumnCountFromStart\n        : 0;\n    const frozenColumnCountFromEnd =\n      columnReorderProps && columnReorderProps.frozenColumnCountFromEnd\n        ? columnReorderProps.frozenColumnCountFromEnd\n        : 0;\n\n    this._classNames = getClassNames(styles, {\n      theme: theme!,\n      isAllSelected,\n      isSelectAllHidden: selectAllVisibility === SelectAllVisibility.hidden,\n      isResizingColumn: !!columnResizeDetails && isSizing,\n      isSizing,\n      isAllCollapsed,\n      isCheckboxHidden,\n      className,\n    });\n\n    const classNames = this._classNames;\n    const IconComponent = useFastIcons ? FontIcon : Icon;\n    const hasGroupExpander = groupNestingDepth! > 0;\n    const showGroupExpander = hasGroupExpander && this.props.collapseAllVisibility === CollapseAllVisibility.visible;\n    const columnIndexOffset = this._computeColumnIndexOffset(showCheckbox);\n\n    const isRTL = getRTL(theme);\n    return (\n      <FocusZone\n        role=\"row\"\n        aria-label={ariaLabel}\n        className={classNames.root}\n        componentRef={this._rootComponent}\n        elementRef={this._rootElement}\n        onMouseMove={this._onRootMouseMove}\n        data-automationid=\"DetailsHeader\"\n        direction={FocusZoneDirection.horizontal}\n      >\n        {showCheckbox\n          ? [\n              <div\n                key=\"__checkbox\"\n                className={classNames.cellIsCheck}\n                aria-labelledby={`${this._id}-checkTooltip`}\n                onClick={!isCheckboxHidden ? this._onSelectAllClicked : undefined}\n                role={'columnheader'}\n              >\n                {onRenderColumnHeaderTooltip(\n                  {\n                    hostClassName: classNames.checkTooltip,\n                    id: `${this._id}-checkTooltip`,\n                    setAriaDescribedBy: false,\n                    content: ariaLabelForSelectAllCheckbox,\n                    children: (\n                      <DetailsRowCheck\n                        id={`${this._id}-check`}\n                        aria-label={\n                          selectionMode === SelectionMode.multiple\n                            ? ariaLabelForSelectAllCheckbox\n                            : ariaLabelForSelectionColumn\n                        }\n                        data-is-focusable={!isCheckboxHidden || undefined}\n                        isHeader={true}\n                        selected={isAllSelected}\n                        anySelected={false}\n                        canSelect={!isCheckboxHidden}\n                        className={classNames.check}\n                        onRenderDetailsCheckbox={onRenderDetailsCheckbox}\n                        useFastIcons={useFastIcons}\n                        isVisible={isCheckboxAlwaysVisible}\n                      />\n                    ),\n                  },\n                  this._onRenderColumnHeaderTooltip,\n                )}\n              </div>,\n              !this.props.onRenderColumnHeaderTooltip ? (\n                ariaLabelForSelectAllCheckbox && !isCheckboxHidden ? (\n                  <label\n                    key=\"__checkboxLabel\"\n                    id={`${this._id}-checkTooltip`}\n                    className={classNames.accessibleLabel}\n                    aria-hidden={true}\n                  >\n                    {ariaLabelForSelectAllCheckbox}\n                  </label>\n                ) : ariaLabelForSelectionColumn && isCheckboxHidden ? (\n                  <label\n                    key=\"__checkboxLabel\"\n                    id={`${this._id}-checkTooltip`}\n                    className={classNames.accessibleLabel}\n                    aria-hidden={true}\n                  >\n                    {ariaLabelForSelectionColumn}\n                  </label>\n                ) : null\n              ) : null,\n            ]\n          : null}\n        {showGroupExpander ? (\n          <div\n            className={classNames.cellIsGroupExpander}\n            onClick={this._onToggleCollapseAll}\n            data-is-focusable={true}\n            aria-label={ariaLabelForToggleAllGroupsButton}\n            aria-expanded={!isAllCollapsed}\n            role=\"columnheader\"\n          >\n            <IconComponent\n              className={classNames.collapseButton}\n              iconName={isRTL ? 'ChevronLeftMed' : 'ChevronRightMed'}\n            />\n            {/* Use this span in addition to aria-label, otherwise VoiceOver ignores the column */}\n            <span className={classNames.accessibleLabel}>{ariaLabelForToggleAllGroupsButton}</span>\n          </div>\n        ) : hasGroupExpander ? (\n          <div className={classNames.cellIsGroupExpander} data-is-focusable={false} role=\"columnheader\">\n            {/* Empty placeholder cell when CollapseAllVisibility is hidden */}\n          </div>\n        ) : null}\n        <GroupSpacer indentWidth={indentWidth} role=\"gridcell\" count={groupNestingDepth! - 1} />\n        {columns.map((column: IColumn, columnIndex: number) => {\n          const _isDraggable = columnReorderProps\n            ? columnIndex >= frozenColumnCountFromStart && columnIndex < columns.length - frozenColumnCountFromEnd\n            : false;\n          return [\n            columnReorderProps &&\n              (_isDraggable || columnIndex === columns.length - frozenColumnCountFromEnd) &&\n              this._renderDropHint(columnIndex),\n            <DetailsColumn\n              column={column}\n              styles={column.styles}\n              key={column.key}\n              columnIndex={columnIndexOffset + columnIndex}\n              parentId={this._id}\n              isDraggable={_isDraggable}\n              updateDragInfo={this._updateDragInfo}\n              dragDropHelper={this._dragDropHelper}\n              onColumnClick={onColumnClick}\n              onColumnContextMenu={onColumnContextMenu}\n              // Do not render tooltips by default, but allow for override via props.\n              onRenderColumnHeaderTooltip={this.props.onRenderColumnHeaderTooltip}\n              isDropped={this._onDropIndexInfo.targetIndex === columnIndex}\n              cellStyleProps={this.props.cellStyleProps}\n              useFastIcons={useFastIcons}\n            />,\n            this._renderColumnDivider(columnIndex),\n          ];\n        })}\n        {columnReorderProps && frozenColumnCountFromEnd === 0 && this._renderDropHint(columns.length)}\n        {isSizing && (\n          <Layer>\n            <div\n              className={classNames.sizingOverlay}\n              onMouseMove={this._onSizerMouseMove}\n              onMouseUp={this._onSizerMouseUp}\n            />\n          </Layer>\n        )}\n      </FocusZone>\n    );\n  }\n\n  /** Set focus to the active thing in the focus area. */\n  public focus(): boolean {\n    return !!this._rootComponent.current?.focus();\n  }\n\n  /**\n   * Gets column reorder props from this.props. If the calling code is part of setting up or\n   * handling drag/drop events, it's safe to assume that this method's return value is defined\n   * (because drag/drop handling will only be set up if reorder props are given).\n   */\n  private _getColumnReorderProps(): IColumnReorderHeaderProps | undefined {\n    const { columnReorderOptions, columnReorderProps } = this.props;\n    return columnReorderProps || (columnReorderOptions && { ...columnReorderOptions, onColumnDragEnd: undefined });\n  }\n\n  private _getHeaderDragDropOptions(): IDragDropOptions {\n    const options = {\n      selectionIndex: 1,\n      context: { data: this, index: 0 },\n      canDrag: () => false,\n      canDrop: () => true,\n      onDragStart: () => undefined,\n      updateDropState: this._updateDroppingState,\n      onDrop: this._onDrop,\n      onDragEnd: () => undefined,\n      onDragOver: this._onDragOver,\n    };\n    return options;\n  }\n\n  private _updateDroppingState = (newValue: boolean, event: DragEvent): void => {\n    if (this._draggedColumnIndex >= 0 && event.type !== 'drop' && !newValue) {\n      this._resetDropHints();\n    }\n  };\n\n  private _isValidCurrentDropHintIndex() {\n    return this._currentDropHintIndex >= 0;\n  }\n\n  private _onDragOver = (item: any, event: DragEvent): void => {\n    if (this._draggedColumnIndex >= 0) {\n      event.stopPropagation();\n      this._computeDropHintToBeShown(event.clientX);\n    }\n  };\n\n  private _onDrop = (item?: any, event?: DragEvent): void => {\n    // Safe to assume this is defined since we're handling a drop event\n    const columnReorderProps = this._getColumnReorderProps()!;\n\n    // Target index will not get changed if draggeditem is after target item.\n    if (this._draggedColumnIndex >= 0 && event) {\n      const targetIndex =\n        this._draggedColumnIndex > this._currentDropHintIndex\n          ? this._currentDropHintIndex\n          : this._currentDropHintIndex - 1;\n      const isValidDrop = this._isValidCurrentDropHintIndex();\n      event.stopPropagation();\n      if (isValidDrop) {\n        this._onDropIndexInfo.sourceIndex = this._draggedColumnIndex;\n        this._onDropIndexInfo.targetIndex = targetIndex;\n\n        if (columnReorderProps.onColumnDrop) {\n          const dragDropDetails: IColumnDragDropDetails = {\n            draggedIndex: this._draggedColumnIndex,\n            targetIndex,\n          };\n          columnReorderProps.onColumnDrop(dragDropDetails);\n          /* eslint-disable deprecation/deprecation */\n        } else if (columnReorderProps.handleColumnReorder) {\n          columnReorderProps.handleColumnReorder(this._draggedColumnIndex, targetIndex);\n          /* eslint-enable deprecation/deprecation */\n        }\n      }\n    }\n\n    this._resetDropHints();\n    this._dropHintDetails = {};\n    this._draggedColumnIndex = -1;\n  };\n\n  private _computeColumnIndexOffset = (showCheckbox: boolean) => {\n    const hasGroupExpander = this.props.groupNestingDepth && this.props.groupNestingDepth > 0;\n\n    let offset = 1;\n    if (showCheckbox) {\n      offset += 1;\n    }\n\n    if (hasGroupExpander) {\n      offset += 1;\n    }\n\n    return offset;\n  };\n\n  /**\n   * @returns whether or not the \"Select All\" checkbox column is hidden.\n   */\n  private _isCheckboxColumnHidden(): boolean {\n    const { selectionMode, checkboxVisibility } = this.props;\n\n    return selectionMode === SelectionMode.none || checkboxVisibility === CheckboxVisibility.hidden;\n  }\n\n  private _updateDragInfo = (props: { itemIndex: number }, event?: MouseEvent) => {\n    // Safe to assume this is defined since we're handling a drag event\n    const columnReorderProps = this._getColumnReorderProps()!;\n    const itemIndex = props.itemIndex;\n    if (itemIndex >= 0) {\n      // Column index is set based on the checkbox\n      this._draggedColumnIndex = itemIndex - this._computeColumnIndexOffset(!this._isCheckboxColumnHidden());\n      this._getDropHintPositions();\n      if (columnReorderProps.onColumnDragStart) {\n        columnReorderProps.onColumnDragStart(true);\n      }\n    } else if (event && this._draggedColumnIndex >= 0) {\n      this._resetDropHints();\n      this._draggedColumnIndex = -1;\n      this._dropHintDetails = {};\n      if (columnReorderProps.onColumnDragEnd) {\n        const columnDragEndLocation = this._isEventOnHeader(event);\n        columnReorderProps.onColumnDragEnd({ dropLocation: columnDragEndLocation }, event);\n      }\n    }\n  };\n\n  private _resetDropHints(): void {\n    if (this._currentDropHintIndex >= 0) {\n      this._updateDropHintElement(this._dropHintDetails[this._currentDropHintIndex].dropHintElementRef, 'none');\n      this._currentDropHintIndex = -1;\n    }\n  }\n\n  private _updateDropHintElement(element: HTMLElement, displayProperty: string) {\n    (element.childNodes[1] as HTMLElement).style.display = displayProperty;\n    (element.childNodes[0] as HTMLElement).style.display = displayProperty;\n  }\n\n  private _getDropHintPositions = (): void => {\n    const { columns = NO_COLUMNS } = this.props;\n    // Safe to assume this is defined since we're handling a drag/drop event\n    const columnReorderProps = this._getColumnReorderProps()!;\n    let prevX = 0;\n    let prevMid = 0;\n    let prevRef: HTMLElement;\n    const frozenColumnCountFromStart = columnReorderProps.frozenColumnCountFromStart || 0;\n    const frozenColumnCountFromEnd = columnReorderProps.frozenColumnCountFromEnd || 0;\n\n    for (let i = frozenColumnCountFromStart; i < columns.length - frozenColumnCountFromEnd + 1; i++) {\n      if (this._rootElement.current) {\n        const dropHintElement = this._rootElement.current.querySelectorAll('#columnDropHint_' + i)[0] as HTMLElement;\n        if (dropHintElement) {\n          if (i === frozenColumnCountFromStart) {\n            prevX = dropHintElement.offsetLeft;\n            prevMid = dropHintElement.offsetLeft;\n            prevRef = dropHintElement;\n          } else {\n            const newMid = (dropHintElement.offsetLeft + prevX!) / 2;\n            this._dropHintDetails[i - 1] = {\n              originX: prevX,\n              startX: prevMid!,\n              endX: newMid,\n              dropHintElementRef: prevRef!,\n            };\n            prevMid = newMid;\n            prevRef = dropHintElement;\n            prevX = dropHintElement.offsetLeft;\n            if (i === columns.length - frozenColumnCountFromEnd) {\n              this._dropHintDetails[i] = {\n                originX: prevX,\n                startX: prevMid!,\n                endX: dropHintElement.offsetLeft,\n                dropHintElementRef: prevRef,\n              };\n            }\n          }\n        }\n      }\n    }\n  };\n\n  /**\n   * Based on the given cursor position, finds the nearest drop hint and updates the state to make it visible\n   */\n  private _computeDropHintToBeShown = (clientX: number): void => {\n    const isRtl = getRTL(this.props.theme);\n    if (this._rootElement.current) {\n      const clientRect = this._rootElement.current.getBoundingClientRect();\n      const headerOriginX = clientRect.left;\n      const eventXRelativePosition = clientX - headerOriginX;\n      const currentDropHintIndex = this._currentDropHintIndex;\n      if (this._isValidCurrentDropHintIndex()) {\n        if (\n          _liesBetween(\n            isRtl,\n            eventXRelativePosition,\n            this._dropHintDetails[currentDropHintIndex!].startX,\n            this._dropHintDetails[currentDropHintIndex!].endX,\n          )\n        ) {\n          return;\n        }\n      }\n      const { columns = NO_COLUMNS } = this.props;\n      // Safe to assume this is defined since we're handling a drag/drop event\n      const columnReorderProps = this._getColumnReorderProps()!;\n      const frozenColumnCountFromStart = columnReorderProps.frozenColumnCountFromStart || 0;\n      const frozenColumnCountFromEnd = columnReorderProps.frozenColumnCountFromEnd || 0;\n\n      const currentIndex: number = frozenColumnCountFromStart;\n      const lastValidColumn = columns.length - frozenColumnCountFromEnd;\n      let indexToUpdate = -1;\n      if (_isBefore(isRtl, eventXRelativePosition, this._dropHintDetails[currentIndex].endX)) {\n        indexToUpdate = currentIndex;\n      } else if (_isAfter(isRtl, eventXRelativePosition, this._dropHintDetails[lastValidColumn].startX)) {\n        indexToUpdate = lastValidColumn;\n      } else if (this._isValidCurrentDropHintIndex()) {\n        if (\n          this._dropHintDetails[currentDropHintIndex! + 1] &&\n          _liesBetween(\n            isRtl,\n            eventXRelativePosition,\n            this._dropHintDetails[currentDropHintIndex! + 1].startX,\n            this._dropHintDetails[currentDropHintIndex! + 1].endX,\n          )\n        ) {\n          indexToUpdate = currentDropHintIndex! + 1;\n        } else if (\n          this._dropHintDetails[currentDropHintIndex! - 1] &&\n          _liesBetween(\n            isRtl,\n            eventXRelativePosition,\n            this._dropHintDetails[currentDropHintIndex! - 1].startX,\n            this._dropHintDetails[currentDropHintIndex! - 1].endX,\n          )\n        ) {\n          indexToUpdate = currentDropHintIndex! - 1;\n        }\n      }\n      if (indexToUpdate === -1) {\n        let startIndex = frozenColumnCountFromStart;\n        let endIndex = lastValidColumn;\n        while (startIndex < endIndex) {\n          const middleIndex = Math.ceil((endIndex + startIndex!) / 2);\n          if (\n            _liesBetween(\n              isRtl,\n              eventXRelativePosition,\n              this._dropHintDetails[middleIndex].startX,\n              this._dropHintDetails[middleIndex].endX,\n            )\n          ) {\n            indexToUpdate = middleIndex;\n            break;\n          } else if (_isBefore(isRtl, eventXRelativePosition, this._dropHintDetails[middleIndex].originX)) {\n            endIndex = middleIndex;\n          } else if (_isAfter(isRtl, eventXRelativePosition, this._dropHintDetails[middleIndex].originX)) {\n            startIndex = middleIndex;\n          }\n        }\n      }\n\n      if (indexToUpdate === this._draggedColumnIndex || indexToUpdate === this._draggedColumnIndex + 1) {\n        if (this._isValidCurrentDropHintIndex()) {\n          this._resetDropHints();\n        }\n      } else if (currentDropHintIndex !== indexToUpdate && indexToUpdate >= 0) {\n        this._resetDropHints();\n        this._updateDropHintElement(this._dropHintDetails[indexToUpdate].dropHintElementRef, 'inline-block');\n        this._currentDropHintIndex = indexToUpdate;\n      }\n    }\n  };\n\n  private _isEventOnHeader(event: MouseEvent): ColumnDragEndLocation | undefined {\n    if (this._rootElement.current) {\n      const clientRect = this._rootElement.current.getBoundingClientRect();\n      if (\n        event.clientX > clientRect.left &&\n        event.clientX < clientRect.right &&\n        event.clientY > clientRect.top &&\n        event.clientY < clientRect.bottom\n      ) {\n        return ColumnDragEndLocation.header;\n      }\n    }\n  }\n\n  private _renderColumnSizer = ({ columnIndex }: IDetailsColumnProps): JSX.Element | null => {\n    const { columns = NO_COLUMNS } = this.props;\n    const column = columns[columnIndex];\n    const { columnResizeDetails } = this.state;\n    const classNames = this._classNames;\n\n    return column.isResizable ? (\n      <div\n        key={`${column.key}_sizer`}\n        aria-hidden={true}\n        role=\"button\"\n        data-is-focusable={false}\n        onClick={_stopPropagation}\n        data-sizer-index={columnIndex}\n        onBlur={this._onSizerBlur}\n        className={css(\n          classNames.cellSizer,\n          columnIndex < columns.length - 1 ? classNames.cellSizerStart : classNames.cellSizerEnd,\n          {\n            [classNames.cellIsResizing]: columnResizeDetails && columnResizeDetails.columnIndex === columnIndex,\n          },\n        )}\n        onDoubleClick={this._onSizerDoubleClick.bind(this, columnIndex)}\n      />\n    ) : null;\n  };\n\n  private _renderColumnDivider(columnIndex: number): JSX.Element | null {\n    const { columns = NO_COLUMNS } = this.props;\n    const column = columns[columnIndex];\n    const { onRenderDivider } = column;\n    return onRenderDivider\n      ? onRenderDivider({ column, columnIndex }, this._renderColumnSizer)\n      : this._renderColumnSizer({ column, columnIndex });\n  }\n\n  private _renderDropHint(dropHintIndex: number): JSX.Element {\n    const classNames = this._classNames;\n    const IconComponent = this.props.useFastIcons ? FontIcon : Icon;\n    return (\n      <div key={'dropHintKey'} className={classNames.dropHintStyle} id={`columnDropHint_${dropHintIndex}`}>\n        <div\n          role=\"presentation\"\n          key={`dropHintCircleKey`}\n          className={classNames.dropHintCaretStyle}\n          data-is-focusable={false}\n          data-sizer-index={dropHintIndex}\n          aria-hidden={true}\n        >\n          <IconComponent iconName={'CircleShapeSolid'} />\n        </div>\n        <div\n          key={`dropHintLineKey`}\n          aria-hidden={true}\n          data-is-focusable={false}\n          data-sizer-index={dropHintIndex}\n          className={classNames.dropHintLineStyle}\n        />\n      </div>\n    );\n  }\n\n  private _onRenderColumnHeaderTooltip = (tooltipHostProps: ITooltipHostProps): JSX.Element => {\n    return <span className={tooltipHostProps.hostClassName}>{tooltipHostProps.children}</span>;\n  };\n\n  /**\n   * double click on the column sizer will auto ajust column width\n   * to fit the longest content among current rendered rows.\n   *\n   * @param columnIndex - index of the column user double clicked\n   * @param ev - mouse double click event\n   */\n  private _onSizerDoubleClick(columnIndex: number, ev: React.MouseEvent<HTMLElement>): void {\n    const { onColumnAutoResized, columns = NO_COLUMNS } = this.props;\n    if (onColumnAutoResized) {\n      onColumnAutoResized(columns[columnIndex], columnIndex);\n    }\n  }\n\n  /**\n   * Called when the select all toggle is clicked.\n   */\n  private _onSelectAllClicked = (): void => {\n    const { selection } = this.props;\n\n    if (selection) {\n      selection.toggleAllSelected();\n    }\n  };\n\n  private _onRootMouseDown = (ev: MouseEvent): void => {\n    const columnIndexAttr = (ev.target as HTMLElement).getAttribute('data-sizer-index');\n    const columnIndex = Number(columnIndexAttr);\n    const { columns = NO_COLUMNS } = this.props;\n\n    if (columnIndexAttr === null || ev.button !== MOUSEDOWN_PRIMARY_BUTTON) {\n      // Ignore anything except the primary button.\n      return;\n    }\n\n    this.setState({\n      columnResizeDetails: {\n        columnIndex,\n        columnMinWidth: columns[columnIndex].calculatedWidth!,\n        originX: ev.clientX,\n      },\n    });\n\n    ev.preventDefault();\n    ev.stopPropagation();\n  };\n\n  private _onRootMouseMove = (ev: React.MouseEvent<HTMLElement>): void => {\n    const { columnResizeDetails, isSizing } = this.state;\n\n    if (columnResizeDetails && !isSizing && ev.clientX !== columnResizeDetails.originX) {\n      this.setState({ isSizing: true });\n    }\n  };\n\n  private _onRootKeyDown = (ev: KeyboardEvent): void => {\n    const { columnResizeDetails, isSizing } = this.state;\n    const { columns = NO_COLUMNS, onColumnResized } = this.props;\n\n    const columnIndexAttr = (ev.target as HTMLElement).getAttribute('data-sizer-index');\n\n    if (!columnIndexAttr || isSizing) {\n      return;\n    }\n\n    const columnIndex = Number(columnIndexAttr);\n\n    if (!columnResizeDetails) {\n      // eslint-disable-next-line deprecation/deprecation\n      if (ev.which === KeyCodes.enter) {\n        this.setState({\n          columnResizeDetails: {\n            columnIndex,\n            columnMinWidth: columns[columnIndex].calculatedWidth!,\n          },\n        });\n\n        ev.preventDefault();\n        ev.stopPropagation();\n      }\n    } else {\n      let increment: number | undefined;\n\n      // eslint-disable-next-line deprecation/deprecation\n      if (ev.which === KeyCodes.enter) {\n        this.setState({\n          columnResizeDetails: undefined,\n        });\n\n        ev.preventDefault();\n        ev.stopPropagation();\n        // eslint-disable-next-line deprecation/deprecation\n      } else if (ev.which === KeyCodes.left) {\n        increment = getRTL(this.props.theme) ? 1 : -1;\n        // eslint-disable-next-line deprecation/deprecation\n      } else if (ev.which === KeyCodes.right) {\n        increment = getRTL(this.props.theme) ? -1 : 1;\n      }\n\n      if (increment) {\n        if (!ev.shiftKey) {\n          increment *= 10;\n        }\n\n        this.setState({\n          columnResizeDetails: {\n            ...columnResizeDetails,\n            columnMinWidth: columnResizeDetails.columnMinWidth + increment,\n          },\n        });\n\n        if (onColumnResized) {\n          onColumnResized(columns[columnIndex], columnResizeDetails.columnMinWidth + increment, columnIndex);\n        }\n\n        ev.preventDefault();\n        ev.stopPropagation();\n      }\n    }\n  };\n\n  /**\n   * mouse move event handler in the header\n   * it will set isSizing state to true when user clicked on the sizer and move the mouse.\n   *\n   * @param ev - mouse move event\n   */\n  private _onSizerMouseMove = (ev: React.MouseEvent<HTMLElement>): void => {\n    const {\n      // use buttons property here since ev.button in some edge case is not upding well during the move.\n      // but firefox doesn't support it, so we set the default value when it is not defined.\n      buttons,\n    } = ev;\n    const { onColumnIsSizingChanged, onColumnResized, columns = NO_COLUMNS } = this.props;\n    const { columnResizeDetails } = this.state;\n\n    if (buttons !== undefined && buttons !== MOUSEMOVE_PRIMARY_BUTTON) {\n      // cancel mouse down event and return early when the primary button is not pressed\n      this._onSizerMouseUp(ev);\n      return;\n    }\n\n    if (ev.clientX !== columnResizeDetails!.originX) {\n      if (onColumnIsSizingChanged) {\n        onColumnIsSizingChanged(columns[columnResizeDetails!.columnIndex], true);\n      }\n    }\n\n    if (onColumnResized) {\n      let movement = ev.clientX - columnResizeDetails!.originX!;\n\n      if (getRTL(this.props.theme)) {\n        movement = -movement;\n      }\n\n      onColumnResized(\n        columns[columnResizeDetails!.columnIndex],\n        columnResizeDetails!.columnMinWidth + movement,\n        columnResizeDetails!.columnIndex,\n      );\n    }\n  };\n\n  private _onSizerBlur = (ev: React.FocusEvent<HTMLElement>): void => {\n    const { columnResizeDetails } = this.state;\n\n    if (columnResizeDetails) {\n      this.setState({\n        columnResizeDetails: undefined,\n        isSizing: false,\n      });\n    }\n  };\n\n  /**\n   * mouse up event handler in the header\n   * clear the resize related state.\n   * This is to ensure we can catch double click event\n   *\n   * @param ev - mouse up event\n   */\n  private _onSizerMouseUp = (ev: React.MouseEvent<HTMLElement>): void => {\n    const { columns = NO_COLUMNS, onColumnIsSizingChanged } = this.props;\n    const { columnResizeDetails } = this.state;\n\n    this.setState({\n      columnResizeDetails: undefined,\n      isSizing: false,\n    });\n\n    if (onColumnIsSizingChanged) {\n      onColumnIsSizingChanged(columns[columnResizeDetails!.columnIndex], false);\n    }\n  };\n\n  private _onSelectionChanged(): void {\n    const isAllSelected = !!this.props.selection && this.props.selection.isAllSelected();\n\n    if (this.state.isAllSelected !== isAllSelected) {\n      this.setState({\n        isAllSelected,\n      });\n    }\n  }\n\n  private _onToggleCollapseAll = (): void => {\n    const { onToggleCollapseAll } = this.props;\n    const newCollapsed = !this.state.isAllCollapsed;\n    this.setState({\n      isAllCollapsed: newCollapsed,\n    });\n    if (onToggleCollapseAll) {\n      onToggleCollapseAll(newCollapsed);\n    }\n  };\n}\n\nfunction _liesBetween(rtl: boolean, target: number, left: number, right: number): boolean {\n  return rtl ? target <= left && target >= right : target >= left && target <= right;\n}\nfunction _isBefore(rtl: boolean, a: number, b: number): boolean {\n  return rtl ? a >= b : a <= b;\n}\nfunction _isAfter(rtl: boolean, a: number, b: number): boolean {\n  return rtl ? a <= b : a >= b;\n}\n\nfunction _stopPropagation(ev: React.MouseEvent<HTMLElement>): void {\n  ev.stopPropagation();\n}\n", "import * as React from 'react';\nimport { DetailsListBase } from './DetailsList.base';\nimport { SelectionMode } from '../../Selection';\nimport { ScrollToMode } from '../../List';\nimport type { ISelection, ISelectionZoneProps } from '../../Selection';\nimport type { IRefObject, IBaseProps, IRenderFunction, IStyleFunctionOrObject, IComponentAs } from '../../Utilities';\nimport type { IDragDropEvents, IDragDropContext, IDragDropHelper, IDragDropOptions } from '../../DragDrop';\nimport type { IGroup, IGroupRenderProps, IGroupDividerProps, IGroupedListProps } from '../GroupedList/index';\nimport type { IDetailsRowProps, IDetailsRowBaseProps } from '../DetailsList/DetailsRow';\nimport type { IDetailsHeaderProps, IDetailsHeaderBaseProps } from './DetailsHeader';\nimport type { IDetailsFooterProps, IDetailsFooterBaseProps } from './DetailsFooter.types';\nimport type { IWithViewportProps, IViewport } from '../../utilities/decorators/withViewport';\nimport type { IList, IListProps } from '../../List';\nimport type { ITheme, IStyle } from '../../Styling';\nimport type { ICellStyleProps, IDetailsItemProps } from './DetailsRow.types';\nimport type { IDetailsCheckboxProps } from './DetailsRowCheck.types';\nimport type {\n  IDetailsColumnStyleProps,\n  IDetailsColumnProps,\n  IDetailsColumnStyles,\n  IDetailsColumnFilterIconProps,\n  IDetailsColumnFieldProps,\n} from './DetailsColumn.types';\nimport { IFocusZoneProps } from '../../FocusZone';\n\n/**\n * {@docCategory DetailsList}\n */\nexport interface IDetailsList extends IList {\n  /**\n   * Ensures that the list content is updated. Call this in cases where the list prop updates don't change, but the list\n   * still needs to be re-evaluated. For example, if a sizer bar is adjusted and causes the list width to change,\n   * you can call this to force a re-evaluation. Be aware that this can be an expensive operation and should be\n   * done sparingly.\n   */\n  forceUpdate: () => void;\n\n  /**\n   * Scroll to and focus the item at the given index. focusIndex will call scrollToIndex on the specified index.\n   *\n   * @param index - Index of item to scroll to\n   * @param forceIntoFirstElement - If true, focus will be set to the first focusable child element of the item rather\n   *  than the item itself.\n   * @param measureItem - Optional callback to measure the height of an individual item\n   * @param scrollToMode - Optional setting to determine where in the window the item should be scrolled to\n   * when focused.\n   */\n  focusIndex: (\n    index: number,\n    forceIntoFirstElement?: boolean,\n    measureItem?: (itemIndex: number) => number,\n    scrollToMode?: ScrollToMode,\n  ) => void;\n\n  /**\n   * Get the start index of the page that is currently in view\n   */\n  getStartItemIndexInView: () => number;\n\n  /**\n   * Use to programatically resize and/or reorder columns in the DetailsList.\n   * @param column - column to resize/reorder.\n   * @param options - includes width which is desired width in pixels the column should be resized\n   * to and newColumnIndex which is desired index position where the column should be moved to.\n   */\n  updateColumn: (column: IColumn, options: { width?: number; newColumnIndex?: number }) => void;\n}\n\n/**\n * {@docCategory DetailsList}\n */\nexport interface IDetailsListProps extends IBaseProps<IDetailsList>, IWithViewportProps {\n  /** Theme provided by a higher-order component. */\n  theme?: ITheme;\n\n  /** Custom overrides to the themed or default styles. */\n  styles?: IStyleFunctionOrObject<IDetailsListStyleProps, IDetailsListStyles>;\n\n  /**\n   * Callback to access the IDetailsList interface. Use this instead of ref for accessing\n   * the public methods and properties of the component.\n   */\n  componentRef?: IRefObject<IDetailsList>;\n\n  /** A key that uniquely identifies the given items. If provided, the selection will be reset when the key changes. */\n  setKey?: string;\n\n  /** The items to render. */\n  items: any[];\n\n  /** Set this to true to indicate that the items being displayed are placeholder data. */\n  isPlaceholderData?: boolean;\n\n  /** Properties to pass through to the List components being rendered. */\n  listProps?: IListProps;\n\n  /** Default index to set focus to once the items have rendered and the index exists. */\n  initialFocusedIndex?: number;\n\n  /** Class name to add to the root element. */\n  className?: string;\n\n  /** Grouping instructions. */\n  groups?: IGroup[];\n\n  /** Override properties to render groups. */\n  groupProps?: IDetailsGroupRenderProps;\n\n  /** Override for the indent width used for group nesting. */\n  indentWidth?: number;\n\n  /** Selection model to track selection state.  */\n  selection?: ISelection;\n\n  /** Controls how/if the details list manages selection. Options include none, single, multiple */\n  selectionMode?: SelectionMode;\n\n  /**\n   * By default, selection is cleared when clicking on an empty (non-focusable) section of the screen.\n   * Setting this value to true overrides that behavior and maintains selection.\n   * @defaultvalue false\n   **/\n  selectionPreservedOnEmptyClick?: boolean;\n\n  /**\n   * Additional props to pass through to the SelectionZone created by default.\n   */\n  selectionZoneProps?: Partial<ISelectionZoneProps>;\n\n  /** Controls how the columns are adjusted. */\n  layoutMode?: DetailsListLayoutMode;\n\n  /**\n   * Controls the visibility of selection check box.\n   * @defaultvalue CheckboxVisibility.onHover\n   */\n  checkboxVisibility?: CheckboxVisibility;\n\n  /**\n   * Controls the visibility of the header.\n   * @defaultvalue true\n   */\n  isHeaderVisible?: boolean;\n\n  /** Column definitions. If none are provided, default columns will be created based on the items' properties. */\n  columns?: IColumn[];\n\n  /** Controls how the list constrains overflow. */\n  constrainMode?: ConstrainMode;\n\n  /** Event names and corresponding callbacks that will be registered to rendered row elements. */\n  rowElementEventMap?: { eventName: string; callback: (context: IDragDropContext, event?: any) => void }[];\n\n  /** Callback for when the list has been updated. Useful for telemetry tracking externally. */\n  onDidUpdate?: (detailsList?: DetailsListBase) => void;\n\n  /**\n   * Callback for when a given row has been mounted. Useful for identifying when a row has been rendered on the page.\n   */\n  onRowDidMount?: (item?: any, index?: number) => void;\n\n  /**\n   * Callback for when a given row has been unmounted.\n   * Useful for identifying when a row has been removed from the page.\n   */\n  onRowWillUnmount?: (item?: any, index?: number) => void;\n\n  /** Callback for when the user clicks on the column header. */\n  onColumnHeaderClick?: (ev?: React.MouseEvent<HTMLElement>, column?: IColumn) => void;\n\n  /** Callback for when the user asks for a contextual menu (usually via right click) from a column header. */\n  onColumnHeaderContextMenu?: (column?: IColumn, ev?: React.MouseEvent<HTMLElement>) => void;\n\n  /** Callback fired on column resize */\n  onColumnResize?: (column?: IColumn, newWidth?: number, columnIndex?: number) => void;\n\n  /** Callback for when a given row has been invoked (by pressing enter while it is selected.) */\n  onItemInvoked?: (item?: any, index?: number, ev?: Event) => void;\n\n  /**\n   * Callback for when the context menu of an item has been accessed.\n   * If undefined or false is returned, `ev.preventDefault()` will be called.\n   */\n  onItemContextMenu?: (item?: any, index?: number, ev?: Event) => void | boolean;\n\n  /**\n   * Callback to override the default row rendering.\n   */\n  onRenderRow?: IRenderFunction<IDetailsRowProps>;\n\n  /**\n   * If provided, will be the \"default\" item column renderer method.\n   * This affects cells within the rows, not the rows themselves.\n   * If a column definition provides its own `onRender` method, that will be used instead of this.\n   */\n  onRenderItemColumn?: (item?: any, index?: number, column?: IColumn) => React.ReactNode;\n\n  /**\n   * Render function which is composed around rendering every cell.\n   */\n  onRenderField?: IRenderFunction<IDetailsColumnFieldProps>;\n\n  /**\n   * If provided, will be the \"default\" item column cell value return.\n   * A column's `getValueKey` can override `getCellValueKey`.\n   */\n  getCellValueKey?: (item?: any, index?: number, column?: IColumn) => string;\n\n  /** Map of callback functions related to row drag and drop functionality. */\n  dragDropEvents?: IDragDropEvents;\n\n  /** Callback for what to render when the item is missing. */\n  onRenderMissingItem?: (index?: number, rowProps?: IDetailsRowProps) => React.ReactNode;\n\n  /** An override to render the details header. */\n  onRenderDetailsHeader?: IRenderFunction<IDetailsHeaderProps>;\n\n  /** An override to render the details footer. */\n  onRenderDetailsFooter?: IRenderFunction<IDetailsFooterProps>;\n\n  /**  If provided, can be used to render a custom checkbox. */\n  onRenderCheckbox?: IRenderFunction<IDetailsListCheckboxProps>;\n\n  /** Viewport info, provided by the `withViewport` decorator. */\n  viewport?: IViewport;\n\n  /**\n   * Callback for when an item in the list becomes active by clicking anywhere inside the row or navigating to it\n   * with the keyboard.\n   */\n  onActiveItemChanged?: (item?: any, index?: number, ev?: React.FocusEvent<HTMLElement>) => void;\n\n  /** Accessible label for the list header. */\n  ariaLabelForListHeader?: string;\n\n  /** Accessible label for the select all checkbox. */\n  ariaLabelForSelectAllCheckbox?: string;\n\n  /** Accessible label for the name of the selection column. */\n  ariaLabelForSelectionColumn?: string;\n\n  /** Callback to get the aria-label string for a given item. */\n  getRowAriaLabel?: (item: any) => string;\n\n  /** Callback to get the aria-describedby IDs (space-separated strings) of elements that describe the item. */\n  getRowAriaDescribedBy?: (item: any) => string;\n\n  /**\n   * Callback to get the item key, to be used in the selection and on render.\n   * Must be provided if sorting or filtering is enabled.\n   */\n  getKey?: (item: any, index?: number) => string;\n\n  /**\n   * Accessible label describing or summarizing the list.\n   * @deprecated use `ariaLabelForGrid`\n   */\n  ariaLabel?: string;\n\n  /** Accessible label for the row check button, e.g. \"select row\". */\n  checkButtonAriaLabel?: string;\n\n  /** Accessible label for the group header check button, e.g. \"select section\". */\n  checkButtonGroupAriaLabel?: string;\n\n  /** Accessible label for the grid within the list. */\n  ariaLabelForGrid?: string;\n\n  /** An optional margin for proportional columns, to e.g. account for scrollbars when laying out width. */\n  flexMargin?: number;\n\n  /**\n   * Whether the role `application` should be applied to the list.\n   * @defaultvalue false\n   * @deprecated using the application role in this case is an antipattern, and heavily discouraged.\n   */\n  shouldApplyApplicationRole?: boolean;\n\n  /**\n   * The minimum mouse move distance to interpret the action as drag event.\n   * @defaultvalue 5\n   */\n  minimumPixelsForDrag?: number;\n\n  /**\n   * Whether to render in compact mode.\n   * @defaultvalue false\n   */\n  compact?: boolean;\n\n  /**\n   * Whether to enable render page caching. This is an experimental performance optimization that is off by default.\n   * @defaultvalue false\n   */\n  usePageCache?: boolean;\n\n  /**\n   * Callback to determine whether the list should be rendered in full, or virtualized.\n   *\n   * Virtualization will add and remove pages of items as the user scrolls them into the visible range.\n   * This benefits larger list scenarios by reducing the DOM on the screen, but can negatively affect performance\n   * for smaller lists.\n   *\n   * The default implementation will virtualize when this callback is not provided.\n   */\n  onShouldVirtualize?: (props: IListProps) => boolean;\n\n  /** Class name to add to the cell of a checkbox. */\n  checkboxCellClassName?: string;\n\n  /** Whether the selection zone should enter modal state on touch. */\n  enterModalSelectionOnTouch?: boolean;\n\n  /** Options for column reordering using drag and drop. */\n  columnReorderOptions?: IColumnReorderOptions;\n\n  /** Callback to override default group height calculation used by list virtualization. */\n  getGroupHeight?: IGroupedListProps['getGroupHeight'];\n\n  /**\n   * Whether to re-render a row only when props changed. Might cause regression when depending on external updates.\n   * @defaultvalue false\n   */\n  useReducedRowRenderer?: boolean;\n\n  /**\n   * Props impacting the render style of cells. Since these have an impact on calculated column widths, they are\n   * handled separately from normal theme styling, but they are passed to the styling system.\n   */\n  cellStyleProps?: ICellStyleProps;\n\n  /** Whether to disable the built-in SelectionZone, so the host component can provide its own. */\n  disableSelectionZone?: boolean;\n\n  /**\n   * Determines if an item is selected on focus.\n   *\n   * @defaultvalue true\n   */\n  isSelectedOnFocus?: boolean;\n\n  /** Whether to animate updates */\n  enableUpdateAnimations?: boolean;\n\n  /**\n   * Whether to use fast icon and check components. The icons can't be targeted by customization\n   * but are still customizable via class names.\n   * @defaultvalue true\n   */\n  useFastIcons?: boolean;\n\n  /** Role for the list. */\n  role?: string;\n\n  /**\n   * Properties to pass through to the FocusZone.\n   */\n  focusZoneProps?: IFocusZoneProps;\n}\n\n/**\n * {@docCategory DetailsList}\n */\nexport interface IColumn {\n  /** A unique key for identifying the column. */\n  key: string;\n\n  /** Name to render on the column header. */\n  name: string;\n\n  /**\n   * The field to pull the text value from for the column.\n   * Can be unset if a custom `onRender` method is provided.\n   */\n  fieldName?: string;\n\n  /**\n   * If specified, the width of the column is a portion of the available space equal to this value divided by the sum\n   * of all proportional column widths in the list. For example, if there is a list with two proportional columns that\n   * have widths of 1 and 3, they will respectively occupy (1/4) = 25% and (3/4) = 75% of the remaining space. Note that\n   * this relies on viewport measures and will not work well with skipViewportMeasures.\n   */\n  flexGrow?: number;\n\n  /** Class name to apply to the column cell within each row. */\n  className?: string;\n\n  /** Custom overrides to the themed or default styles. */\n  styles?: IStyleFunctionOrObject<IDetailsColumnStyleProps, IDetailsColumnStyles>;\n\n  /** Minimum width for the column. */\n  minWidth: number;\n\n  /**\n   * If specified, the width of the column is a portion of the available space equal to this value divided by the sum\n   * of all proportional column widths in the list. For example, if there is a list with two proportional columns that\n   * have widths of 1 and 3, they will respectively occupy (1/4) = 25% and (2/4) = 75% of the remaining space. Note that\n   * this relies on viewport measures and will not work well with skipViewportMeasures.\n   */\n  targetWidthProportion?: number;\n\n  /**\n   * Accessible label for the column. The column name will still be used as the primary label,\n   * but this text (if specified) will be used as the column description.\n   * WARNING: grid column descriptions are often ignored by screen readers, so any necessary information\n   * should go directly in the column content\n   */\n  ariaLabel?: string;\n\n  /** Whether the column is a header for the given row. There should be only one column with this set to true. */\n  isRowHeader?: boolean;\n\n  /** Maximum width for the column, if stretching is allowed in justified scenarios. */\n  maxWidth?: number;\n\n  /**\n   * Defines how the column's header should render.\n   * @defaultvalue ColumnActionsMode.clickable\n   */\n  columnActionsMode?: ColumnActionsMode;\n\n  /** Custom icon to use in the column header. */\n  iconName?: string;\n\n  /**\n   * Whether only the icon should be displayed in the column header.\n   * If true, the column name and dropdown chevron will not be displayed.\n   */\n  isIconOnly?: boolean;\n\n  /** Class name for the icon within the header. */\n  iconClassName?: string;\n\n  /**\n   * If true, allow the column to be collapsed when rendered in justified layout.\n   * @deprecated Use `isCollapsible`\n   */\n  isCollapsable?: boolean;\n\n  /** If true, allow the column to be collapsed when rendered in justified layout. */\n  isCollapsible?: boolean;\n\n  /** If true, column header will render an icon indicating column is sortable while unsorted */\n  showSortIconWhenUnsorted?: boolean;\n\n  /** Determines if the column is currently sorted. Renders a sort arrow in the column header. */\n  isSorted?: boolean;\n\n  /** Determines if the sort arrow is pointed down (descending) or up. */\n  isSortedDescending?: boolean;\n\n  /** Determines if the column can be resized. */\n  isResizable?: boolean;\n\n  /** Determines if the column can render multi-line text. */\n  isMultiline?: boolean;\n\n  /** Custom renderer for cell content, instead of the default text rendering. */\n  onRender?: (item?: any, index?: number, column?: IColumn) => any;\n\n  /** Custom override for the parent list's `getCellValueKey`. */\n  getValueKey?: (item?: any, index?: number, column?: IColumn) => string;\n\n  onRenderField?: IRenderFunction<IDetailsColumnFieldProps>;\n\n  /** Custom renderer for column header divider. */\n  onRenderDivider?: IRenderFunction<IDetailsColumnProps>;\n\n  /** Custom renderer for filter icon. */\n  onRenderFilterIcon?: IRenderFunction<IDetailsColumnFilterIconProps>;\n\n  /** Custom renderer for column header content, instead of the default text rendering. */\n  onRenderHeader?: IRenderFunction<IDetailsColumnProps>;\n\n  /** Whether the list is filtered by this column. If true, shows a filter icon next to this column's name. */\n  isFiltered?: boolean;\n\n  /** Callback for when the user clicks on the column header. */\n  onColumnClick?: (ev: React.MouseEvent<HTMLElement>, column: IColumn) => void;\n\n  /** Callback for when the user opens the column header context menu. */\n  onColumnContextMenu?: (column?: IColumn, ev?: React.MouseEvent<HTMLElement>) => void;\n\n  /**\n   * Callback for when the column is resized (`width` is the current width).\n   *\n   * Prefer this over `DetailsList`'s `onColumnResize` if you require the `IColumn` to report its width\n   * after every resize event. Consider debouncing the callback if resize events occur frequently.\n   */\n  onColumnResize?: (width?: number) => void;\n\n  /** Whether the list is grouped by this column. If true, shows a grouped icon next to this column's name. */\n  isGrouped?: boolean;\n\n  /** Arbitrary data passthrough which can be used by the caller. */\n  data?: any;\n\n  /** Internal only value. */\n  calculatedWidth?: number;\n\n  /**\n   * Internal only value.\n   * Remembers the actual width of the column in any case.\n   * `calculatedWidth` is only saved when it's defined by user, not for justified calculations.\n   */\n  currentWidth?: number;\n\n  /** Class name to apply to the column header cell. */\n  headerClassName?: string;\n\n  /** If true, add additional LTR padding-right to column and cells. */\n  isPadded?: boolean;\n\n  /**\n   * Accessible label for indicating that the list is sorted by this column in ascending order.\n   * This will be read after the main column header label.\n   */\n  sortAscendingAriaLabel?: string;\n\n  /**\n   * Accessible label for indicating that the list is sorted by this column in descending order.\n   * This will be read after the main column header label.\n   */\n  sortDescendingAriaLabel?: string;\n\n  /**\n   * Accessible label for indicating that the list could be sorted by this column but isn't currently.\n   * This will be read after the main column header label.\n   */\n  sortableAriaLabel?: string;\n\n  /** Accessible label for the status of this column when grouped. */\n  groupAriaLabel?: string;\n\n  /** Accessible label for the status of this column when filtered. */\n  filterAriaLabel?: string;\n\n  /** Whether a dropdown menu is open so that the appropriate ARIA attributes are rendered. */\n  isMenuOpen?: boolean;\n}\n\n/**\n * Enum to describe how a particular column header behaves.\n * This is used to to specify the property `IColumn.columnActionsMode`.\n * If `IColumn.columnActionsMode` is undefined, it's equivalent to `ColumnActionsMode.clickable`.\n * {@docCategory DetailsList}\n */\nexport enum ColumnActionsMode {\n  /** Renders the column header as disabled. */\n  disabled = 0,\n\n  /** Renders the column header as clickable. Default value. */\n  clickable = 1,\n\n  /** Renders the column header as clickable and displays the dropdown chevron. */\n  hasDropdown = 2,\n}\n\n/**\n * {@docCategory DetailsList}\n */\nexport enum ConstrainMode {\n  /** Lets the content grow which allows the page to manage scrolling. */\n  unconstrained = 0,\n\n  /** Constrains the list to the given layout space. */\n  horizontalConstrained = 1,\n}\n\n/**\n * {@docCategory DetailsList}\n */\nexport interface IColumnReorderOptions {\n  /**\n   * Specifies the number fixed columns from left\n   * @defaultvalue 0\n   */\n  frozenColumnCountFromStart?: number;\n\n  /**\n   * Specifies the number fixed columns from right\n   * @defaultvalue 0\n   */\n  frozenColumnCountFromEnd?: number;\n\n  /**\n   * Callback to handle when dragging on this column's DetailsHeader has started.\n   */\n  onColumnDragStart?: (dragStarted: boolean) => void;\n\n  /**\n   * Callback to handle column reordering.\n   * `draggedIndex` is the source column index, which should be placed at `targetIndex`.\n   * @deprecated Use `onColumnDrop` instead.\n   */\n  handleColumnReorder?: (draggedIndex: number, targetIndex: number) => void;\n\n  /**\n   * Callback to handle column reordering.\n   * `draggedIndex` is the source column index, which should be placed at `targetIndex`.\n   */\n  onColumnDrop?: (dragDropDetails: IColumnDragDropDetails) => void;\n\n  /**\n   * Callback to handle when dragging on this column's DetailsHeader has finished.\n   */\n  onDragEnd?: (columnDropLocationDetails: ColumnDragEndLocation) => void;\n}\n\n/**\n * {@docCategory DetailsList}\n */\nexport interface IColumnDragDropDetails {\n  /**\n   * Specifies the source column index\n   * @defaultvalue -1\n   */\n  draggedIndex: number;\n\n  /**\n   * Specifies the target column index\n   * @defaultvalue -1\n   */\n  targetIndex: number;\n}\n\n/**\n * Enum to describe where the column has been dropped, after starting the drag\n * {@docCategory DetailsList}\n */\nexport enum ColumnDragEndLocation {\n  /** Drag ended outside of current list */\n  outside = 0,\n\n  /** Drag ended within current list */\n  surface = 1,\n\n  /** Drag ended on header */\n  header = 2,\n}\n\n/**\n * {@docCategory DetailsList}\n */\nexport enum DetailsListLayoutMode {\n  /**\n   * Lets the user resize columns and makes not attempt to fit them.\n   */\n  fixedColumns = 0,\n\n  /**\n   * Manages which columns are visible, tries to size them according to their min/max rules and drops\n   * off columns that can't fit and have isCollapsible set.\n   */\n  justified = 1,\n}\n\n/**\n * {@docCategory DetailsList}\n */\nexport enum CheckboxVisibility {\n  /** Visible on hover. */\n  onHover = 0,\n\n  /** Visible always. */\n  always = 1,\n\n  /** Hide checkboxes. */\n  hidden = 2,\n}\n\n/**\n * {@docCategory DetailsList}\n */\nexport type IDetailsListStyleProps = Required<Pick<IDetailsListProps, 'theme'>> &\n  Pick<IDetailsListProps, 'className'> & {\n    /** Whether the list is horizontally constrained */\n    isHorizontalConstrained?: boolean;\n\n    /** Whether the list is in compact mode */\n    compact?: boolean;\n\n    /** Whether the list is fixed in size */\n    isFixed?: boolean;\n  };\n\n/**\n * {@docCategory DetailsList}\n */\nexport interface IDetailsListStyles {\n  root: IStyle;\n  focusZone: IStyle;\n  headerWrapper: IStyle;\n  contentWrapper: IStyle;\n}\n\n/**\n * {@docCategory DetailsList}\n */\nexport interface IDetailsGroupRenderProps extends IGroupRenderProps {\n  onRenderFooter?: IRenderFunction<IDetailsGroupDividerProps>;\n  onRenderHeader?: IRenderFunction<IDetailsGroupDividerProps>;\n  groupedListAs?: IComponentAs<IGroupedListProps>;\n}\n\n/**\n * {@docCategory DetailsList}\n */\nexport interface IDetailsGroupDividerProps extends IGroupDividerProps, IDetailsItemProps {}\n\nexport interface IDetailsListCheckboxProps extends IDetailsCheckboxProps {}\n\nexport type {\n  IDetailsHeaderProps,\n  IDetailsRowBaseProps,\n  IDetailsHeaderBaseProps,\n  IDetailsFooterBaseProps,\n  IDragDropContext,\n  IDragDropEvents,\n  IDragDropHelper,\n  IDragDropOptions,\n  IViewport,\n  IWithViewportProps,\n};\n", "import * as React from 'react';\nimport type { IGroupSpacerProps } from './GroupSpacer.types';\n\nexport const SPACER_WIDTH = 36;\n\nexport const GroupSpacer: React.FunctionComponent<IGroupSpacerProps> = props => {\n  const { count, indentWidth = SPACER_WIDTH, role = 'presentation' } = props;\n  const width = count * indentWidth;\n\n  return count > 0 ? (\n    <span className={'ms-GroupSpacer'} style={{ display: 'inline-block', width }} role={role} />\n  ) : null;\n};\n", "import { getGlobalClassNames, AnimationVariables } from '../../Styling';\nimport type { IGroupedListStyleProps, IGroupedListStyles } from './GroupedList.types';\n\nconst GlobalClassNames = {\n  root: 'ms-GroupedList',\n  compact: 'ms-GroupedList--Compact',\n  group: 'ms-GroupedList-group',\n  link: 'ms-Link',\n  listCell: 'ms-List-cell',\n};\n\nconst beziers = {\n  easeInOutSine: 'cubic-bezier(0.445, 0.050, 0.550, 0.950)',\n};\n\nexport const getStyles = (props: IGroupedListStyleProps): IGroupedListStyles => {\n  const { theme, className, compact } = props;\n  const { palette } = theme;\n  const classNames = getGlobalClassNames(GlobalClassNames, theme!);\n\n  return {\n    root: [\n      classNames.root,\n      theme.fonts.small,\n      {\n        position: 'relative',\n        selectors: {\n          [`.${classNames.listCell}`]: {\n            minHeight: 38, // be consistent with DetailsList styles\n          },\n        },\n      },\n      compact && [\n        classNames.compact,\n        {\n          selectors: {\n            [`.${classNames.listCell}`]: {\n              minHeight: 32, // be consistent with DetailsList styles\n            },\n          },\n        },\n      ],\n      className,\n    ],\n    group: [\n      classNames.group,\n      {\n        transition: `background-color ${AnimationVariables.durationValue2} ${beziers.easeInOutSine}`,\n      },\n    ],\n    groupIsDropping: {\n      backgroundColor: palette.neutralLight,\n    },\n  };\n};\n", "import * as React from 'react';\nimport { initializeComponentRef, classNamesFunction, KeyCodes, getRTLSafeKeyCode, css } from '../../Utilities';\nimport { GroupedListSection } from './GroupedListSection';\nimport { List, ScrollToMode } from '../../List';\nimport { SelectionMode } from '../../Selection';\nimport { DEFAULT_ROW_HEIGHTS } from '../DetailsList/DetailsRow.styles';\nimport { FocusZone, FocusZoneDirection } from '../../FocusZone';\nimport type { IProcessedStyleSet } from '../../Styling';\nimport type {\n  IGroupedList,\n  IGroupedListProps,\n  IGroup,\n  IGroupedListStyleProps,\n  IGroupedListStyles,\n} from './GroupedList.types';\nimport type { IListProps } from '../../List';\nimport type { IGroupHeaderProps } from './GroupHeader';\nimport type { IGroupShowAllProps } from './GroupShowAll.styles';\nimport type { IGroupFooterProps } from './GroupFooter.types';\n\nconst getClassNames = classNamesFunction<IGroupedListStyleProps, IGroupedListStyles>();\nconst { rowHeight: ROW_HEIGHT, compactRowHeight: COMPACT_ROW_HEIGHT } = DEFAULT_ROW_HEIGHTS;\n\nexport interface IGroupedListState {\n  selectionMode?: IGroupedListProps['selectionMode'];\n  compact?: IGroupedListProps['compact'];\n  groups?: IGroup[];\n  items?: IGroupedListProps['items'];\n  listProps?: IGroupedListProps['listProps'];\n  version: {};\n}\n\nexport class GroupedListBase extends React.Component<IGroupedListProps, IGroupedListState> implements IGroupedList {\n  public static defaultProps = {\n    selectionMode: SelectionMode.multiple,\n    isHeaderVisible: true,\n    groupProps: {},\n    compact: false,\n  };\n\n  private _classNames: IProcessedStyleSet<IGroupedListStyles>;\n\n  private _list = React.createRef<List>();\n\n  private _isSomeGroupExpanded: boolean;\n\n  public static getDerivedStateFromProps(\n    nextProps: IGroupedListProps,\n    previousState: IGroupedListState,\n  ): IGroupedListState {\n    const { groups, selectionMode, compact, items, listProps } = nextProps;\n    const listVersion = listProps && listProps.version;\n\n    let nextState = {\n      ...previousState,\n      selectionMode,\n      compact,\n      groups,\n      listProps,\n      items,\n    };\n\n    let shouldForceUpdates = false;\n\n    const previousListVersion = previousState.listProps && previousState.listProps.version;\n\n    if (\n      listVersion !== previousListVersion ||\n      items !== previousState.items ||\n      groups !== previousState.groups ||\n      selectionMode !== previousState.selectionMode ||\n      compact !== previousState.compact\n    ) {\n      // If there are any props not passed explicitly to `List` which have an impact on the behavior of `onRenderCell`,\n      // these need to 'force-update' this component by revving the version. Otherwise, the List might render with stale\n      // data.\n      shouldForceUpdates = true;\n    }\n\n    if (shouldForceUpdates) {\n      nextState = {\n        ...nextState,\n        version: {},\n      };\n    }\n\n    return nextState;\n  }\n\n  constructor(props: IGroupedListProps) {\n    super(props);\n\n    initializeComponentRef(this);\n\n    this._isSomeGroupExpanded = this._computeIsSomeGroupExpanded(props.groups);\n\n    const { listProps: { version = {} } = {} } = props;\n\n    this.state = {\n      groups: props.groups,\n      items: props.items,\n      listProps: props.listProps,\n      version,\n    };\n  }\n\n  public scrollToIndex(index: number, measureItem?: (itemIndex: number) => number, scrollToMode?: ScrollToMode): void {\n    if (this._list.current) {\n      this._list.current.scrollToIndex(index, measureItem, scrollToMode);\n    }\n  }\n\n  public getStartItemIndexInView(): number {\n    return this._list.current!.getStartItemIndexInView() || 0;\n  }\n\n  public componentDidMount() {\n    const { groupProps, groups = [] } = this.props;\n\n    if (groupProps && groupProps.isAllGroupsCollapsed) {\n      this._setGroupsCollapsedState(groups, groupProps.isAllGroupsCollapsed);\n    }\n  }\n\n  public render(): JSX.Element {\n    const {\n      className,\n      usePageCache,\n      onShouldVirtualize,\n      theme,\n      role = 'treegrid',\n      styles,\n      compact,\n      focusZoneProps = {},\n      rootListProps = {},\n    } = this.props;\n    const { groups, version } = this.state;\n\n    this._classNames = getClassNames(styles, {\n      theme: theme!,\n      className,\n      compact,\n    });\n\n    const { shouldEnterInnerZone = this._isInnerZoneKeystroke } = focusZoneProps;\n\n    return (\n      <FocusZone\n        direction={FocusZoneDirection.vertical}\n        data-automationid=\"GroupedList\"\n        data-is-scrollable=\"false\"\n        role=\"presentation\"\n        {...focusZoneProps}\n        shouldEnterInnerZone={shouldEnterInnerZone}\n        className={css(this._classNames.root, focusZoneProps.className)}\n      >\n        {!groups ? (\n          this._renderGroup(undefined, 0)\n        ) : (\n          <List\n            ref={this._list}\n            role={role}\n            items={groups}\n            onRenderCell={this._renderGroup}\n            getItemCountForPage={this._returnOne}\n            getPageHeight={this._getPageHeight}\n            getPageSpecification={this._getPageSpecification}\n            usePageCache={usePageCache}\n            onShouldVirtualize={onShouldVirtualize}\n            version={version}\n            {...rootListProps}\n          />\n        )}\n      </FocusZone>\n    );\n  }\n\n  public forceUpdate() {\n    super.forceUpdate();\n    this._forceListUpdates();\n  }\n\n  public toggleCollapseAll(allCollapsed: boolean): void {\n    const { groups = [] } = this.state;\n    const { groupProps } = this.props;\n    const onToggleCollapseAll = groupProps && groupProps.onToggleCollapseAll;\n\n    if (groups.length > 0) {\n      if (onToggleCollapseAll) {\n        onToggleCollapseAll(allCollapsed);\n      }\n\n      this._setGroupsCollapsedState(groups, allCollapsed);\n\n      this._updateIsSomeGroupExpanded();\n\n      this.forceUpdate();\n    }\n  }\n\n  private _setGroupsCollapsedState(groups: IGroup[], isCollapsed: boolean): void {\n    for (let groupIndex = 0; groupIndex < groups.length; groupIndex++) {\n      groups[groupIndex].isCollapsed = isCollapsed;\n    }\n  }\n\n  private _renderGroup = (group: IGroup | undefined, groupIndex: number): React.ReactNode => {\n    const {\n      dragDropEvents,\n      dragDropHelper,\n      eventsToRegister,\n      groupProps,\n      items,\n      listProps,\n      onRenderCell,\n      selectionMode,\n      selection,\n      viewport,\n      onShouldVirtualize,\n      groups,\n      compact,\n    } = this.props;\n\n    // override group header/footer props as needed\n    const dividerProps = {\n      onToggleSelectGroup: this._onToggleSelectGroup,\n      onToggleCollapse: this._onToggleCollapse,\n      onToggleSummarize: this._onToggleSummarize,\n    };\n\n    const headerProps: IGroupHeaderProps = { ...groupProps!.headerProps, ...dividerProps };\n    const showAllProps: IGroupShowAllProps = { ...groupProps!.showAllProps, ...dividerProps };\n    const footerProps: IGroupFooterProps = { ...groupProps!.footerProps, ...dividerProps };\n    const groupNestingDepth = this._getGroupNestingDepth();\n\n    if (!groupProps!.showEmptyGroups && group && group.count === 0) {\n      return null;\n    }\n\n    const finalListProps: IListProps = {\n      ...(listProps || {}),\n      version: this.state.version,\n    };\n\n    return (\n      <GroupedListSection\n        key={this._getGroupKey(group, groupIndex)}\n        dragDropEvents={dragDropEvents}\n        dragDropHelper={dragDropHelper}\n        eventsToRegister={eventsToRegister}\n        footerProps={footerProps}\n        getGroupItemLimit={groupProps && groupProps.getGroupItemLimit}\n        group={group}\n        groupIndex={groupIndex}\n        groupNestingDepth={groupNestingDepth}\n        groupProps={groupProps}\n        headerProps={headerProps}\n        listProps={finalListProps}\n        items={items}\n        onRenderCell={onRenderCell}\n        onRenderGroupHeader={groupProps!.onRenderHeader}\n        onRenderGroupShowAll={groupProps!.onRenderShowAll}\n        onRenderGroupFooter={groupProps!.onRenderFooter}\n        selectionMode={selectionMode}\n        selection={selection}\n        showAllProps={showAllProps}\n        viewport={viewport}\n        onShouldVirtualize={onShouldVirtualize}\n        groupedListClassNames={this._classNames}\n        groups={groups}\n        compact={compact}\n      />\n    );\n  };\n\n  private _returnOne(): number {\n    return 1;\n  }\n\n  private _getDefaultGroupItemLimit = (group: IGroup): number => {\n    return group.children && group.children.length > 0 ? group.children.length : group.count;\n  };\n\n  private _getGroupItemLimit = (group: IGroup): number => {\n    const { groupProps } = this.props;\n    const getGroupItemLimit =\n      groupProps && groupProps.getGroupItemLimit ? groupProps.getGroupItemLimit : this._getDefaultGroupItemLimit;\n\n    return getGroupItemLimit(group);\n  };\n\n  private _getGroupHeight = (group: IGroup): number => {\n    const rowHeight = this.props.compact ? COMPACT_ROW_HEIGHT : ROW_HEIGHT;\n\n    return rowHeight + (group.isCollapsed ? 0 : rowHeight * this._getGroupItemLimit(group));\n  };\n\n  private _getPageHeight: IListProps['getPageHeight'] = (itemIndex: number) => {\n    const { groups } = this.state;\n    const { getGroupHeight = this._getGroupHeight } = this.props;\n    const pageGroup = groups && groups[itemIndex];\n\n    if (pageGroup) {\n      return getGroupHeight(pageGroup, itemIndex);\n    } else {\n      return 0;\n    }\n  };\n\n  private _getGroupKey(group: IGroup | undefined, index: number): string {\n    return 'group-' + (group && group.key ? group.key : String(index));\n  }\n\n  private _getGroupNestingDepth(): number {\n    const { groups } = this.state;\n    let level = 0;\n    let groupsInLevel = groups;\n\n    while (groupsInLevel && groupsInLevel.length > 0) {\n      level++;\n      groupsInLevel = groupsInLevel[0].children;\n    }\n\n    return level;\n  }\n\n  private _onToggleCollapse = (group: IGroup): void => {\n    const { groupProps } = this.props;\n    const onToggleCollapse = groupProps && groupProps.headerProps && groupProps.headerProps.onToggleCollapse;\n\n    if (group) {\n      if (onToggleCollapse) {\n        onToggleCollapse(group);\n      }\n\n      group.isCollapsed = !group.isCollapsed;\n      this._updateIsSomeGroupExpanded();\n      this.forceUpdate();\n    }\n  };\n\n  private _onToggleSelectGroup = (group: IGroup): void => {\n    const { selection, selectionMode } = this.props;\n\n    if (group && selection && selectionMode === SelectionMode.multiple) {\n      selection.toggleRangeSelected(group.startIndex, group.count);\n    }\n  };\n\n  private _isInnerZoneKeystroke = (ev: React.KeyboardEvent<HTMLElement>): boolean => {\n    // eslint-disable-next-line deprecation/deprecation\n    return ev.which === getRTLSafeKeyCode(KeyCodes.right);\n  };\n\n  private _forceListUpdates(groups?: IGroup[]): void {\n    this.setState({\n      version: {},\n    });\n  }\n\n  private _onToggleSummarize = (group: IGroup): void => {\n    const { groupProps } = this.props;\n    const onToggleSummarize = groupProps && groupProps.showAllProps && groupProps.showAllProps.onToggleSummarize;\n\n    if (onToggleSummarize) {\n      onToggleSummarize(group);\n    } else {\n      if (group) {\n        group.isShowingAll = !group.isShowingAll;\n      }\n\n      this.forceUpdate();\n    }\n  };\n\n  private _getPageSpecification = (\n    itemIndex: number,\n  ): {\n    key?: string;\n  } => {\n    const groups = this.state.groups;\n    const pageGroup = groups && groups[itemIndex];\n    return {\n      key: pageGroup && pageGroup.key,\n    };\n  };\n\n  private _computeIsSomeGroupExpanded(groups: IGroup[] | undefined): boolean {\n    return !!(\n      groups &&\n      groups.some(group => (group.children ? this._computeIsSomeGroupExpanded(group.children) : !group.isCollapsed))\n    );\n  }\n\n  private _updateIsSomeGroupExpanded(): void {\n    const { groups } = this.state;\n    const { onGroupExpandStateChanged } = this.props;\n\n    const newIsSomeGroupExpanded = this._computeIsSomeGroupExpanded(groups);\n    if (this._isSomeGroupExpanded !== newIsSomeGroupExpanded) {\n      if (onGroupExpandStateChanged) {\n        onGroupExpandStateChanged(newIsSomeGroupExpanded);\n      }\n      this._isSomeGroupExpanded = newIsSomeGroupExpanded;\n    }\n  }\n}\n", "import * as React from 'react';\nimport { initializeComponentRef, css, getId, EventGroup } from '../../Utilities';\n\nimport { SelectionMode, SELECTION_CHANGE } from '../../Selection';\n\nimport { GroupHeader } from './GroupHeader';\nimport { GroupShowAll } from './GroupShowAll';\nimport { GroupFooter } from './GroupFooter';\n\nimport { List } from '../../List';\nimport type { IGroup, IGroupDividerProps, IGroupRenderProps, IGroupedListStyles } from './GroupedList.types';\nimport type { IGroupHeaderProps } from './GroupHeader.types';\nimport type { IGroupFooterProps } from './GroupFooter.types';\nimport type { IGroupShowAllProps } from './GroupShowAll.types';\nimport type { IDragDropContext, IDragDropEvents, IDragDropHelper, IDragDropOptions } from '../../DragDrop';\nimport type { IProcessedStyleSet } from '../../Styling';\nimport type { IRenderFunction, IDisposable } from '../../Utilities';\nimport type { ISelection } from '../../Selection';\nimport type { IListProps } from '../../List';\nimport type { IViewport } from '../../utilities/decorators/withViewport';\n\nexport interface IGroupedListSectionProps extends React.ClassAttributes<GroupedListSection> {\n  /** GroupedList resolved class names */\n  groupedListClassNames?: IProcessedStyleSet<IGroupedListStyles>;\n\n  /**\n   * Gets the component ref.\n   */\n  componentRef?: () => void;\n\n  /** Whether to render in compact mode */\n  compact?: boolean;\n\n  /** Map of callback functions related to drag and drop functionality. */\n  dragDropEvents?: IDragDropEvents;\n\n  /** helper to manage drag/drop across item rows and groups */\n  dragDropHelper?: IDragDropHelper;\n\n  /** Event names and corresponding callbacks that will be registered to the group and the rendered elements */\n  eventsToRegister?: { eventName: string; callback: (context: IDragDropContext, event?: any) => void }[];\n\n  /** Information to pass in to the group footer. */\n  footerProps?: IGroupFooterProps;\n\n  /** Grouping item limit. */\n  getGroupItemLimit?: (group: IGroup) => number;\n\n  /** Optional grouping instructions. */\n  groupIndex?: number;\n\n  /** Optional group nesting level. */\n  groupNestingDepth?: number;\n\n  /** Optional grouping instructions. */\n  group?: IGroup;\n\n  /** Optional override properties to render groups. */\n  groupProps?: IGroupRenderProps;\n\n  /** Information to pass in to the group header. */\n  headerProps?: IGroupHeaderProps;\n\n  /** List of items to render. */\n  items: any[];\n\n  /** Optional list props to pass to list renderer.  */\n  listProps?: IListProps;\n\n  /** Rendering callback to render the group items. */\n  onRenderCell: (nestingDepth?: number, item?: any, index?: number) => React.ReactNode;\n\n  /** Optional selection model to track selection state.  */\n  selection?: ISelection;\n\n  /** Controls how/if the details list manages selection. */\n  selectionMode?: SelectionMode;\n\n  /** Information to pass in to the group Show All footer. */\n  showAllProps?: IGroupShowAllProps;\n\n  /** Optional Viewport, provided by the parent component. */\n  viewport?: IViewport;\n\n  /** Override for rendering the group header. */\n  onRenderGroupHeader?: IRenderFunction<IGroupHeaderProps>;\n\n  /** Override for rendering the group Show All link. */\n  onRenderGroupShowAll?: IRenderFunction<IGroupShowAllProps>;\n\n  /** Override for rendering the group footer. */\n  onRenderGroupFooter?: IRenderFunction<IGroupFooterProps>;\n\n  /**\n   * Optional callback to determine whether the list should be rendered in full, or virtualized.\n   * Virtualization will add and remove pages of items as the user scrolls them into the visible range.\n   * This benefits larger list scenarios by reducing the DOM on the screen, but can negatively affect performance for\n   * smaller lists.\n   * The default implementation will virtualize when this callback is not provided.\n   */\n  onShouldVirtualize?: (props: IListProps) => boolean;\n\n  /** Stores parent group's children. */\n  groups?: IGroup[];\n}\n\nexport interface IGroupedListSectionState {\n  isDropping?: boolean;\n  isSelected?: boolean;\n}\n\nconst DEFAULT_DROPPING_CSS_CLASS = 'is-dropping';\n\nexport class GroupedListSection extends React.Component<IGroupedListSectionProps, IGroupedListSectionState> {\n  private _root = React.createRef<HTMLDivElement>();\n  private _list = React.createRef<List>();\n  private _subGroupRefs: Record<string, GroupedListSection | null> = {};\n  private _id: string;\n  private _events: EventGroup;\n\n  private _dragDropSubscription?: IDisposable;\n  private _droppingClassName: string = '';\n\n  constructor(props: IGroupedListSectionProps) {\n    super(props);\n\n    const { selection, group } = props;\n\n    initializeComponentRef(this);\n\n    this._id = getId('GroupedListSection');\n\n    this.state = {\n      isDropping: false,\n      isSelected: selection && group ? selection.isRangeSelected(group.startIndex, group.count) : false,\n    };\n\n    this._events = new EventGroup(this);\n  }\n\n  public componentDidMount(): void {\n    const { dragDropHelper, selection } = this.props;\n\n    if (dragDropHelper && this._root.current) {\n      this._dragDropSubscription = dragDropHelper.subscribe(\n        this._root.current,\n        this._events,\n        this._getGroupDragDropOptions(),\n      );\n    }\n\n    if (selection) {\n      this._events.on(selection, SELECTION_CHANGE, this._onSelectionChange);\n    }\n  }\n\n  public componentWillUnmount() {\n    this._events.dispose();\n\n    if (this._dragDropSubscription) {\n      this._dragDropSubscription.dispose();\n    }\n  }\n\n  public componentDidUpdate(previousProps: IGroupedListSectionProps) {\n    if (\n      this.props.group !== previousProps.group ||\n      this.props.groupIndex !== previousProps.groupIndex ||\n      this.props.dragDropHelper !== previousProps.dragDropHelper\n    ) {\n      if (this._dragDropSubscription) {\n        this._dragDropSubscription.dispose();\n        delete this._dragDropSubscription;\n      }\n\n      if (this.props.dragDropHelper && this._root.current) {\n        this._dragDropSubscription = this.props.dragDropHelper.subscribe(\n          this._root.current,\n          this._events,\n          this._getGroupDragDropOptions(),\n        );\n      }\n    }\n  }\n\n  public render(): JSX.Element {\n    const {\n      getGroupItemLimit,\n      group,\n      groupIndex,\n      headerProps,\n      showAllProps,\n      footerProps,\n      viewport,\n      selectionMode,\n      onRenderGroupHeader = this._onRenderGroupHeader,\n      onRenderGroupShowAll = this._onRenderGroupShowAll,\n      onRenderGroupFooter = this._onRenderGroupFooter,\n      onShouldVirtualize,\n      groupedListClassNames,\n      groups,\n      compact,\n      listProps = {},\n    } = this.props;\n    const { isSelected } = this.state;\n    const renderCount = group && getGroupItemLimit ? getGroupItemLimit(group) : Infinity;\n    const isShowAllVisible =\n      group &&\n      !group.children &&\n      !group.isCollapsed &&\n      !group.isShowingAll &&\n      (group.count > renderCount || group.hasMoreData);\n    const hasNestedGroups = group && group.children && group.children.length > 0;\n\n    const { version } = listProps;\n\n    const dividerProps: IGroupDividerProps = {\n      group,\n      groupIndex,\n      groupLevel: group ? group.level : 0,\n      isSelected,\n      selected: isSelected,\n      viewport,\n      selectionMode,\n      groups,\n      compact,\n    };\n\n    const ariaControlsProps: IGroupHeaderProps = {\n      groupedListId: this._id,\n      ariaLevel: group?.level ? group.level + 1 : 1,\n      ariaSetSize: groups ? groups.length : undefined,\n      ariaPosInSet: groupIndex !== undefined ? groupIndex + 1 : undefined,\n    };\n\n    const groupHeaderProps: IGroupHeaderProps = { ...headerProps, ...dividerProps, ...ariaControlsProps };\n    const groupShowAllProps: IGroupShowAllProps = { ...showAllProps, ...dividerProps };\n    const groupFooterProps: IGroupFooterProps = { ...footerProps, ...dividerProps };\n\n    const isDraggable: boolean =\n      !!this.props.dragDropHelper &&\n      this._getGroupDragDropOptions().canDrag!(group) &&\n      !!this.props.dragDropEvents!.canDragGroups;\n\n    return (\n      <div\n        ref={this._root}\n        {...(isDraggable && { draggable: true })}\n        className={css(groupedListClassNames && groupedListClassNames.group, this._getDroppingClassName())}\n        role=\"presentation\"\n      >\n        {onRenderGroupHeader(groupHeaderProps, this._onRenderGroupHeader)}\n        {group && group.isCollapsed ? null : hasNestedGroups ? (\n          <List\n            role=\"presentation\"\n            ref={this._list}\n            items={group ? group.children : []}\n            onRenderCell={this._renderSubGroup}\n            getItemCountForPage={this._returnOne}\n            onShouldVirtualize={onShouldVirtualize}\n            version={version}\n            id={this._id}\n          />\n        ) : (\n          this._onRenderGroup(renderCount)\n        )}\n        {group && group.isCollapsed\n          ? null\n          : isShowAllVisible && onRenderGroupShowAll(groupShowAllProps, this._onRenderGroupShowAll)}\n        {onRenderGroupFooter(groupFooterProps, this._onRenderGroupFooter)}\n      </div>\n    );\n  }\n\n  public forceUpdate() {\n    super.forceUpdate();\n    this.forceListUpdate();\n  }\n\n  public forceListUpdate() {\n    const { group } = this.props;\n\n    if (this._list.current) {\n      this._list.current.forceUpdate();\n\n      if (group && group.children && group.children.length > 0) {\n        const subGroupCount = group.children.length;\n\n        for (let i = 0; i < subGroupCount; i++) {\n          const subGroup = this._list.current.pageRefs['subGroup_' + String(i)] as GroupedListSection;\n\n          if (subGroup) {\n            subGroup.forceListUpdate();\n          }\n        }\n      }\n    } else {\n      const subGroup = this._subGroupRefs['subGroup_' + String(0)];\n\n      if (subGroup) {\n        subGroup.forceListUpdate();\n      }\n    }\n  }\n\n  private _onRenderGroupHeader = (props: IGroupHeaderProps): JSX.Element => {\n    return <GroupHeader {...props} />;\n  };\n\n  private _onRenderGroupShowAll = (props: IGroupShowAllProps): JSX.Element => {\n    return <GroupShowAll {...props} />;\n  };\n\n  private _onRenderGroupFooter = (props: IGroupFooterProps): JSX.Element => {\n    return <GroupFooter {...props} />;\n  };\n\n  private _onSelectionChange(): void {\n    const { group, selection } = this.props;\n    if (selection && group) {\n      const isSelected = selection.isRangeSelected(group.startIndex, group.count);\n\n      if (isSelected !== this.state.isSelected) {\n        this.setState({ isSelected });\n      }\n    }\n  }\n\n  private _onRenderGroupCell(\n    onRenderCell: any,\n    groupNestingDepth: number | undefined,\n    group: IGroup | undefined,\n  ): (item: any, itemIndex: number | undefined) => React.ReactNode {\n    return (item: any, itemIndex: number | undefined): React.ReactNode => {\n      return onRenderCell(groupNestingDepth, item, itemIndex, group);\n    };\n  }\n\n  private _onRenderGroup(renderCount: number): JSX.Element {\n    const { group, items, onRenderCell, listProps, groupNestingDepth, onShouldVirtualize, groupProps } = this.props;\n    const count = group && !group.isShowingAll ? group.count : items.length;\n    const startIndex = group ? group.startIndex : 0;\n\n    return (\n      <List\n        role={groupProps && groupProps.role ? groupProps.role : 'rowgroup'}\n        aria-label={group?.name}\n        items={items}\n        onRenderCell={this._onRenderGroupCell(onRenderCell, groupNestingDepth, group)}\n        ref={this._list}\n        renderCount={Math.min(count, renderCount)}\n        startIndex={startIndex}\n        onShouldVirtualize={onShouldVirtualize}\n        id={this._id}\n        {...listProps}\n      />\n    );\n  }\n\n  private _renderSubGroup = (subGroup: IGroup, subGroupIndex: number): JSX.Element | null => {\n    const {\n      dragDropEvents,\n      dragDropHelper,\n      eventsToRegister,\n      getGroupItemLimit,\n      groupNestingDepth,\n      groupProps,\n      items,\n      headerProps,\n      showAllProps,\n      footerProps,\n      listProps,\n      onRenderCell,\n      selection,\n      selectionMode,\n      viewport,\n      onRenderGroupHeader,\n      onRenderGroupShowAll,\n      onRenderGroupFooter,\n      onShouldVirtualize,\n      group,\n      compact,\n    } = this.props;\n\n    const nestingDepth = subGroup.level ? subGroup.level + 1 : groupNestingDepth;\n\n    return !subGroup || subGroup.count > 0 || (groupProps && groupProps.showEmptyGroups) ? (\n      <GroupedListSection\n        ref={ref => (this._subGroupRefs['subGroup_' + subGroupIndex] = ref)}\n        key={this._getGroupKey(subGroup, subGroupIndex)}\n        dragDropEvents={dragDropEvents}\n        dragDropHelper={dragDropHelper}\n        eventsToRegister={eventsToRegister}\n        footerProps={footerProps}\n        getGroupItemLimit={getGroupItemLimit}\n        group={subGroup}\n        groupIndex={subGroupIndex}\n        groupNestingDepth={nestingDepth}\n        groupProps={groupProps}\n        headerProps={headerProps}\n        items={items}\n        listProps={listProps}\n        onRenderCell={onRenderCell}\n        selection={selection}\n        selectionMode={selectionMode}\n        showAllProps={showAllProps}\n        viewport={viewport}\n        onRenderGroupHeader={onRenderGroupHeader}\n        onRenderGroupShowAll={onRenderGroupShowAll}\n        onRenderGroupFooter={onRenderGroupFooter}\n        onShouldVirtualize={onShouldVirtualize}\n        groups={group ? group.children : []}\n        compact={compact}\n      />\n    ) : null;\n  };\n\n  private _returnOne(): number {\n    return 1;\n  }\n\n  private _getGroupKey(group: IGroup, index: number): string {\n    return 'group-' + (group && group.key ? group.key : String(group.level) + String(index));\n  }\n\n  /**\n   * collect all the data we need to enable drag/drop for a group\n   */\n  private _getGroupDragDropOptions = (): IDragDropOptions => {\n    const { group, groupIndex, dragDropEvents, eventsToRegister } = this.props;\n    const options = {\n      eventMap: eventsToRegister,\n      selectionIndex: -1,\n      context: { data: group, index: groupIndex, isGroup: true },\n      updateDropState: this._updateDroppingState,\n      canDrag: dragDropEvents!.canDrag,\n      canDrop: dragDropEvents!.canDrop,\n      onDrop: dragDropEvents!.onDrop,\n      onDragStart: dragDropEvents!.onDragStart,\n      onDragEnter: dragDropEvents!.onDragEnter,\n      onDragLeave: dragDropEvents!.onDragLeave,\n      onDragEnd: dragDropEvents!.onDragEnd,\n      onDragOver: dragDropEvents!.onDragOver,\n    };\n    return options as IDragDropOptions;\n  };\n\n  /**\n   * update groupIsDropping state based on the input value, which is used to change style during drag and drop\n   *\n   * @param newValue - new isDropping state value\n   * @param event - the event trigger dropping state change which can be dragenter, dragleave etc\n   */\n  private _updateDroppingState = (newIsDropping: boolean, event: DragEvent): void => {\n    const { isDropping } = this.state;\n    const { dragDropEvents, group } = this.props;\n\n    if (isDropping !== newIsDropping) {\n      if (isDropping) {\n        if (dragDropEvents && dragDropEvents.onDragLeave) {\n          dragDropEvents.onDragLeave(group, event);\n        }\n      } else {\n        if (dragDropEvents && dragDropEvents.onDragEnter) {\n          this._droppingClassName = dragDropEvents.onDragEnter(group, event);\n        }\n      }\n\n      this.setState({ isDropping: newIsDropping });\n    }\n  };\n\n  /**\n   * get the correct css class to reflect the dropping state for a given group\n   *\n   * If the group is the current drop target, return the default dropping class name\n   * Otherwise, return '';\n   *\n   */\n  private _getDroppingClassName(): string {\n    let { isDropping } = this.state;\n    const { group, groupedListClassNames } = this.props;\n\n    isDropping = !!(group && isDropping);\n\n    return css(\n      isDropping && this._droppingClassName,\n      isDropping && DEFAULT_DROPPING_CSS_CLASS,\n      isDropping && groupedListClassNames && groupedListClassNames.groupIsDropping,\n    );\n  }\n}\n", "import { getGlobalClassNames, HighContrastSelector } from '@fluentui/style-utilities';\nimport type { ILinkStyleProps, ILinkStyles } from './Link.types';\n\nexport const GlobalClassNames = {\n  root: 'ms-Link',\n};\n\nexport const getStyles = (props: ILinkStyleProps): ILinkStyles => {\n  const { className, isButton, isDisabled, isUnderlined, theme } = props;\n  const { semanticColors } = theme;\n\n  // Tokens\n  const linkColor = semanticColors.link;\n  const linkInteractedColor = semanticColors.linkHovered;\n  const linkDisabledColor = semanticColors.disabledText;\n  const focusBorderColor = semanticColors.focusBorder;\n\n  const classNames = getGlobalClassNames(GlobalClassNames, theme);\n\n  return {\n    root: [\n      classNames.root,\n      theme.fonts.medium,\n      {\n        color: linkColor,\n        outline: 'none',\n        fontSize: 'inherit',\n        fontWeight: 'inherit',\n        textDecoration: isUnderlined ? 'underline' : 'none',\n\n        selectors: {\n          '.ms-Fabric--isFocusVisible &:focus': {\n            // Can't use getFocusStyle because it doesn't support wrapping links\n            // https://github.com/microsoft/fluentui/issues/4883#issuecomment-406743543\n            // Using box-shadow and outline allows the focus rect to wrap links that span multiple lines\n            // and helps the focus rect avoid getting clipped.\n            boxShadow: `0 0 0 1px ${focusBorderColor} inset`,\n            outline: `1px auto ${focusBorderColor}`,\n            selectors: {\n              [HighContrastSelector]: {\n                outline: '1px solid WindowText',\n              },\n            },\n          },\n          [HighContrastSelector]: {\n            // For IE high contrast mode\n            borderBottom: 'none',\n          },\n        },\n      },\n      isButton && {\n        background: 'none',\n        backgroundColor: 'transparent',\n        border: 'none',\n        cursor: 'pointer',\n        display: 'inline',\n        margin: 0,\n        overflow: 'inherit',\n        padding: 0,\n        textAlign: 'left',\n        textOverflow: 'inherit',\n        userSelect: 'text',\n        borderBottom: '1px solid transparent', // For Firefox high contrast mode\n        selectors: {\n          [HighContrastSelector]: {\n            color: 'LinkText',\n            forcedColorAdjust: 'none',\n          },\n        },\n      },\n      !isButton && {\n        selectors: {\n          [HighContrastSelector]: {\n            // This is mainly for MessageBar, which sets MsHighContrastAdjust: none by default\n            MsHighContrastAdjust: 'auto',\n            forcedColorAdjust: 'auto',\n          },\n        },\n      },\n\n      isDisabled && [\n        'is-disabled',\n        {\n          color: linkDisabledColor,\n          cursor: 'default',\n        },\n        {\n          selectors: {\n            '&:link, &:visited': {\n              pointerEvents: 'none',\n            },\n\n            [HighContrastSelector]: {\n              // We need to specify the color in High Contrast because of the case of Links rendering as buttons.\n              color: 'GrayText',\n            },\n          },\n        },\n      ],\n      !isDisabled && {\n        selectors: {\n          '&:active, &:hover, &:active:hover': {\n            color: linkInteractedColor,\n            textDecoration: 'underline',\n\n            selectors: {\n              [HighContrastSelector]: {\n                color: 'LinkText',\n              },\n            },\n          },\n          '&:focus': {\n            color: linkColor,\n\n            selectors: {\n              [HighContrastSelector]: {\n                color: 'LinkText',\n              },\n            },\n          },\n        },\n      },\n      classNames.root,\n      className,\n    ],\n  };\n};\n", "import {\n  AnimationClassNames,\n  AnimationStyles,\n  HighContrastSelector,\n  getFocusStyle,\n  getGlobalClassNames,\n  FontWeights,\n  getHighContrastNoAdjustStyle,\n} from '../../Styling';\nimport { IsFocusVisibleClassName } from '../../Utilities';\nimport { GlobalClassNames as LinkGlobalClassNames } from '../../components/Link/Link.styles';\nimport type { IDetailsRowStyleProps, IDetailsRowStyles, ICellStyleProps } from './DetailsRow.types';\nimport type { IStyle } from '../../Styling';\n\nexport const DetailsRowGlobalClassNames = {\n  root: 'ms-DetailsRow',\n  // TODO: in Fabric 7.0 lowercase the 'Compact' for consistency across other components.\n  compact: 'ms-DetailsList--Compact',\n  cell: 'ms-DetailsRow-cell',\n  cellAnimation: 'ms-DetailsRow-cellAnimation',\n  cellCheck: 'ms-DetailsRow-cellCheck',\n  check: 'ms-DetailsRow-check',\n  cellMeasurer: 'ms-DetailsRow-cellMeasurer',\n  listCellFirstChild: 'ms-List-cell:first-child',\n  isContentUnselectable: 'is-contentUnselectable',\n  isSelected: 'is-selected',\n  isCheckVisible: 'is-check-visible',\n  isRowHeader: 'is-row-header',\n  fields: 'ms-DetailsRow-fields',\n};\nconst IsFocusableSelector = \"[data-is-focusable='true']\";\n\nexport const DEFAULT_CELL_STYLE_PROPS: ICellStyleProps = {\n  cellLeftPadding: 12,\n  cellRightPadding: 8,\n  cellExtraRightPadding: 24,\n};\n\n// Source of default row heights to share.\nexport const DEFAULT_ROW_HEIGHTS = {\n  rowHeight: 42,\n  compactRowHeight: 32,\n};\n\n// Constant values\nconst values = {\n  ...DEFAULT_ROW_HEIGHTS,\n  rowVerticalPadding: 11,\n  compactRowVerticalPadding: 6,\n};\n\nexport const getDetailsRowStyles = (props: IDetailsRowStyleProps): IDetailsRowStyles => {\n  const {\n    theme,\n    isSelected,\n    canSelect,\n    droppingClassName,\n    isCheckVisible,\n    checkboxCellClassName,\n    compact,\n    className,\n    cellStyleProps = DEFAULT_CELL_STYLE_PROPS,\n    enableUpdateAnimations,\n    disabled,\n  } = props;\n\n  const { palette, fonts } = theme;\n  const { neutralPrimary, white, neutralSecondary, neutralLighter, neutralLight, neutralDark, neutralQuaternaryAlt } =\n    palette;\n  const { focusBorder, linkHovered: focusedLinkColor } = theme.semanticColors;\n\n  const classNames = getGlobalClassNames(DetailsRowGlobalClassNames, theme);\n\n  const colors = {\n    // Default\n    defaultHeaderText: neutralPrimary,\n    defaultMetaText: neutralSecondary,\n    defaultBackground: white,\n\n    // Default Hover\n    defaultHoverHeaderText: neutralDark,\n    defaultHoverMetaText: neutralPrimary,\n    defaultHoverBackground: neutralLighter,\n\n    // Selected\n    selectedHeaderText: neutralDark,\n    selectedMetaText: neutralPrimary,\n    selectedBackground: neutralLight,\n\n    // Selected Hover\n    selectedHoverHeaderText: neutralDark,\n    selectedHoverMetaText: neutralPrimary,\n    selectedHoverBackground: neutralQuaternaryAlt,\n\n    // Focus\n    focusHeaderText: neutralDark,\n    focusMetaText: neutralPrimary,\n    focusBackground: neutralLight,\n    focusHoverBackground: neutralQuaternaryAlt,\n  };\n\n  const rowHighContrastFocus = {\n    top: 2,\n    right: 2,\n    bottom: 2,\n    left: 2,\n  };\n\n  // Selected row styles\n  const selectedStyles: IStyle = [\n    getFocusStyle(theme, {\n      inset: -1,\n      borderColor: focusBorder,\n      outlineColor: white,\n      highContrastStyle: rowHighContrastFocus,\n      pointerEvents: 'none',\n    }),\n    classNames.isSelected,\n    {\n      color: colors.selectedMetaText,\n      background: colors.selectedBackground,\n      borderBottom: `1px solid ${white}`,\n      selectors: {\n        '&:before': {\n          position: 'absolute',\n          display: 'block',\n          top: -1,\n          height: 1,\n          bottom: 0,\n          left: 0,\n          right: 0,\n          content: '',\n          borderTop: `1px solid ${white}`,\n        },\n\n        [`.${classNames.cell} > .${LinkGlobalClassNames.root}`]: {\n          color: focusedLinkColor,\n          selectors: {\n            [HighContrastSelector]: {\n              color: 'HighlightText',\n            },\n          },\n        },\n\n        // Selected State hover\n        '&:hover': {\n          background: colors.selectedHoverBackground,\n          color: colors.selectedHoverMetaText,\n          selectors: {\n            // Selected State hover meta cell\n            [HighContrastSelector]: {\n              background: 'Highlight',\n              selectors: {\n                [`.${classNames.cell}`]: {\n                  color: 'HighlightText',\n                },\n                [`.${classNames.cell} > .${LinkGlobalClassNames.root}`]: {\n                  forcedColorAdjust: 'none',\n                  color: 'HighlightText',\n                },\n              },\n            },\n\n            // Selected State hover Header cell\n            [`.${classNames.isRowHeader}`]: {\n              color: colors.selectedHoverHeaderText,\n              selectors: {\n                [HighContrastSelector]: {\n                  color: 'HighlightText',\n                },\n              },\n            },\n          },\n        },\n\n        // Focus state\n        '&:focus': {\n          background: colors.focusBackground,\n          selectors: {\n            // Selected State hover meta cell\n            [`.${classNames.cell}`]: {\n              color: colors.focusMetaText,\n              selectors: {\n                [HighContrastSelector]: {\n                  color: 'HighlightText',\n                  selectors: {\n                    '> a': {\n                      color: 'HighlightText',\n                    },\n                  },\n                },\n              },\n            },\n\n            // Row header cell\n            [`.${classNames.isRowHeader}`]: {\n              color: colors.focusHeaderText,\n              selectors: {\n                [HighContrastSelector]: {\n                  color: 'HighlightText',\n                },\n              },\n            },\n\n            // Ensure high-contrast mode overrides default focus background\n            [HighContrastSelector]: {\n              background: 'Highlight',\n            },\n          },\n        },\n\n        [HighContrastSelector]: {\n          background: 'Highlight',\n          color: 'HighlightText',\n          ...getHighContrastNoAdjustStyle(),\n          selectors: {\n            a: {\n              color: 'HighlightText',\n            },\n          },\n        },\n\n        // Focus and hover state\n        '&:focus:hover': {\n          background: colors.focusHoverBackground,\n        },\n      },\n    },\n  ];\n\n  const cannotSelectStyles: IStyle = [\n    classNames.isContentUnselectable,\n    {\n      userSelect: 'none',\n      cursor: 'default',\n    },\n  ];\n\n  const rootCompactStyles: IStyle = {\n    minHeight: values.compactRowHeight,\n    border: 0,\n  };\n\n  const cellCompactStyles: IStyle = {\n    minHeight: values.compactRowHeight,\n    paddingTop: values.compactRowVerticalPadding,\n    paddingBottom: values.compactRowVerticalPadding,\n    paddingLeft: `${cellStyleProps.cellLeftPadding}px`,\n  };\n\n  const defaultCellStyles: IStyle = [\n    getFocusStyle(theme, { inset: -1 }),\n    classNames.cell,\n    {\n      display: 'inline-block',\n      position: 'relative',\n      boxSizing: 'border-box',\n      minHeight: values.rowHeight,\n      verticalAlign: 'top',\n      whiteSpace: 'nowrap',\n      overflow: 'hidden',\n      textOverflow: 'ellipsis',\n      paddingTop: values.rowVerticalPadding,\n      paddingBottom: values.rowVerticalPadding,\n      paddingLeft: `${cellStyleProps.cellLeftPadding}px`,\n      selectors: {\n        '& > button': {\n          maxWidth: '100%',\n        },\n\n        [IsFocusableSelector]: getFocusStyle(theme, { inset: -1, borderColor: neutralSecondary, outlineColor: white }),\n      },\n    },\n\n    isSelected && {\n      selectors: {\n        [HighContrastSelector]: {\n          background: 'Highlight',\n          color: 'HighlightText',\n          ...getHighContrastNoAdjustStyle(),\n        },\n      },\n    },\n\n    compact && cellCompactStyles,\n    disabled && { opacity: 0.5 },\n  ];\n\n  return {\n    root: [\n      classNames.root,\n      AnimationClassNames.fadeIn400,\n      droppingClassName,\n      theme.fonts.small,\n      isCheckVisible && classNames.isCheckVisible,\n      getFocusStyle(theme, { borderColor: focusBorder, outlineColor: white }),\n      {\n        borderBottom: `1px solid ${neutralLighter}`,\n        background: colors.defaultBackground,\n        color: colors.defaultMetaText,\n        // This ensures that the row always tries to consume is minimum width and does not compress.\n        display: 'inline-flex',\n        minWidth: '100%',\n        minHeight: values.rowHeight,\n        whiteSpace: 'nowrap',\n        padding: 0,\n        boxSizing: 'border-box',\n        verticalAlign: 'top',\n        textAlign: 'left',\n        selectors: {\n          [`.${classNames.listCellFirstChild} &:before`]: {\n            display: 'none',\n          },\n\n          '&:hover': {\n            background: colors.defaultHoverBackground,\n            color: colors.defaultHoverMetaText,\n            selectors: {\n              [`.${classNames.isRowHeader}`]: {\n                color: colors.defaultHoverHeaderText,\n              },\n\n              [`.${classNames.cell} > .${LinkGlobalClassNames.root}`]: {\n                color: focusedLinkColor,\n              },\n            },\n          },\n\n          [`&:hover .${classNames.check}`]: {\n            opacity: 1,\n          },\n\n          [`.${IsFocusVisibleClassName} &:focus .${classNames.check}`]: {\n            opacity: 1,\n          },\n\n          '.ms-GroupSpacer': {\n            flexShrink: 0,\n            flexGrow: 0,\n          },\n        },\n      },\n      isSelected && selectedStyles,\n      !canSelect && cannotSelectStyles,\n      compact && rootCompactStyles,\n      className,\n    ],\n\n    cellUnpadded: {\n      paddingRight: `${cellStyleProps.cellRightPadding}px`,\n    },\n\n    cellPadded: {\n      paddingRight: `${cellStyleProps.cellExtraRightPadding + cellStyleProps.cellRightPadding}px`,\n      selectors: {\n        [`&.${classNames.cellCheck}`]: {\n          paddingRight: 0,\n        },\n      },\n    },\n\n    cell: defaultCellStyles,\n    cellAnimation: enableUpdateAnimations && AnimationStyles.slideLeftIn40,\n    cellMeasurer: [\n      classNames.cellMeasurer,\n      {\n        overflow: 'visible',\n        whiteSpace: 'nowrap',\n      },\n    ],\n    checkCell: [\n      defaultCellStyles,\n      classNames.cellCheck,\n      checkboxCellClassName,\n      {\n        padding: 0,\n        // Ensure that the check cell covers the top border of the cell.\n        // This ensures the click target does not leave a spot which would\n        // cause other items to be deselected.\n        paddingTop: 1,\n        marginTop: -1,\n        flexShrink: 0,\n      },\n    ],\n    fields: [\n      classNames.fields,\n      {\n        display: 'flex',\n        alignItems: 'stretch',\n      },\n    ],\n    isRowHeader: [\n      classNames.isRowHeader,\n      {\n        color: colors.defaultHeaderText,\n        fontSize: fonts.medium.fontSize,\n      },\n      isSelected && {\n        color: colors.selectedHeaderText,\n        fontWeight: FontWeights.semibold,\n        selectors: {\n          [HighContrastSelector]: {\n            color: 'HighlightText',\n          },\n        },\n      },\n    ],\n    isMultiline: [\n      defaultCellStyles,\n      {\n        whiteSpace: 'normal',\n        wordBreak: 'break-word',\n        textOverflow: 'clip',\n      },\n    ],\n    check: [classNames.check],\n  };\n};\n", "import {\n  getFocusStyle,\n  focusClear,\n  getGlobalClassNames,\n  HighContrastSelector,\n  hiddenContentStyle,\n  getHighContrastNoAdjustStyle,\n} from '../../Styling';\nimport { getRTL, IsFocusVisibleClassName } from '../../Utilities';\nimport { DEFAULT_CELL_STYLE_PROPS } from './DetailsRow.styles';\n// For every group level there is a GroupSpacer added. Importing this const to have the source value in one place.\nimport { SPACER_WIDTH as GROUP_EXPANDER_WIDTH } from '../GroupedList/GroupSpacer';\nimport type { IDetailsHeaderStyleProps, IDetailsHeaderStyles } from './DetailsHeader.types';\nimport type { IStyle, ITheme } from '../../Styling';\nimport type { ICellStyleProps } from './DetailsRow.types';\n\nconst GlobalClassNames = {\n  tooltipHost: 'ms-TooltipHost',\n  root: 'ms-DetailsHeader',\n  cell: 'ms-DetailsHeader-cell',\n  cellIsCheck: 'ms-DetailsHeader-cellIsCheck',\n  collapseButton: 'ms-DetailsHeader-collapseButton',\n  isCollapsed: 'is-collapsed',\n  isAllSelected: 'is-allSelected',\n  isSelectAllHidden: 'is-selectAllHidden',\n  isResizingColumn: 'is-resizingColumn',\n  cellSizer: 'ms-DetailsHeader-cellSizer',\n  isResizing: 'is-resizing',\n  dropHintCircleStyle: 'ms-DetailsHeader-dropHintCircleStyle',\n  dropHintCaretStyle: 'ms-DetailsHeader-dropHintCaretStyle',\n  dropHintLineStyle: 'ms-DetailsHeader-dropHintLineStyle',\n  cellTitle: 'ms-DetailsHeader-cellTitle',\n  cellName: 'ms-DetailsHeader-cellName',\n  filterChevron: 'ms-DetailsHeader-filterChevron',\n  gripperBarVertical: 'ms-DetailsColumn-gripperBarVertical',\n  checkTooltip: 'ms-DetailsHeader-checkTooltip',\n  check: 'ms-DetailsHeader-check',\n};\n\nexport const HEADER_HEIGHT = 42;\n\nexport const getCellStyles = (props: { theme: ITheme; cellStyleProps?: ICellStyleProps }): IStyle => {\n  const { theme, cellStyleProps = DEFAULT_CELL_STYLE_PROPS } = props;\n  const { semanticColors } = theme;\n  const classNames = getGlobalClassNames(GlobalClassNames, theme);\n\n  return [\n    classNames.cell,\n    getFocusStyle(theme),\n    {\n      color: semanticColors.bodyText,\n      position: 'relative',\n      display: 'inline-block',\n      boxSizing: 'border-box',\n      padding: `0 ${cellStyleProps.cellRightPadding}px 0 ${cellStyleProps.cellLeftPadding}px`,\n      lineHeight: 'inherit',\n      margin: '0',\n      height: HEADER_HEIGHT,\n      verticalAlign: 'top',\n      whiteSpace: 'nowrap',\n      textOverflow: 'ellipsis',\n      textAlign: 'left',\n    },\n  ];\n};\n\nexport const getDetailsHeaderStyles = (props: IDetailsHeaderStyleProps): IDetailsHeaderStyles => {\n  const {\n    theme,\n    className,\n    isAllSelected,\n    isResizingColumn,\n    isSizing,\n    isAllCollapsed,\n    cellStyleProps = DEFAULT_CELL_STYLE_PROPS,\n  } = props;\n\n  const { semanticColors, palette, fonts } = theme;\n  const classNames = getGlobalClassNames(GlobalClassNames, theme);\n\n  const colors = {\n    iconForegroundColor: semanticColors.bodySubtext,\n    headerForegroundColor: semanticColors.bodyText,\n    headerBackgroundColor: semanticColors.bodyBackground,\n    resizerColor: palette.neutralTertiaryAlt,\n  };\n\n  const cellSizerFadeInStyles: IStyle = {\n    opacity: 1,\n    transition: 'opacity 0.3s linear',\n  };\n\n  const cellStyles = getCellStyles(props);\n\n  return {\n    root: [\n      classNames.root,\n      fonts.small,\n      {\n        display: 'inline-block',\n        background: colors.headerBackgroundColor,\n        position: 'relative',\n        minWidth: '100%',\n        verticalAlign: 'top',\n        height: HEADER_HEIGHT,\n        lineHeight: HEADER_HEIGHT,\n        whiteSpace: 'nowrap',\n        boxSizing: 'content-box',\n        paddingBottom: '1px',\n        paddingTop: '16px',\n        borderBottom: `1px solid ${semanticColors.bodyDivider}`,\n        cursor: 'default',\n        userSelect: 'none',\n        selectors: {\n          [`&:hover .${classNames.check}`]: {\n            opacity: 1,\n          },\n          [`& .${classNames.tooltipHost} .${classNames.checkTooltip}`]: {\n            display: 'block',\n          },\n        },\n      },\n      isAllSelected && classNames.isAllSelected,\n      isResizingColumn && classNames.isResizingColumn,\n      className,\n    ],\n\n    check: [\n      classNames.check,\n      {\n        height: HEADER_HEIGHT,\n      },\n      {\n        selectors: {\n          [`.${IsFocusVisibleClassName} &:focus`]: {\n            opacity: 1,\n          },\n        },\n      },\n    ],\n\n    cellWrapperPadded: {\n      paddingRight: cellStyleProps.cellExtraRightPadding + cellStyleProps.cellRightPadding,\n    },\n\n    cellIsCheck: [\n      cellStyles,\n      classNames.cellIsCheck,\n      {\n        position: 'relative',\n        padding: 0,\n        margin: 0,\n        display: 'inline-flex',\n        alignItems: 'center',\n        border: 'none',\n      },\n      isAllSelected && {\n        opacity: 1,\n      },\n    ],\n\n    cellIsGroupExpander: [\n      cellStyles,\n      {\n        display: 'inline-flex',\n        alignItems: 'center',\n        justifyContent: 'center',\n        fontSize: fonts.small.fontSize,\n        padding: 0,\n        border: 'none',\n        width: GROUP_EXPANDER_WIDTH, // align with GroupedList's first expandIcon cell width.\n        color: palette.neutralSecondary,\n        selectors: {\n          ':hover': {\n            backgroundColor: palette.neutralLighter,\n          },\n          ':active': {\n            backgroundColor: palette.neutralLight,\n          },\n        },\n      },\n    ],\n\n    cellIsActionable: {\n      selectors: {\n        ':hover': {\n          color: semanticColors.bodyText,\n          background: semanticColors.listHeaderBackgroundHovered,\n        },\n        ':active': {\n          background: semanticColors.listHeaderBackgroundPressed,\n        },\n      },\n    },\n    cellIsEmpty: {\n      textOverflow: 'clip',\n    },\n\n    cellSizer: [\n      classNames.cellSizer,\n      focusClear(),\n      {\n        display: 'inline-block',\n        position: 'relative',\n        cursor: 'ew-resize',\n        bottom: 0,\n        top: 0,\n        overflow: 'hidden',\n        height: 'inherit',\n        background: 'transparent',\n        zIndex: 1,\n        width: 16,\n        selectors: {\n          ':after': {\n            content: '\"\"',\n            position: 'absolute',\n            top: 0,\n            bottom: 0,\n            width: 1,\n            background: colors.resizerColor,\n            opacity: 0,\n            left: '50%',\n          },\n          ':focus:after': cellSizerFadeInStyles,\n          ':hover:after': cellSizerFadeInStyles,\n          [`&.${classNames.isResizing}:after`]: [\n            cellSizerFadeInStyles,\n            {\n              boxShadow: '0 0 5px 0 rgba(0, 0, 0, 0.4)',\n            },\n          ],\n        },\n      },\n    ],\n\n    cellIsResizing: classNames.isResizing,\n\n    cellSizerStart: {\n      margin: '0 -8px',\n    },\n\n    cellSizerEnd: {\n      margin: 0,\n      marginLeft: -16,\n    },\n\n    collapseButton: [\n      classNames.collapseButton,\n      {\n        transformOrigin: '50% 50%',\n        transition: 'transform .1s linear',\n      },\n      isAllCollapsed\n        ? [\n            classNames.isCollapsed,\n            {\n              transform: 'rotate(0deg)',\n            },\n          ]\n        : {\n            transform: getRTL(theme) ? 'rotate(-90deg)' : 'rotate(90deg)',\n          },\n    ],\n\n    checkTooltip: classNames.checkTooltip,\n\n    sizingOverlay: isSizing && {\n      position: 'absolute',\n      left: 0,\n      top: 0,\n      right: 0,\n      bottom: 0,\n      cursor: 'ew-resize',\n      background: 'rgba(255, 255, 255, 0)',\n      selectors: {\n        [HighContrastSelector]: {\n          background: 'transparent',\n          ...getHighContrastNoAdjustStyle(),\n        },\n      },\n    },\n\n    accessibleLabel: hiddenContentStyle,\n\n    dropHintCircleStyle: [\n      classNames.dropHintCircleStyle,\n      {\n        display: 'inline-block',\n        visibility: 'hidden',\n        position: 'absolute',\n        bottom: 0,\n        height: 9,\n        width: 9,\n        borderRadius: '50%',\n        marginLeft: -5,\n        top: 34,\n        overflow: 'visible',\n        zIndex: 10,\n        border: `1px solid ${palette.themePrimary}`,\n        background: palette.white,\n      },\n    ],\n\n    dropHintCaretStyle: [\n      classNames.dropHintCaretStyle,\n      {\n        display: 'none',\n        position: 'absolute',\n        top: -28,\n        left: -6.5,\n        fontSize: fonts.medium.fontSize,\n        color: palette.themePrimary,\n        overflow: 'visible',\n        zIndex: 10,\n      },\n    ],\n\n    dropHintLineStyle: [\n      classNames.dropHintLineStyle,\n      {\n        display: 'none',\n        position: 'absolute',\n        bottom: 0,\n        top: 0,\n        overflow: 'hidden',\n        height: 42,\n        width: 1,\n        background: palette.themePrimary,\n        zIndex: 10,\n      },\n    ],\n\n    dropHintStyle: {\n      display: 'inline-block',\n      position: 'absolute',\n    },\n  };\n};\n", "import { HighContrastSelector, getGlobalClassNames, IconFontSizes, getHighContrastNoAdjustStyle } from '../../Styling';\nimport { getRTL } from '../../Utilities';\nimport type { ICheckStyleProps, ICheckStyles } from './Check.types';\nimport type { IStyle } from '../../Styling';\n\nexport const CheckGlobalClassNames = {\n  root: 'ms-Check',\n  circle: 'ms-Check-circle',\n  check: 'ms-Check-check',\n  /** Must be manually applied to the parent element of the check. */\n  checkHost: 'ms-Check-checkHost',\n};\n\nexport const getStyles = (props: ICheckStyleProps): ICheckStyles => {\n  // eslint-disable-next-line deprecation/deprecation\n  const { height = props.checkBoxHeight || '18px', checked, className, theme } = props;\n\n  const { palette, semanticColors, fonts } = theme;\n  const isRTL = getRTL(theme);\n\n  const classNames = getGlobalClassNames(CheckGlobalClassNames, theme);\n\n  const sharedCircleCheck: IStyle = {\n    fontSize: height,\n    position: 'absolute',\n    left: 0,\n    top: 0,\n    width: height,\n    height,\n    textAlign: 'center',\n    // inline-flex prevents the check from shifting with custom line height styles\n    display: 'inline-flex',\n    alignItems: 'center',\n    justifyContent: 'center',\n    verticalAlign: 'middle',\n  };\n\n  return {\n    root: [\n      classNames.root,\n      fonts.medium,\n      {\n        // lineHeight currently needs to be a string to output without 'px'\n        lineHeight: '1',\n        width: height,\n        height,\n        verticalAlign: 'top',\n        position: 'relative',\n        userSelect: 'none',\n\n        selectors: {\n          ':before': {\n            content: '\"\"',\n            position: 'absolute',\n            top: '1px',\n            right: '1px',\n            bottom: '1px',\n            left: '1px',\n            borderRadius: '50%',\n            opacity: 1,\n            background: semanticColors.bodyBackground,\n          },\n\n          [`.${classNames.checkHost}:hover &, .${classNames.checkHost}:focus &, &:hover, &:focus`]: {\n            opacity: 1,\n          },\n        },\n      },\n\n      checked && [\n        'is-checked',\n        {\n          selectors: {\n            ':before': {\n              background: palette.themePrimary,\n              opacity: 1,\n              selectors: {\n                [HighContrastSelector]: {\n                  background: 'Window',\n                },\n              },\n            },\n          },\n        },\n      ],\n      className,\n    ],\n\n    circle: [\n      classNames.circle,\n      sharedCircleCheck,\n\n      {\n        color: palette.neutralSecondary,\n\n        selectors: {\n          [HighContrastSelector]: {\n            color: 'WindowText',\n          },\n        },\n      },\n\n      checked && {\n        color: palette.white,\n      },\n    ],\n\n    check: [\n      classNames.check,\n      sharedCircleCheck,\n\n      {\n        opacity: 0,\n        color: palette.neutralSecondary,\n        fontSize: IconFontSizes.medium,\n        left: isRTL ? '-0.5px' : '.5px', // for centering the check icon inside the circle.\n        top: '-1px', // the check is slightly lower than center compared to the circle.\n\n        selectors: {\n          ':hover': {\n            opacity: 1,\n          },\n\n          [HighContrastSelector]: {\n            ...getHighContrastNoAdjustStyle(),\n          },\n        },\n      },\n\n      checked && {\n        opacity: 1,\n        color: palette.white,\n        fontWeight: 900,\n\n        selectors: {\n          [HighContrastSelector]: {\n            border: 'none',\n            color: 'WindowText',\n          },\n        },\n      },\n    ],\n\n    checkHost: classNames.checkHost,\n  };\n};\n", "import { getGlobalClassNames, getFocusStyle } from '../../Styling';\nimport { DEFAULT_ROW_HEIGHTS } from './DetailsRow.styles';\nimport { HEADER_HEIGHT } from './DetailsHeader.styles';\nimport { CheckGlobalClassNames } from '../../components/Check/Check.styles';\nimport type { IDetailsRowCheckStyleProps, IDetailsRowCheckStyles } from './DetailsRowCheck.types';\n\nconst GlobalClassNames = {\n  root: 'ms-DetailsRow-check',\n  isDisabled: 'ms-DetailsRow-check--isDisabled',\n  isHeader: 'ms-DetailsRow-check--isHeader',\n};\n\nexport const CHECK_CELL_WIDTH = 48;\n\nexport const getDetailsRowCheckStyles = (props: IDetailsRowCheckStyleProps): IDetailsRowCheckStyles => {\n  const { theme, className, isHeader, selected, anySelected, canSelect, compact, isVisible } = props;\n  const classNames = getGlobalClassNames(GlobalClassNames, theme);\n  const { rowHeight, compactRowHeight } = DEFAULT_ROW_HEIGHTS;\n\n  const height = isHeader ? HEADER_HEIGHT : compact ? compactRowHeight : rowHeight;\n\n  const isCheckVisible = isVisible || selected || anySelected;\n\n  return {\n    root: [classNames.root, className],\n\n    check: [\n      !canSelect && classNames.isDisabled,\n      isHeader && classNames.isHeader,\n      getFocusStyle(theme),\n      theme.fonts.small,\n      CheckGlobalClassNames.checkHost,\n      {\n        display: 'flex',\n        alignItems: 'center',\n        justifyContent: 'center',\n        cursor: 'default',\n        boxSizing: 'border-box',\n        verticalAlign: 'top',\n        background: 'none',\n        backgroundColor: 'transparent',\n        border: 'none',\n        opacity: isCheckVisible ? 1 : 0,\n        height,\n        width: CHECK_CELL_WIDTH,\n        padding: 0,\n        margin: 0,\n      },\n    ],\n\n    isDisabled: [],\n  };\n};\n", "import { getGlobalClassNames, getFocusStyle, AnimationVariables, FontWeights, IconFontSizes } from '../../Styling';\nimport { getRTL, IsFocusVisibleClassName } from '../../Utilities';\nimport { DEFAULT_CELL_STYLE_PROPS } from '../DetailsList/DetailsRow.styles';\nimport { CHECK_CELL_WIDTH } from '../DetailsList/DetailsRowCheck.styles';\n// For every group level there is a GroupSpacer added. Importing this const to have the source value in one place.\nimport { SPACER_WIDTH as EXPAND_BUTTON_WIDTH } from './GroupSpacer';\nimport type { IGroupHeaderStyleProps, IGroupHeaderStyles } from './GroupHeader.types';\nimport type { IStyle } from '../../Styling';\n\nconst GlobalClassNames = {\n  root: 'ms-GroupHeader',\n  compact: 'ms-GroupHeader--compact',\n  check: 'ms-GroupHeader-check',\n  dropIcon: 'ms-GroupHeader-dropIcon',\n  expand: 'ms-GroupHeader-expand',\n  isCollapsed: 'is-collapsed',\n  title: 'ms-GroupHeader-title',\n  isSelected: 'is-selected',\n  iconTag: 'ms-Icon--Tag',\n  group: 'ms-GroupedList-group',\n  isDropping: 'is-dropping',\n};\n\nconst beziers = {\n  easeOutCirc: 'cubic-bezier(0.075, 0.820, 0.165, 1.000)',\n  easeOutSine: 'cubic-bezier(0.390, 0.575, 0.565, 1.000)',\n  easeInBack: 'cubic-bezier(0.600, -0.280, 0.735, 0.045)',\n};\n\nconst DEFAULT_GROUP_HEADER_HEIGHT = 48;\nconst COMPACT_GROUP_HEADER_HEIGHT = 40;\n\nexport const getStyles = (props: IGroupHeaderStyleProps): IGroupHeaderStyles => {\n  const { theme, className, selected, isCollapsed, compact } = props;\n  // padding from the source to align GroupHeader title with DetailsRow's first cell.\n  const { cellLeftPadding } = DEFAULT_CELL_STYLE_PROPS;\n  const finalRowHeight = compact ? COMPACT_GROUP_HEADER_HEIGHT : DEFAULT_GROUP_HEADER_HEIGHT;\n\n  const { semanticColors, palette, fonts } = theme;\n\n  const classNames = getGlobalClassNames(GlobalClassNames, theme!);\n\n  const checkExpandResetStyles: IStyle = [\n    getFocusStyle(theme),\n    {\n      cursor: 'default',\n      background: 'none',\n      backgroundColor: 'transparent',\n      border: 'none',\n      padding: 0, // cancel default <button> padding\n    },\n  ];\n\n  return {\n    root: [\n      classNames.root,\n      getFocusStyle(theme),\n      theme.fonts.medium,\n      {\n        // keep the border for height but color it so it's invisible.\n        borderBottom: `1px solid ${semanticColors.listBackground}`,\n        cursor: 'default',\n        userSelect: 'none',\n        selectors: {\n          ':hover': {\n            background: semanticColors.listItemBackgroundHovered,\n            color: semanticColors.actionLinkHovered,\n          },\n          [`&:hover .${classNames.check}`]: {\n            opacity: 1,\n          },\n          [`.${IsFocusVisibleClassName} &:focus .${classNames.check}`]: {\n            opacity: 1,\n          },\n          [`:global(.${classNames.group}.${classNames.isDropping})`]: {\n            selectors: {\n              [`& > .${classNames.root} .${classNames.dropIcon}`]: {\n                transition:\n                  `transform ${AnimationVariables.durationValue4} ${beziers.easeOutCirc} ` +\n                  `opacity ${AnimationVariables.durationValue1} ${beziers.easeOutSine}`,\n                transitionDelay: AnimationVariables.durationValue3,\n                opacity: 1,\n                transform: `rotate(0.2deg) scale(1);`, // rotation prevents jittery motion in IE\n              },\n\n              [`.${classNames.check}`]: {\n                opacity: 0,\n              },\n            },\n          },\n        },\n      },\n      selected && [\n        classNames.isSelected,\n        {\n          background: semanticColors.listItemBackgroundChecked,\n          selectors: {\n            ':hover': {\n              background: semanticColors.listItemBackgroundCheckedHovered,\n            },\n            [`${classNames.check}`]: {\n              opacity: 1,\n            },\n          },\n        },\n      ],\n      compact && [classNames.compact, { border: 'none' }],\n      className,\n    ],\n    groupHeaderContainer: [\n      {\n        display: 'flex',\n        alignItems: 'center',\n        height: finalRowHeight,\n      },\n    ],\n    headerCount: [\n      {\n        padding: '0px 4px',\n      },\n    ],\n    check: [\n      classNames.check,\n      checkExpandResetStyles,\n      {\n        display: 'flex',\n        alignItems: 'center',\n        justifyContent: 'center',\n        // paddingTop and marginTop brought from the DetailsRow.styles.ts with explanation below.\n        // Ensure that the check cell covers the top border of the cell.\n        // This ensures the click target does not leave a spot which would\n        // cause other items to be deselected.\n        paddingTop: 1,\n        marginTop: -1,\n        opacity: 0,\n        width: CHECK_CELL_WIDTH,\n        height: finalRowHeight,\n        selectors: {\n          [`.${IsFocusVisibleClassName} &:focus`]: {\n            opacity: 1,\n          },\n        },\n      },\n    ],\n    expand: [\n      classNames.expand,\n      checkExpandResetStyles,\n      {\n        display: 'flex',\n        flexShrink: 0,\n        alignItems: 'center',\n        justifyContent: 'center',\n        fontSize: fonts.small.fontSize,\n        width: EXPAND_BUTTON_WIDTH,\n        height: finalRowHeight,\n        color: selected ? palette.neutralPrimary : palette.neutralSecondary,\n        selectors: {\n          ':hover': {\n            backgroundColor: selected ? palette.neutralQuaternary : palette.neutralLight,\n          },\n          ':active': {\n            backgroundColor: selected ? palette.neutralTertiaryAlt : palette.neutralQuaternaryAlt,\n          },\n        },\n      },\n    ],\n    expandIsCollapsed: [\n      isCollapsed\n        ? [\n            classNames.isCollapsed,\n            {\n              transform: 'rotate(0deg)',\n              transformOrigin: '50% 50%',\n              transition: 'transform .1s linear',\n            },\n          ]\n        : {\n            transform: getRTL(theme) ? 'rotate(-90deg)' : 'rotate(90deg)',\n            transformOrigin: '50% 50%',\n            transition: 'transform .1s linear',\n          },\n    ],\n    title: [\n      classNames.title,\n      {\n        paddingLeft: cellLeftPadding,\n        fontSize: compact ? fonts.medium.fontSize : fonts.mediumPlus.fontSize,\n        fontWeight: isCollapsed ? FontWeights.regular : FontWeights.semibold,\n        cursor: 'pointer',\n        outline: 0,\n        whiteSpace: 'nowrap',\n        textOverflow: 'ellipsis',\n        overflow: 'hidden',\n      },\n    ],\n    dropIcon: [\n      classNames.dropIcon,\n      {\n        position: 'absolute',\n        left: -26,\n        fontSize: IconFontSizes.large,\n        color: palette.neutralSecondary,\n        transition:\n          `transform ${AnimationVariables.durationValue2} ${beziers.easeInBack}, ` +\n          `opacity ${AnimationVariables.durationValue4} ${beziers.easeOutSine}`,\n        opacity: 0,\n        transform: 'rotate(0.2deg) scale(0.65)', // rotation prevents jittery motion in IE\n        transformOrigin: '10px 10px',\n        selectors: {\n          [`:global(.${classNames.iconTag})`]: {\n            position: 'absolute',\n          },\n        },\n      },\n    ],\n  };\n};\n", "import * as React from 'react';\nimport { composeRenderFunction, classNamesFunction, getId, getRTL, getRTLSafeKeyCode, KeyCodes } from '../../Utilities';\nimport { SelectionMode } from '../../Selection';\nimport { Check } from '../../Check';\nimport { Icon } from '../../Icon';\nimport { GroupSpacer } from './GroupSpacer';\nimport { Spinner } from '../../Spinner';\nimport { CHECK_CELL_WIDTH } from '../DetailsList/DetailsRowCheck.styles';\nimport type { IProcessedStyleSet, ITheme } from '../../Styling';\nimport type {\n  IGroupHeaderStyleProps,\n  IGroupHeaderStyles,\n  IGroupHeaderProps,\n  IGroupHeaderCheckboxProps,\n} from './GroupHeader.types';\n\nconst getClassNames = classNamesFunction<IGroupHeaderStyleProps, IGroupHeaderStyles>();\n\nexport interface IGroupHeaderState {\n  isCollapsed: boolean;\n  isLoadingVisible: boolean;\n}\n\nexport class GroupHeaderBase extends React.Component<IGroupHeaderProps, IGroupHeaderState> {\n  public static defaultProps: IGroupHeaderProps = {\n    expandButtonProps: { 'aria-label': 'expand collapse group' },\n  };\n\n  private _classNames: IProcessedStyleSet<IGroupHeaderStyles>;\n  private _id: string;\n\n  public static getDerivedStateFromProps(\n    nextProps: IGroupHeaderProps,\n    previousState: IGroupHeaderState,\n  ): IGroupHeaderState {\n    if (nextProps.group) {\n      const newCollapsed = nextProps.group.isCollapsed;\n      const isGroupLoading = nextProps.isGroupLoading;\n      const newLoadingVisible = !newCollapsed && isGroupLoading && isGroupLoading(nextProps.group);\n\n      return {\n        ...previousState,\n        isCollapsed: newCollapsed || false,\n        isLoadingVisible: newLoadingVisible || false,\n      };\n    }\n\n    return previousState;\n  }\n\n  constructor(props: IGroupHeaderProps) {\n    super(props);\n\n    this._id = getId('GroupHeader');\n\n    this.state = {\n      isCollapsed: (this.props.group && this.props.group.isCollapsed) as boolean,\n      isLoadingVisible: false,\n    };\n  }\n\n  public render(): JSX.Element | null {\n    const {\n      group,\n      groupLevel = 0,\n      viewport,\n      selectionMode,\n      loadingText,\n      // eslint-disable-next-line deprecation/deprecation\n      isSelected = false,\n      selected = false,\n      indentWidth,\n      onRenderGroupHeaderCheckbox,\n      isCollapsedGroupSelectVisible = true,\n      expandButtonProps,\n      expandButtonIcon,\n      selectAllButtonProps,\n      theme,\n      styles,\n      className,\n      compact,\n      ariaLevel,\n      ariaPosInSet,\n      ariaSetSize,\n      ariaRowIndex,\n      useFastIcons,\n    } = this.props;\n\n    const onRenderTitle = this.props.onRenderTitle\n      ? composeRenderFunction(this.props.onRenderTitle, this._onRenderTitle)\n      : this._onRenderTitle;\n\n    const defaultCheckboxRender = useFastIcons ? this._fastDefaultCheckboxRender : this._defaultCheckboxRender;\n\n    const onRenderCheckbox = onRenderGroupHeaderCheckbox\n      ? composeRenderFunction(onRenderGroupHeaderCheckbox, defaultCheckboxRender)\n      : defaultCheckboxRender;\n\n    const { isCollapsed, isLoadingVisible } = this.state;\n\n    const canSelectGroup = selectionMode === SelectionMode.multiple;\n    const isSelectionCheckVisible = canSelectGroup && (isCollapsedGroupSelectVisible || !(group && group.isCollapsed));\n    const currentlySelected = selected || isSelected;\n\n    const isRTL = getRTL(theme);\n\n    this._classNames = getClassNames(styles, {\n      theme: theme!,\n      className,\n      selected: currentlySelected,\n      isCollapsed,\n      compact,\n    });\n\n    if (!group) {\n      return null;\n    }\n\n    return (\n      <div\n        className={this._classNames.root}\n        style={viewport ? { minWidth: viewport.width } : {}}\n        role=\"row\"\n        aria-level={ariaLevel}\n        aria-setsize={ariaSetSize}\n        aria-posinset={ariaPosInSet}\n        aria-rowindex={ariaRowIndex}\n        data-is-focusable={true}\n        onKeyUp={this._onKeyUp}\n        aria-label={group.ariaLabel}\n        aria-labelledby={group.ariaLabel ? undefined : this._id}\n        aria-expanded={!this.state.isCollapsed}\n        aria-selected={canSelectGroup ? currentlySelected : undefined}\n        data-selection-index={group.startIndex}\n        data-selection-span={group.count}\n      >\n        <div className={this._classNames.groupHeaderContainer} role=\"presentation\">\n          {isSelectionCheckVisible ? (\n            <div role=\"gridcell\">\n              <button\n                data-is-focusable={false}\n                type=\"button\"\n                className={this._classNames.check}\n                role=\"checkbox\"\n                id={`${this._id}-check`}\n                aria-checked={currentlySelected}\n                aria-labelledby={`${this._id}-check ${this._id}`}\n                data-selection-toggle={true}\n                {...selectAllButtonProps}\n              >\n                {onRenderCheckbox({ checked: currentlySelected, theme }, onRenderCheckbox)}\n              </button>\n            </div>\n          ) : (\n            // To make the group header align properly with the column headers, this spacer\n            // needs to be the same width as the check cell in the column header.\n            selectionMode !== SelectionMode.none && <GroupSpacer indentWidth={CHECK_CELL_WIDTH} count={1} />\n          )}\n\n          <GroupSpacer indentWidth={indentWidth} count={groupLevel!} />\n\n          <div className={this._classNames.dropIcon} role=\"presentation\">\n            <Icon iconName=\"Tag\" />\n          </div>\n          <div role=\"gridcell\">\n            <button\n              data-is-focusable={false}\n              data-selection-disabled={true}\n              type=\"button\"\n              className={this._classNames.expand}\n              onClick={this._onToggleClick}\n              aria-expanded={!this.state.isCollapsed}\n              {...expandButtonProps}\n            >\n              <Icon\n                className={this._classNames.expandIsCollapsed}\n                iconName={expandButtonIcon || (isRTL ? 'ChevronLeftMed' : 'ChevronRightMed')}\n              />\n            </button>\n          </div>\n\n          {onRenderTitle(this.props)}\n          {isLoadingVisible && <Spinner label={loadingText} />}\n        </div>\n      </div>\n    );\n  }\n\n  private _toggleCollapse = () => {\n    const { group, onToggleCollapse, isGroupLoading } = this.props;\n    const { isCollapsed } = this.state;\n\n    const newCollapsed = !isCollapsed;\n    const newLoadingVisible = !newCollapsed && isGroupLoading && isGroupLoading(group!);\n\n    this.setState({\n      isCollapsed: newCollapsed,\n      isLoadingVisible: newLoadingVisible as boolean,\n    });\n    if (onToggleCollapse) {\n      onToggleCollapse(group!);\n    }\n  };\n\n  private _onKeyUp = (ev: React.KeyboardEvent<HTMLElement>): void => {\n    const { group, onGroupHeaderKeyUp } = this.props;\n\n    if (onGroupHeaderKeyUp) {\n      onGroupHeaderKeyUp(ev, group);\n    }\n\n    if (!ev.defaultPrevented) {\n      // eslint-disable-next-line deprecation/deprecation\n      const shouldOpen = this.state.isCollapsed && ev.which === getRTLSafeKeyCode(KeyCodes.right, this.props.theme);\n      // eslint-disable-next-line deprecation/deprecation\n      const shouldClose = !this.state.isCollapsed && ev.which === getRTLSafeKeyCode(KeyCodes.left, this.props.theme);\n      if (shouldClose || shouldOpen) {\n        this._toggleCollapse();\n        ev.stopPropagation();\n        ev.preventDefault();\n      }\n    }\n  };\n\n  private _onToggleClick = (ev: React.MouseEvent<HTMLElement>): void => {\n    this._toggleCollapse();\n    ev.stopPropagation();\n    ev.preventDefault();\n  };\n\n  private _onHeaderClick = (): void => {\n    const { group, onGroupHeaderClick } = this.props;\n\n    if (onGroupHeaderClick) {\n      onGroupHeaderClick(group!);\n    }\n  };\n\n  private _defaultCheckboxRender(checkboxProps: IGroupHeaderCheckboxProps) {\n    return <Check checked={checkboxProps.checked} />;\n  }\n\n  private _fastDefaultCheckboxRender(checkboxProps: IGroupHeaderCheckboxProps) {\n    return <FastCheck theme={checkboxProps.theme} checked={checkboxProps.checked} />;\n  }\n\n  private _onRenderTitle = (props: IGroupHeaderProps): JSX.Element | null => {\n    const { group } = props;\n\n    if (!group) {\n      return null;\n    }\n\n    const onRenderName = props.onRenderName\n      ? composeRenderFunction(props.onRenderName, this._onRenderName)\n      : this._onRenderName;\n\n    return (\n      <div\n        className={this._classNames.title}\n        id={this._id}\n        onClick={this._onHeaderClick}\n        role=\"gridcell\"\n        aria-colspan={this.props.ariaColSpan}\n        data-selection-invoke={true}\n      >\n        {onRenderName(props)}\n      </div>\n    );\n  };\n\n  private _onRenderName = (props: IGroupHeaderProps): JSX.Element | null => {\n    const { group } = props;\n\n    if (!group) {\n      return null;\n    }\n\n    return (\n      <>\n        <span>{group.name}</span>\n        {\n          // hasMoreData flag is set when grouping is throttled by SPO server which in turn resorts to regular\n          // sorting to simulate grouping behaviors, in which case group count is the number of items returned\n          // so far. That's the reason we need to use \"+\" to show we might have more items than count\n          // indicates.\n        }\n        <span className={this._classNames.headerCount}>\n          ({group.count}\n          {group.hasMoreData && '+'})\n        </span>\n      </>\n    );\n  };\n}\n\nconst FastCheck = React.memo((props: { theme?: ITheme; checked?: boolean; className?: string }) => {\n  return <Check theme={props.theme} checked={props.checked} className={props.className} useFastIcons />;\n});\n", "import * as React from 'react';\nimport { Icon, FontIcon } from '../../Icon';\nimport { classNamesFunction } from '../../Utilities';\nimport type { ICheckProps, ICheckStyleProps, ICheckStyles } from './Check.types';\n\nconst getClassNames = classNamesFunction<ICheckStyleProps, ICheckStyles>();\n\nexport const CheckBase: React.FunctionComponent<ICheckProps> = React.forwardRef<HTMLDivElement, ICheckProps>(\n  (props, ref) => {\n    const { checked = false, className, theme, styles, useFastIcons = true } = props;\n\n    const classNames = getClassNames(styles!, { theme: theme!, className, checked });\n    const IconComponent = useFastIcons ? FontIcon : Icon;\n\n    return (\n      <div className={classNames.root} ref={ref}>\n        <IconComponent iconName=\"CircleRing\" className={classNames.circle} />\n        <IconComponent iconName=\"StatusCircleCheckmark\" className={classNames.check} />\n      </div>\n    );\n  },\n);\nCheckBase.displayName = 'CheckBase';\n", "import * as React from 'react';\nimport { styled } from '../../Utilities';\nimport { CheckBase } from './Check.base';\nimport { getStyles } from './Check.styles';\nimport type { ICheckProps, ICheckStyleProps, ICheckStyles } from './Check.types';\n\nexport const Check: React.FunctionComponent<ICheckProps> = styled<ICheckProps, ICheckStyleProps, ICheckStyles>(\n  CheckBase,\n  getStyles,\n  undefined,\n  {\n    scope: 'Check',\n  },\n  true,\n);\n", "import * as React from 'react';\nimport { SpinnerType, SpinnerSize } from './Spinner.types';\nimport { classNamesFunction, DelayedRender, getNativeProps, divProperties } from '../../Utilities';\nimport type { ISpinnerProps, ISpinnerStyleProps, ISpinnerStyles } from './Spinner.types';\n\nconst getClassNames = classNamesFunction<ISpinnerStyleProps, ISpinnerStyles>();\n\nexport class SpinnerBase extends React.Component<ISpinnerProps, any> {\n  public static defaultProps: ISpinnerProps = {\n    size: SpinnerSize.medium,\n    ariaLive: 'polite',\n    labelPosition: 'bottom',\n  };\n\n  public render() {\n    // eslint-disable-next-line deprecation/deprecation\n    const { type, size, ariaLabel, ariaLive, styles, label, theme, className, labelPosition } = this.props;\n    const statusMessage = ariaLabel;\n    const nativeProps = getNativeProps<React.HTMLAttributes<HTMLDivElement>>(this.props, divProperties, ['size']);\n\n    // SpinnerType is deprecated. If someone is still using this property, rather than putting the SpinnerType into the\n    // ISpinnerStyleProps, we'll map SpinnerType to its equivalent SpinnerSize and pass that in. Once SpinnerType\n    // finally goes away we should delete this.\n    let styleSize = size;\n    if (styleSize === undefined && type !== undefined) {\n      // eslint-disable-next-line deprecation/deprecation\n      styleSize = type === SpinnerType.large ? SpinnerSize.large : SpinnerSize.medium;\n    }\n\n    const classNames = getClassNames(styles!, {\n      theme: theme!,\n      size: styleSize,\n      className,\n      labelPosition,\n    });\n\n    return (\n      <div {...nativeProps} className={classNames.root}>\n        <div className={classNames.circle} />\n        {label && <div className={classNames.label}>{label}</div>}\n        {statusMessage && (\n          <div role=\"status\" aria-live={ariaLive}>\n            <DelayedRender>\n              <div className={classNames.screenReaderText}>{statusMessage}</div>\n            </DelayedRender>\n          </div>\n        )}\n      </div>\n    );\n  }\n}\n", "import * as React from 'react';\nimport type { ITheme, IStyle } from '../../Styling';\nimport type { IRefObject, IStyleFunctionOrObject } from '../../Utilities';\n\n/**\n * {@docCategory Spinner}\n */\nexport interface ISpinner {}\n\n/**\n * Spinner component props.\n * {@docCategory Spinner}\n */\nexport interface ISpinnerProps extends React.HTMLAttributes<HTMLElement> {\n  /**\n   * Optional callback to access the ISpinner interface. Use this instead of ref for accessing\n   * the public methods and properties of the component.\n   */\n  componentRef?: IRefObject<ISpinner>;\n\n  /**\n   * @deprecated Use `size` instead. Will be removed at \\>= 2.0.0.\n   */\n  // eslint-disable-next-line deprecation/deprecation\n  type?: SpinnerType;\n\n  /**\n   * The size of Spinner to render.\n   * @defaultvalue SpinnerType.medium\n   */\n  size?: SpinnerSize;\n\n  /**\n   * The label to show next to the Spinner. Label updates will be announced to the screen readers.\n   * Use ariaLive to control politeness level.\n   */\n  label?: string;\n\n  /**\n   * Additional CSS class(es) to apply to the Spinner.\n   */\n  className?: string;\n\n  /**\n   * Politeness setting for label update announcement.\n   * @defaultvalue polite\n   */\n  ariaLive?: 'assertive' | 'polite' | 'off';\n\n  /**\n   * Alternative status label for screen reader\n   */\n  ariaLabel?: string;\n\n  /**\n   * Theme (provided through customization.)\n   */\n  theme?: ITheme;\n\n  /**\n   * Call to provide customized styling that will layer on top of the variant rules.\n   */\n  styles?: IStyleFunctionOrObject<ISpinnerStyleProps, ISpinnerStyles>;\n\n  /**\n   * The position of the label in regards of the spinner animation.\n   * @defaultvalue SpinnerLabelPosition.bottom\n   */\n  labelPosition?: SpinnerLabelPosition;\n}\n\n/**\n * Possible variations of the spinner circle size.\n * {@docCategory Spinner}\n */\nexport enum SpinnerSize {\n  /**\n   * 12px Spinner diameter\n   */\n  xSmall = 0,\n\n  /**\n   * 16px Spinner diameter\n   */\n  small = 1,\n\n  /**\n   * 20px Spinner diameter\n   */\n  medium = 2,\n\n  /**\n   * 28px Spinner diameter\n   */\n  large = 3,\n}\n\n/**\n * Possible locations of the label in regards to the spinner\n * {@docCategory Spinner}\n */\nexport type SpinnerLabelPosition = 'top' | 'right' | 'bottom' | 'left';\n\n/**\n * @deprecated Use `SpinnerSize` instead. Will be removed at \\>= 2.0.0.\n * {@docCategory Spinner}\n */\nexport enum SpinnerType {\n  /**\n   * @deprecated Use `SpinnerSize.medium` instead. Will be removed at \\>= 2.0.0.\n   */\n  normal = 0,\n\n  /**\n   * @deprecated Use `SpinnerSize.large` instead. Will be removed at \\>= 2.0.0.\n   */\n  large = 1,\n}\n\n/**\n * The props needed to construct styles.\n * This represents the simplified set of immutable things which control the class names.\n * {@docCategory Spinner}\n */\nexport interface ISpinnerStyleProps {\n  /** Theme provided by High-Order Component. */\n  theme: ITheme;\n\n  /** Size of the spinner animation. */\n  size?: SpinnerSize;\n\n  /** CSS class name for the component attached to the root stylable area. */\n  className?: string;\n\n  /** Position of the label in regards to the spinner animation. */\n  labelPosition?: SpinnerLabelPosition;\n}\n\n/**\n * Represents the stylable areas of the control.\n * {@docCategory Spinner}\n */\nexport interface ISpinnerStyles {\n  /** Styles for the root element. Refers to the wrapper containing both the circle and the label. */\n  root?: IStyle;\n\n  /** Styles for the spinner circle animation. */\n  circle?: IStyle;\n\n  /** Styles for the label accompanying the circle. */\n  label?: IStyle;\n\n  /** Styles for the hidden helper element to aid with screen readers. */\n  screenReaderText?: IStyle;\n}\n", "import { SpinnerSize } from './Spinner.types';\nimport {\n  hiddenContentStyle,\n  keyframes,\n  HighContrastSelector,\n  getGlobalClassNames,\n  getHighContrastNoAdjustStyle,\n} from '../../Styling';\nimport { memoizeFunction } from '../../Utilities';\nimport type { ISpinnerStyleProps, ISpinnerStyles } from './Spinner.types';\n\nconst GlobalClassNames = {\n  root: 'ms-Spinner',\n  circle: 'ms-Spinner-circle',\n  label: 'ms-Spinner-label',\n};\n\nconst spinAnimation = memoizeFunction(() =>\n  keyframes({\n    '0%': {\n      transform: 'rotate(0deg)',\n    },\n    '100%': {\n      transform: 'rotate(360deg)',\n    },\n  }),\n);\n\nexport const getStyles = (props: ISpinnerStyleProps): ISpinnerStyles => {\n  const { theme, size, className, labelPosition } = props;\n\n  const { palette } = theme;\n\n  const classNames = getGlobalClassNames(GlobalClassNames, theme);\n\n  return {\n    root: [\n      classNames.root,\n      {\n        display: 'flex',\n        flexDirection: 'column',\n        alignItems: 'center',\n        justifyContent: 'center',\n      },\n      labelPosition === 'top' && {\n        flexDirection: 'column-reverse',\n      },\n      labelPosition === 'right' && {\n        flexDirection: 'row',\n      },\n      labelPosition === 'left' && {\n        flexDirection: 'row-reverse',\n      },\n      className,\n    ],\n    circle: [\n      classNames.circle,\n      {\n        boxSizing: 'border-box',\n        borderRadius: '50%',\n        border: '1.5px solid ' + palette.themeLight,\n        borderTopColor: palette.themePrimary,\n        animationName: spinAnimation(),\n        animationDuration: '1.3s',\n        animationIterationCount: 'infinite',\n        animationTimingFunction: 'cubic-bezier(.53,.21,.29,.67)',\n        selectors: {\n          [HighContrastSelector]: {\n            borderTopColor: 'Highlight',\n            ...getHighContrastNoAdjustStyle(),\n          },\n        },\n      },\n      size === SpinnerSize.xSmall && [\n        'ms-Spinner--xSmall',\n        {\n          width: 12,\n          height: 12,\n        },\n      ],\n      size === SpinnerSize.small && [\n        'ms-Spinner--small',\n        {\n          width: 16,\n          height: 16,\n        },\n      ],\n      size === SpinnerSize.medium && [\n        'ms-Spinner--medium',\n        {\n          width: 20,\n          height: 20,\n        },\n      ],\n      size === SpinnerSize.large && [\n        'ms-Spinner--large',\n        {\n          width: 28,\n          height: 28,\n        },\n      ],\n    ],\n    label: [\n      classNames.label,\n      theme.fonts.small,\n      {\n        color: palette.themePrimary,\n        margin: '8px 0 0',\n        textAlign: 'center',\n      },\n      labelPosition === 'top' && {\n        margin: '0 0 8px',\n      },\n      labelPosition === 'right' && {\n        margin: '0 0 0 8px',\n      },\n      labelPosition === 'left' && {\n        margin: '0 8px 0 0',\n      },\n    ],\n    screenReaderText: hiddenContentStyle,\n  };\n};\n", "import * as React from 'react';\nimport { styled } from '../../Utilities';\nimport { SpinnerBase } from './Spinner.base';\nimport { getStyles } from './Spinner.styles';\nimport type { ISpinnerProps, ISpinnerStyles, ISpinnerStyleProps } from './Spinner.types';\n\nexport const Spinner: React.FunctionComponent<ISpinnerProps> = styled<\n  ISpinnerProps,\n  ISpinnerStyleProps,\n  ISpinnerStyles\n>(SpinnerBase, getStyles, undefined, { scope: 'Spinner' });\n", "import * as React from 'react';\nimport { styled } from '../../Utilities';\nimport { getStyles } from './GroupHeader.styles';\nimport { GroupHeaderBase } from './GroupHeader.base';\nimport type { IGroupHeaderProps, IGroupHeaderStyles, IGroupHeaderStyleProps } from './GroupHeader.types';\n\nexport const GroupHeader: React.FunctionComponent<IGroupHeaderProps> = styled<\n  IGroupHeaderProps,\n  IGroupHeaderStyleProps,\n  IGroupHeaderStyles\n>(GroupHeaderBase, getStyles, undefined, {\n  scope: 'GroupHeader',\n});\n\nexport type { IGroupHeaderProps };\n", "import { getGlobalClassNames } from '../../Styling';\nimport type { IGroupShowAllProps, IGroupShowAllStyleProps, IGroupShowAllStyles } from './GroupShowAll.types';\n\nconst GlobalClassNames = {\n  root: 'ms-GroupShowAll',\n  link: 'ms-Link',\n};\n\nexport const getStyles = (props: IGroupShowAllStyleProps): IGroupShowAllStyles => {\n  const { theme } = props;\n  const { fonts } = theme;\n\n  const classNames = getGlobalClassNames(GlobalClassNames, theme);\n\n  return {\n    root: [\n      classNames.root,\n      {\n        position: 'relative',\n        padding: '10px 84px',\n        cursor: 'pointer',\n        selectors: {\n          [`.${classNames.link}`]: {\n            fontSize: fonts.small.fontSize,\n          },\n        },\n      },\n    ],\n  };\n};\n\nexport type { IGroupShowAllProps };\n", "import * as React from 'react';\nimport { useCallback } from 'react';\nimport { classNamesFunction } from '../../Utilities';\nimport { Link } from '../../Link';\nimport { GroupSpacer } from './GroupSpacer';\nimport type { IGroupShowAllProps, IGroupShowAllStyleProps, IGroupShowAllStyles } from './GroupShowAll.types';\n\nconst getClassNames = classNamesFunction<IGroupShowAllStyleProps, IGroupShowAllStyles>();\n\nexport const GroupShowAllBase: React.FunctionComponent<IGroupShowAllProps> = props => {\n  const { group, groupLevel, showAllLinkText = 'Show All', styles, theme, onToggleSummarize } = props;\n  const classNames = getClassNames(styles, { theme: theme! });\n\n  const memoizedOnClick = useCallback(\n    (ev: React.MouseEvent<HTMLElement>) => {\n      onToggleSummarize!(group!);\n\n      ev.stopPropagation();\n      ev.preventDefault();\n    },\n    [onToggleSummarize, group],\n  );\n\n  if (group) {\n    return (\n      <div className={classNames.root}>\n        <GroupSpacer count={groupLevel!} />\n        <Link onClick={memoizedOnClick}>{showAllLinkText}</Link>\n      </div>\n    );\n  }\n\n  return null;\n};\n", "import * as React from 'react';\nimport { useLink } from './useLink';\nimport type { ILinkProps } from './Link.types';\n\nexport const LinkBase: React.FunctionComponent<ILinkProps> = React.forwardRef<HTMLElement, ILinkProps>((props, ref) => {\n  const { slots, slotProps } = useLink(props, ref);\n\n  return <slots.root {...slotProps.root} />;\n});\n\nLinkBase.displayName = 'LinkBase';\n", "import * as React from 'react';\nimport { useMergedRefs } from '@fluentui/react-hooks';\nimport { classNamesFunction, useFocusRects } from '@fluentui/utilities';\nimport type { ILink, ILinkProps, ILinkStyleProps, ILinkStyles } from './Link.types';\n\nconst getClassNames = classNamesFunction<ILinkStyleProps, ILinkStyles>();\n\n/**\n * The useLink hook processes the Link component props and returns\n * state, slots and slotProps for consumption by the component.\n */\nexport const useLink = (props: ILinkProps, forwardedRef: React.Ref<HTMLElement>): any => {\n  const { as, className, disabled, href, onClick, styles, theme, underline } = props;\n  const rootRef = React.useRef<HTMLDivElement | null>(null);\n  const mergedRootRefs: React.Ref<HTMLElement> = useMergedRefs(rootRef, forwardedRef);\n\n  useComponentRef(props, rootRef);\n  useFocusRects(rootRef);\n\n  const classNames = getClassNames(styles!, {\n    className,\n    isButton: !href,\n    isDisabled: disabled,\n    isUnderlined: underline,\n    theme: theme!,\n  });\n\n  const _onClick = (ev: React.MouseEvent<HTMLAnchorElement | HTMLButtonElement>) => {\n    if (disabled) {\n      ev.preventDefault();\n    } else if (onClick) {\n      onClick(ev);\n    }\n  };\n\n  const rootType = as ? as : href ? 'a' : 'button';\n\n  const state = {};\n  const slots = { root: rootType };\n  const slotProps = {\n    root: {\n      ...adjustPropsForRootType(rootType, props),\n      'aria-disabled': disabled,\n      className: classNames.root,\n      onClick: _onClick,\n      ref: mergedRootRefs,\n    },\n  };\n\n  return { state, slots, slotProps };\n};\n\nconst useComponentRef = (props: ILinkProps, link: React.RefObject<ILink>) => {\n  React.useImperativeHandle(\n    props.componentRef,\n    () => ({\n      focus() {\n        if (link.current) {\n          link.current.focus();\n        }\n      },\n    }),\n    [link],\n  );\n};\n\nconst adjustPropsForRootType = (\n  RootType: string | React.ComponentClass | React.FunctionComponent,\n  props: ILinkProps & { getStyles?: any },\n): Partial<ILinkProps> => {\n  // Deconstruct the props so we remove props like `as`, `theme` and `styles`\n  // as those will always be removed. We also take some props that are optional\n  // based on the RootType.\n  const { as, disabled, target, href, theme, getStyles, styles, componentRef, underline, ...restProps } = props;\n\n  // RootType will be a string if we're dealing with an html component\n  if (typeof RootType === 'string') {\n    // Remove the disabled prop for anchor elements\n    if (RootType === 'a') {\n      return {\n        target,\n        href: disabled ? undefined : href,\n        ...restProps,\n      };\n    }\n\n    // Add the type='button' prop for button elements\n    if (RootType === 'button') {\n      return {\n        type: 'button',\n        disabled,\n        ...restProps,\n      };\n    }\n\n    // Remove the target and href props for all other non anchor elements\n    return { ...restProps, disabled };\n  }\n\n  // Retain all props except 'as' for ReactComponents\n  return { target, href, disabled, ...restProps };\n};\n", "import * as React from 'react';\nimport { styled } from '@fluentui/utilities';\nimport { LinkBase } from './Link.base';\nimport { getStyles } from './Link.styles';\nimport type { ILinkProps, ILinkStyleProps, ILinkStyles } from './Link.types';\n\nexport const Link: React.FunctionComponent<ILinkProps> = styled<ILinkProps, ILinkStyleProps, ILinkStyles>(\n  LinkBase,\n  getStyles,\n  undefined,\n  {\n    scope: 'Link',\n  },\n);\n", "import * as React from 'react';\nimport { styled } from '../../Utilities';\nimport { getStyles } from './GroupShowAll.styles';\nimport { GroupShowAllBase } from './GroupShowAll.base';\nimport type { IGroupShowAllProps, IGroupShowAllStyleProps, IGroupShowAllStyles } from './GroupShowAll.types';\n\nexport const GroupShowAll: React.FunctionComponent<IGroupShowAllProps> = styled<\n  IGroupShowAllProps,\n  IGroupShowAllStyleProps,\n  IGroupShowAllStyles\n>(GroupShowAllBase, getStyles, undefined, { scope: 'GroupShowAll' });\n\nexport type { IGroupShowAllProps };\n", "import { getGlobalClassNames } from '../../Styling';\nimport type { IGroupFooterStyleProps, IGroupFooterStyles } from './GroupFooter.types';\n\nconst GlobalClassNames = {\n  root: 'ms-groupFooter',\n};\n\nexport const getStyles = (props: IGroupFooterStyleProps): IGroupFooterStyles => {\n  const { theme, className } = props;\n  const classNames = getGlobalClassNames(GlobalClassNames, theme!);\n\n  return {\n    root: [\n      theme.fonts.medium,\n      classNames.root,\n      {\n        position: 'relative',\n        padding: '5px 38px',\n      },\n      className,\n    ],\n  };\n};\n", "import * as React from 'react';\nimport { classNamesFunction } from '../../Utilities';\nimport { GroupSpacer } from './GroupSpacer';\nimport type { IGroupFooterStyleProps, IGroupFooterStyles, IGroupFooterProps } from './GroupFooter.types';\n\nconst getClassNames = classNamesFunction<IGroupFooterStyleProps, IGroupFooterStyles>();\n\nexport const GroupFooterBase: React.FunctionComponent<IGroupFooterProps> = props => {\n  const { group, groupLevel, footerText, indentWidth, styles, theme } = props;\n  const classNames = getClassNames(styles, { theme: theme! });\n\n  if (group && footerText) {\n    return (\n      <div className={classNames.root}>\n        <GroupSpacer indentWidth={indentWidth} count={groupLevel!} />\n        {footerText}\n      </div>\n    );\n  }\n\n  return null;\n};\n", "import * as React from 'react';\nimport { styled } from '../../Utilities';\nimport { getStyles } from './GroupFooter.styles';\nimport { GroupFooterBase } from './GroupFooter.base';\nimport type { IGroupFooterProps, IGroupFooterStyles, IGroupFooterStyleProps } from './GroupFooter.types';\n\nexport const GroupFooter: React.FunctionComponent<IGroupFooterProps> = styled<\n  IGroupFooterProps,\n  IGroupFooterStyleProps,\n  IGroupFooterStyles\n>(GroupFooterBase, getStyles, undefined, {\n  scope: 'GroupFooter',\n});\n\nexport type { IGroupFooterProps };\n", "import * as React from 'react';\nimport {\n  Async,\n  EventGroup,\n  canUseDOM,\n  css,\n  divProperties,\n  findIndex,\n  findScrollableParent,\n  getNativeProps,\n  getParent,\n  getWindow,\n  initializeComponentRef,\n} from '../../Utilities';\nimport { ScrollToMode } from './List.types';\nimport { composeRenderFunction } from '../../Utilities';\nimport { getScrollHeight, getScrollYPosition, setScrollYPosition } from './utils/scroll';\nimport type { IRectangle, IRenderFunction } from '../../Utilities';\nimport type {\n  IList,\n  IListProps,\n  IPage,\n  IPageProps,\n  IListOnRenderSurfaceProps,\n  IListOnRenderRootProps,\n} from './List.types';\n\nconst RESIZE_DELAY = 16;\nconst MIN_SCROLL_UPDATE_DELAY = 100;\nconst MAX_SCROLL_UPDATE_DELAY = 500;\nconst IDLE_DEBOUNCE_DELAY = 200;\n// The amount of time to wait before declaring that the list isn't scrolling\nconst DONE_SCROLLING_WAIT = 500;\nconst DEFAULT_ITEMS_PER_PAGE = 10;\nconst DEFAULT_PAGE_HEIGHT = 30;\nconst DEFAULT_RENDERED_WINDOWS_BEHIND = 2;\nconst DEFAULT_RENDERED_WINDOWS_AHEAD = 2;\nconst PAGE_KEY_PREFIX = 'page-';\nconst SPACER_KEY_PREFIX = 'spacer-';\n\nexport interface IListState<T = any> {\n  pages?: IPage<T>[];\n\n  /** The last versionstamp for  */\n  measureVersion?: number;\n  isScrolling?: boolean;\n  getDerivedStateFromProps(nextProps: IListProps<T>, previousState: IListState<T>): IListState<T>;\n\n  pagesVersion?: {};\n  hasMounted: boolean;\n}\n\ninterface IPageCacheItem<T> {\n  page: IPage<T>;\n  pageElement?: JSX.Element;\n}\n\ninterface IPageCache<T> {\n  [key: string]: IPageCacheItem<T>;\n}\n\nconst EMPTY_RECT = {\n  top: -1,\n  bottom: -1,\n  left: -1,\n  right: -1,\n  width: 0,\n  height: 0,\n};\n\n// Naming expensive measures so that they're named in profiles.\nconst _measurePageRect = (element: HTMLElement) => element.getBoundingClientRect();\nconst _measureSurfaceRect = _measurePageRect;\nconst _measureScrollRect = _measurePageRect;\n\n/**\n * The List renders virtualized pages of items. Each page's item count is determined by the getItemCountForPage callback\n * if provided by the caller, or 10 as default. Each page's height is determined by the getPageHeight callback if\n * provided by the caller, or by cached measurements if available, or by a running average, or a default fallback.\n *\n * The algorithm for rendering pages works like this:\n *\n * 1. Predict visible pages based on \"current measure data\" (page heights, surface position, visible window)\n * 2. If changes are necessary, apply changes (add/remove pages)\n * 3. For pages that are added, measure the page heights if we need to using getBoundingClientRect\n * 4. If measurements don't match predictions, update measure data and goto step 1 asynchronously\n *\n * Measuring too frequently can pull performance down significantly. To compensate, we cache measured values so that\n * we can avoid re-measuring during operations that should not alter heights, like scrolling.\n *\n * To optimize glass rendering performance, onShouldVirtualize can be set. When onShouldVirtualize return false,\n * List will run in fast mode (not virtualized) to render all items without any measurements to improve page load time.\n * And we start doing measurements and rendering in virtualized mode when items grows larger than this threshold.\n *\n * However, certain operations can make measure data stale. For example, resizing the list, or passing in new props,\n * or forcing an update change cause pages to shrink/grow. When these operations occur, we increment a measureVersion\n * number, which we associate with cached measurements and use to determine if a remeasure should occur.\n */\nexport class List<T = any> extends React.Component<IListProps<T>, IListState<T>> implements IList {\n  public static defaultProps = {\n    startIndex: 0,\n    onRenderCell: (item: any, index: number, containsFocus: boolean) => <>{(item && item.name) || ''}</>,\n    onRenderCellConditional: undefined,\n    renderedWindowsAhead: DEFAULT_RENDERED_WINDOWS_AHEAD,\n    renderedWindowsBehind: DEFAULT_RENDERED_WINDOWS_BEHIND,\n  };\n\n  private _root = React.createRef<HTMLDivElement>();\n  private _surface = React.createRef<HTMLDivElement>();\n  private _pageRefs: Record<string, unknown> = {};\n  private _async: Async;\n  private _events: EventGroup;\n  private _estimatedPageHeight: number;\n  private _totalEstimates: number;\n  private _cachedPageHeights: {\n    [key: string]: {\n      height: number;\n      measureVersion: number;\n    };\n  };\n  private _focusedIndex: number;\n  private _scrollElement?: HTMLElement;\n  private _hasCompletedFirstRender: boolean;\n\n  // surface rect relative to window\n  private _surfaceRect: IRectangle | undefined;\n\n  // The visible rect that we're required to render given the current list state.\n  private _requiredRect: IRectangle | null;\n\n  // The visible rect that we're allowed to keep rendered. Pages outside of this rect will be removed.\n  private _allowedRect: IRectangle;\n\n  // The rect that is visible to the user\n  private _visibleRect: IRectangle | undefined;\n\n  // materialized rect around visible items, relative to surface\n  private _materializedRect: IRectangle | null;\n\n  private _requiredWindowsAhead: number;\n  private _requiredWindowsBehind: number;\n\n  private _measureVersion: number;\n  private _scrollHeight?: number;\n  private _scrollTop: number;\n  private _pageCache: IPageCache<T>;\n\n  public static getDerivedStateFromProps<U = any>(\n    nextProps: IListProps<U>,\n    previousState: IListState<U>,\n  ): IListState<U> {\n    return previousState.getDerivedStateFromProps(nextProps, previousState);\n  }\n\n  constructor(props: IListProps<T>) {\n    super(props);\n\n    initializeComponentRef(this);\n\n    this.state = {\n      pages: [],\n      isScrolling: false,\n      getDerivedStateFromProps: this._getDerivedStateFromProps,\n      hasMounted: false,\n    };\n\n    this._async = new Async(this);\n    this._events = new EventGroup(this);\n    this._estimatedPageHeight = 0;\n    this._totalEstimates = 0;\n    this._requiredWindowsAhead = 0;\n    this._requiredWindowsBehind = 0;\n\n    // Track the measure version for everything.\n    this._measureVersion = 0;\n\n    // Ensure that scrolls are lazy updated.\n    this._onAsyncScroll = this._async.debounce(this._onAsyncScroll, MIN_SCROLL_UPDATE_DELAY, {\n      leading: false,\n      maxWait: MAX_SCROLL_UPDATE_DELAY,\n    });\n\n    this._onAsyncIdle = this._async.debounce(this._onAsyncIdle, IDLE_DEBOUNCE_DELAY, {\n      leading: false,\n    });\n\n    this._onAsyncResize = this._async.debounce(this._onAsyncResize, RESIZE_DELAY, {\n      leading: false,\n    });\n\n    this._onScrollingDone = this._async.debounce(this._onScrollingDone, DONE_SCROLLING_WAIT, {\n      leading: false,\n    });\n\n    this._cachedPageHeights = {};\n    this._estimatedPageHeight = 0;\n    this._focusedIndex = -1;\n    this._pageCache = {};\n  }\n\n  public get pageRefs(): Readonly<Record<string, unknown>> {\n    return this._pageRefs;\n  }\n\n  /**\n   * Scroll to the given index. By default will bring the page the specified item is on into the view. If a callback\n   * to measure the height of an individual item is specified, will only scroll to bring the specific item into view.\n   *\n   * Note: with items of variable height and no passed in `getPageHeight` method, the list might jump after scrolling\n   * when windows before/ahead are being rendered, and the estimated height is replaced using actual elements.\n   *\n   * @param index - Index of item to scroll to\n   * @param measureItem - Optional callback to measure the height of an individual item\n   * @param scrollToMode - Optional defines where in the window the item should be positioned to when scrolling\n   */\n  public scrollToIndex(\n    index: number,\n    measureItem?: (itemIndex: number) => number,\n    scrollToMode: ScrollToMode = ScrollToMode.auto,\n  ): void {\n    const startIndex = this.props.startIndex as number;\n    const renderCount = this._getRenderCount();\n    const endIndex = startIndex + renderCount;\n\n    const allowedRect = this._allowedRect;\n\n    let scrollTop = 0;\n\n    let itemsPerPage = 1;\n    for (let itemIndex = startIndex; itemIndex < endIndex; itemIndex += itemsPerPage) {\n      const pageSpecification = this._getPageSpecification(this.props, itemIndex, allowedRect);\n\n      const pageHeight = pageSpecification.height;\n      itemsPerPage = pageSpecification.itemCount;\n\n      const requestedIndexIsInPage = itemIndex <= index && itemIndex + itemsPerPage > index;\n      if (requestedIndexIsInPage) {\n        // We have found the page. If the user provided a way to measure an individual item, we will try to scroll in\n        // just the given item, otherwise we'll only bring the page into view\n        if (measureItem && this._scrollElement) {\n          const scrollRect = _measureScrollRect(this._scrollElement);\n          const scrollPosition = getScrollYPosition(this._scrollElement);\n          const scrollWindow = {\n            top: scrollPosition,\n            bottom: scrollPosition + scrollRect.height,\n          };\n\n          // Adjust for actual item position within page\n          const itemPositionWithinPage = index - itemIndex;\n          for (let itemIndexInPage = 0; itemIndexInPage < itemPositionWithinPage; ++itemIndexInPage) {\n            scrollTop += measureItem(itemIndex + itemIndexInPage);\n          }\n          const scrollBottom = scrollTop + measureItem(index);\n\n          // If scrollToMode is set to something other than auto, we always want to\n          // scroll the item into a specific position on the page.\n          switch (scrollToMode) {\n            case ScrollToMode.top:\n              setScrollYPosition(this._scrollElement, scrollTop);\n              return;\n            case ScrollToMode.bottom:\n              setScrollYPosition(this._scrollElement, scrollBottom - scrollRect.height);\n              return;\n            case ScrollToMode.center:\n              setScrollYPosition(this._scrollElement, (scrollTop + scrollBottom - scrollRect.height) / 2);\n              return;\n            case ScrollToMode.auto:\n            default:\n              break;\n          }\n\n          const itemIsFullyVisible = scrollTop >= scrollWindow.top && scrollBottom <= scrollWindow.bottom;\n          if (itemIsFullyVisible) {\n            // Item is already visible, do nothing.\n            return;\n          }\n\n          const itemIsPartiallyAbove = scrollTop < scrollWindow.top;\n          const itemIsPartiallyBelow = scrollBottom > scrollWindow.bottom;\n\n          if (itemIsPartiallyAbove) {\n            //  We will just scroll to 'scrollTop'\n            //  .------.   - scrollTop\n            //  |Item  |\n            //  | .----|-. - scrollWindow.top\n            //  '------' |\n            //    |      |\n            //    '------'\n          } else if (itemIsPartiallyBelow) {\n            //  Adjust scrollTop position to just bring in the element\n            // .------.  - scrollTop\n            // |      |\n            // | .------.\n            // '-|----' | - scrollWindow.bottom\n            //   | Item |\n            //   '------' - scrollBottom\n            scrollTop = scrollBottom - scrollRect.height;\n          }\n        }\n\n        if (this._scrollElement) {\n          setScrollYPosition(this._scrollElement, scrollTop);\n        }\n        return;\n      }\n\n      scrollTop += pageHeight;\n    }\n  }\n\n  public getStartItemIndexInView(measureItem?: (itemIndex: number) => number): number {\n    const pages = this.state.pages || [];\n    for (const page of pages) {\n      const isPageVisible =\n        !page.isSpacer && (this._scrollTop || 0) >= page.top && (this._scrollTop || 0) <= page.top + page.height;\n      if (isPageVisible) {\n        if (!measureItem) {\n          const rowHeight = Math.floor(page.height / page.itemCount);\n          return page.startIndex + Math.floor((this._scrollTop - page.top) / rowHeight);\n        } else {\n          let totalRowHeight = 0;\n          for (let itemIndex = page.startIndex; itemIndex < page.startIndex + page.itemCount; itemIndex++) {\n            const rowHeight = measureItem(itemIndex);\n            if (\n              page.top + totalRowHeight <= this._scrollTop &&\n              this._scrollTop < page.top + totalRowHeight + rowHeight\n            ) {\n              return itemIndex;\n            } else {\n              totalRowHeight += rowHeight;\n            }\n          }\n        }\n      }\n    }\n    return 0;\n  }\n\n  public componentDidMount(): void {\n    this._scrollElement = findScrollableParent(this._root.current) as HTMLElement;\n    this._scrollTop = 0;\n    this.setState({ ...this._updatePages(this.props, this.state), hasMounted: true });\n    this._measureVersion++;\n\n    this._events.on(window, 'resize', this._onAsyncResize);\n    if (this._root.current) {\n      this._events.on(this._root.current, 'focus', this._onFocus, true);\n    }\n    if (this._scrollElement) {\n      this._events.on(this._scrollElement, 'scroll', this._onScroll);\n      this._events.on(this._scrollElement, 'scroll', this._onAsyncScroll);\n    }\n  }\n\n  public componentDidUpdate(previousProps: IListProps, previousState: IListState<T>): void {\n    // Multiple updates may have been queued, so the callback will reflect all of them.\n    // Re-fetch the current props and states to avoid using a stale props or state captured in the closure.\n    const finalProps = this.props;\n    const finalState = this.state;\n\n    if (this.state.pagesVersion !== previousState.pagesVersion) {\n      // If we weren't provided with the page height, measure the pages\n      if (!finalProps.getPageHeight) {\n        // If measured version is invalid since we've updated the DOM\n        const heightsChanged = this._updatePageMeasurements(finalState.pages!);\n\n        // On first render, we should re-measure so that we don't get a visual glitch.\n        if (heightsChanged) {\n          this._materializedRect = null;\n          if (!this._hasCompletedFirstRender) {\n            this._hasCompletedFirstRender = true;\n            this.setState(this._updatePages(finalProps, finalState));\n          } else {\n            this._onAsyncScroll();\n          }\n        } else {\n          // Enqueue an idle bump.\n          this._onAsyncIdle();\n        }\n      } else {\n        // Enqueue an idle bump\n        this._onAsyncIdle();\n      }\n\n      // Notify the caller that rendering the new pages has completed\n      if (finalProps.onPagesUpdated) {\n        finalProps.onPagesUpdated(finalState.pages as IPage<T>[]);\n      }\n    }\n  }\n\n  public componentWillUnmount(): void {\n    this._async.dispose();\n    this._events.dispose();\n\n    delete this._scrollElement;\n  }\n\n  public shouldComponentUpdate(newProps: IListProps<T>, newState: IListState<T>): boolean {\n    const { pages: oldPages } = this.state;\n    const { pages: newPages } = newState;\n    let shouldComponentUpdate = false;\n\n    // Update if the page stops scrolling\n    if (!newState.isScrolling && this.state.isScrolling) {\n      return true;\n    }\n\n    if (newProps.version !== this.props.version) {\n      return true;\n    }\n\n    if (newProps.className !== this.props.className) {\n      return true;\n    }\n\n    if (newProps.items === this.props.items && oldPages!.length === newPages!.length) {\n      for (let i = 0; i < oldPages!.length; i++) {\n        const oldPage = oldPages![i];\n        const newPage = newPages![i];\n\n        if (oldPage.key !== newPage.key || oldPage.itemCount !== newPage.itemCount) {\n          shouldComponentUpdate = true;\n          break;\n        }\n      }\n    } else {\n      shouldComponentUpdate = true;\n    }\n\n    return shouldComponentUpdate;\n  }\n\n  public forceUpdate(): void {\n    this._invalidatePageCache();\n    // Ensure that when the list is force updated we update the pages first before render.\n    this._updateRenderRects(this.props, this.state, true);\n    this.setState(this._updatePages(this.props, this.state));\n    this._measureVersion++;\n\n    super.forceUpdate();\n  }\n\n  /**\n   * Get the current height the list and it's pages.\n   */\n  public getTotalListHeight(): number {\n    return this._surfaceRect!.height;\n  }\n\n  public render(): JSX.Element | null {\n    const { className, role = 'list', onRenderSurface, onRenderRoot } = this.props;\n    const { pages = [] } = this.state;\n    const pageElements: JSX.Element[] = [];\n    const divProps = getNativeProps<React.HTMLAttributes<HTMLDivElement>>(this.props, divProperties);\n\n    for (const page of pages) {\n      pageElements.push(this._renderPage(page));\n    }\n\n    const finalOnRenderSurface = onRenderSurface\n      ? composeRenderFunction(onRenderSurface, this._onRenderSurface)\n      : this._onRenderSurface;\n\n    const finalOnRenderRoot = onRenderRoot\n      ? composeRenderFunction(onRenderRoot, this._onRenderRoot)\n      : this._onRenderRoot;\n\n    return finalOnRenderRoot({\n      rootRef: this._root,\n      pages,\n      surfaceElement: finalOnRenderSurface({\n        surfaceRef: this._surface,\n        pages,\n        pageElements,\n        divProps: {\n          role: 'presentation',\n          className: 'ms-List-surface',\n        },\n      }),\n      divProps: {\n        ...divProps,\n        className: css('ms-List', className),\n        role: pageElements.length > 0 ? role : undefined,\n        'aria-label': pageElements.length > 0 ? divProps['aria-label'] : undefined,\n      },\n    });\n  }\n\n  private _getDerivedStateFromProps = (nextProps: IListProps<T>, previousState: IListState<T>): IListState<T> => {\n    if (\n      nextProps.items !== this.props.items ||\n      nextProps.renderCount !== this.props.renderCount ||\n      nextProps.startIndex !== this.props.startIndex ||\n      nextProps.version !== this.props.version ||\n      (!previousState.hasMounted && this.props.renderEarly && canUseDOM())\n    ) {\n      // We have received new items so we want to make sure that initially we only render a single window to\n      // fill the currently visible rect, and then later render additional windows.\n      this._resetRequiredWindows();\n      this._requiredRect = null;\n\n      this._measureVersion++;\n      this._invalidatePageCache();\n\n      return this._updatePages(nextProps, previousState);\n    }\n\n    return previousState;\n  };\n\n  private _shouldVirtualize(props: IListProps<T> = this.props): boolean {\n    const { onShouldVirtualize } = props;\n    return !onShouldVirtualize || onShouldVirtualize(props);\n  }\n\n  /**\n   * when props.items change or forceUpdate called, throw away cached pages\n   */\n  private _invalidatePageCache(): void {\n    this._pageCache = {};\n  }\n\n  private _renderPage(page: IPage<T>): JSX.Element {\n    const { usePageCache } = this.props;\n    let cachedPage;\n    // if usePageCache is set and cached page element can be found, just return cached page\n    if (usePageCache) {\n      cachedPage = this._pageCache[page.key];\n      if (cachedPage && cachedPage.pageElement) {\n        return cachedPage.pageElement;\n      }\n    }\n\n    const pageStyle = this._getPageStyle(page);\n\n    const { onRenderPage = this._onRenderPage } = this.props;\n\n    const pageElement = onRenderPage(\n      {\n        page,\n        className: 'ms-List-page',\n        key: page.key,\n        ref: (newRef: unknown) => {\n          this._pageRefs[page.key] = newRef;\n        },\n        style: pageStyle,\n        role: 'presentation',\n      },\n      this._onRenderPage,\n    );\n\n    // cache the first page for now since it is re-rendered a lot times unnecessarily.\n    // todo: a more aggresive caching mechanism is to cache pages constaining the items not changed.\n    // now we re-render pages too frequently, for example, props.items increased from 30 to 60, although the\n    // first 30 items did not change, we still re-rendered all of them in this props.items change.\n    if (usePageCache && page.startIndex === 0) {\n      this._pageCache[page.key] = {\n        page,\n        pageElement,\n      };\n    }\n    return pageElement;\n  }\n\n  private _onRenderRoot = (props: IListOnRenderRootProps<T>): JSX.Element => {\n    const { rootRef, surfaceElement, divProps } = props;\n\n    return (\n      <div ref={rootRef} {...divProps}>\n        {surfaceElement}\n      </div>\n    );\n  };\n\n  private _onRenderSurface = (props: IListOnRenderSurfaceProps<T>): JSX.Element => {\n    const { surfaceRef, pageElements, divProps } = props;\n\n    return (\n      <div ref={surfaceRef} {...divProps}>\n        {pageElements}\n      </div>\n    );\n  };\n\n  /** Generate the style object for the page. */\n  private _getPageStyle(page: IPage<T>): React.StyleHTMLAttributes<HTMLDivElement> {\n    const { getPageStyle } = this.props;\n\n    return {\n      ...(getPageStyle ? getPageStyle(page) : {}),\n      ...(!page.items\n        ? {\n            height: page.height,\n          }\n        : {}),\n    };\n  }\n\n  private _onRenderPage = (pageProps: IPageProps<T>, defaultRender?: IRenderFunction<IPageProps<T>>): any => {\n    const { onRenderCell, onRenderCellConditional, role } = this.props;\n\n    const {\n      page: { items = [], startIndex },\n      ...divProps\n    } = pageProps;\n\n    // only assign list item role if no role is assigned\n    const cellRole = role === undefined ? 'listitem' : 'presentation';\n    const cells: React.ReactNode[] = [];\n\n    for (let i = 0; i < items.length; i++) {\n      const index = startIndex + i;\n      const item = items[i];\n\n      let itemKey = this.props.getKey ? this.props.getKey(item, index) : item && (item as any).key;\n\n      if (itemKey === null || itemKey === undefined) {\n        itemKey = index;\n      }\n\n      const renderCell = onRenderCellConditional ?? onRenderCell;\n\n      const cell =\n        renderCell?.(item, index, !this.props.ignoreScrollingState ? this.state.isScrolling : undefined) ?? null;\n\n      if (!onRenderCellConditional || cell) {\n        cells.push(\n          <div\n            role={cellRole}\n            className={'ms-List-cell'}\n            key={itemKey}\n            data-list-index={index}\n            data-automationid=\"ListCell\"\n          >\n            {cell}\n          </div>,\n        );\n      }\n    }\n\n    return <div {...divProps}>{cells}</div>;\n  };\n\n  /** Track the last item index focused so that we ensure we keep it rendered. */\n  private _onFocus(ev: any): void {\n    let target = ev.target as HTMLElement;\n\n    while (target !== this._surface.current) {\n      const indexString = target.getAttribute('data-list-index');\n\n      if (indexString) {\n        this._focusedIndex = Number(indexString);\n        break;\n      }\n\n      target = getParent(target) as HTMLElement;\n    }\n  }\n\n  /**\n   * Called synchronously to reset the required render range to 0 on scrolling. After async scroll has executed,\n   * we will call onAsyncIdle which will reset it back to it's correct value.\n   */\n  private _onScroll(): void {\n    if (!this.state.isScrolling && !this.props.ignoreScrollingState) {\n      this.setState({ isScrolling: true });\n    }\n    this._resetRequiredWindows();\n    this._onScrollingDone();\n  }\n\n  private _resetRequiredWindows(): void {\n    this._requiredWindowsAhead = 0;\n    this._requiredWindowsBehind = 0;\n  }\n\n  /**\n   * Debounced method to asynchronously update the visible region on a scroll event.\n   */\n  private _onAsyncScroll(): void {\n    this._updateRenderRects(this.props, this.state);\n\n    // Only update pages when the visible rect falls outside of the materialized rect.\n    if (!this._materializedRect || !_isContainedWithin(this._requiredRect as IRectangle, this._materializedRect)) {\n      this.setState(this._updatePages(this.props, this.state));\n    } else {\n      // console.log('requiredRect contained in materialized', this._requiredRect, this._materializedRect);\n    }\n  }\n\n  /**\n   * This is an async debounced method that will try and increment the windows we render. If we can increment\n   * either, we increase the amount we render and re-evaluate.\n   */\n  private _onAsyncIdle(): void {\n    const { renderedWindowsAhead, renderedWindowsBehind } = this.props;\n    const { _requiredWindowsAhead: requiredWindowsAhead, _requiredWindowsBehind: requiredWindowsBehind } = this;\n    const windowsAhead = Math.min(renderedWindowsAhead as number, requiredWindowsAhead + 1);\n    const windowsBehind = Math.min(renderedWindowsBehind as number, requiredWindowsBehind + 1);\n\n    if (windowsAhead !== requiredWindowsAhead || windowsBehind !== requiredWindowsBehind) {\n      // console.log('idling', windowsBehind, windowsAhead);\n\n      this._requiredWindowsAhead = windowsAhead;\n      this._requiredWindowsBehind = windowsBehind;\n      this._updateRenderRects(this.props, this.state);\n      this.setState(this._updatePages(this.props, this.state));\n    }\n\n    if (renderedWindowsAhead! > windowsAhead || renderedWindowsBehind! > windowsBehind) {\n      // Async increment on next tick.\n      this._onAsyncIdle();\n    }\n  }\n\n  /**\n   * Function to call when the list is done scrolling.\n   * This function is debounced.\n   */\n  private _onScrollingDone(): void {\n    if (!this.props.ignoreScrollingState) {\n      this.setState({ isScrolling: false });\n    }\n  }\n\n  private _onAsyncResize(): void {\n    this.forceUpdate();\n  }\n\n  private _updatePages(nextProps: IListProps<T>, previousState: IListState<T>): IListState<T> {\n    // console.log('updating pages');\n\n    if (!this._requiredRect) {\n      this._updateRenderRects(nextProps, previousState);\n    }\n\n    const newListState = this._buildPages(nextProps, previousState);\n    const oldListPages = previousState.pages!;\n\n    this._notifyPageChanges(oldListPages, newListState.pages!, this.props);\n\n    return {\n      ...previousState,\n      ...newListState,\n      pagesVersion: {},\n    };\n  }\n\n  /**\n   * Notify consumers that the rendered pages have changed\n   * @param oldPages - The old pages\n   * @param newPages - The new pages\n   * @param props - The props to use\n   */\n  private _notifyPageChanges(oldPages: IPage<T>[], newPages: IPage<T>[], props: IListProps<T>): void {\n    const { onPageAdded, onPageRemoved } = props;\n\n    if (onPageAdded || onPageRemoved) {\n      const renderedIndexes: {\n        [index: number]: IPage<T>;\n      } = {};\n\n      for (const page of oldPages) {\n        if (page.items) {\n          renderedIndexes[page.startIndex] = page;\n        }\n      }\n\n      for (const page of newPages) {\n        if (page.items) {\n          if (!renderedIndexes[page.startIndex]) {\n            this._onPageAdded(page);\n          } else {\n            delete renderedIndexes[page.startIndex];\n          }\n        }\n      }\n\n      for (const index in renderedIndexes) {\n        if (renderedIndexes.hasOwnProperty(index)) {\n          this._onPageRemoved(renderedIndexes[index]);\n        }\n      }\n    }\n  }\n\n  private _updatePageMeasurements(pages: IPage<T>[]): boolean {\n    let heightChanged = false;\n\n    // when not in virtualize mode, we render all the items without page measurement\n    if (!this._shouldVirtualize()) {\n      return heightChanged;\n    }\n\n    for (let i = 0; i < pages.length; i++) {\n      const page = pages[i];\n\n      if (page.items) {\n        heightChanged = this._measurePage(page) || heightChanged;\n      }\n    }\n\n    return heightChanged;\n  }\n\n  /**\n   * Given a page, measure its dimensions, update cache.\n   * @returns True if the height has changed.\n   */\n  private _measurePage(page: IPage<T>): boolean {\n    let hasChangedHeight = false;\n    const pageElement = this._pageRefs[page.key] as HTMLElement;\n    const cachedHeight = this._cachedPageHeights[page.startIndex];\n\n    // console.log('   * measure attempt', page.startIndex, cachedHeight);\n\n    if (\n      pageElement &&\n      this._shouldVirtualize() &&\n      (!cachedHeight || cachedHeight.measureVersion !== this._measureVersion)\n    ) {\n      const newClientRect = {\n        width: pageElement.clientWidth,\n        height: pageElement.clientHeight,\n      };\n\n      if (newClientRect.height || newClientRect.width) {\n        hasChangedHeight = page.height !== newClientRect.height;\n\n        // console.warn(' *** expensive page measure', page.startIndex, page.height, newClientRect.height);\n\n        page.height = newClientRect.height;\n\n        this._cachedPageHeights[page.startIndex] = {\n          height: newClientRect.height,\n          measureVersion: this._measureVersion,\n        };\n\n        this._estimatedPageHeight = Math.round(\n          (this._estimatedPageHeight * this._totalEstimates + newClientRect.height) / (this._totalEstimates + 1),\n        );\n\n        this._totalEstimates++;\n      }\n    }\n\n    return hasChangedHeight;\n  }\n\n  /** Called when a page has been added to the DOM. */\n  private _onPageAdded(page: IPage<T>): void {\n    const { onPageAdded } = this.props;\n\n    // console.log('page added', page.startIndex, this.state.pages.map(page => page.key).join(', '));\n\n    if (onPageAdded) {\n      onPageAdded(page);\n    }\n  }\n\n  /** Called when a page has been removed from the DOM. */\n  private _onPageRemoved(page: IPage<T>): void {\n    const { onPageRemoved } = this.props;\n\n    // console.log('  --- page removed', page.startIndex, this.state.pages.map(page => page.key).join(', '));\n\n    if (onPageRemoved) {\n      onPageRemoved(page);\n    }\n  }\n\n  /** Build up the pages that should be rendered. */\n  private _buildPages(props: IListProps<T>, state: IListState<T>): IListState<T> {\n    let { renderCount } = props;\n    const { items, startIndex, getPageHeight } = props;\n\n    renderCount = this._getRenderCount(props);\n\n    const materializedRect = { ...EMPTY_RECT };\n    const pages: IPage<T>[] = [];\n\n    let itemsPerPage = 1;\n    let pageTop = 0;\n    let currentSpacer = null;\n    const focusedIndex = this._focusedIndex;\n    const endIndex = startIndex! + renderCount;\n    const shouldVirtualize = this._shouldVirtualize(props);\n\n    // First render is very important to track; when we render cells, we have no idea of estimated page height.\n    // So we should default to rendering only the first page so that we can get information.\n    // However if the user provides a measure function, let's just assume they know the right heights.\n    const isFirstRender = this._estimatedPageHeight === 0 && !getPageHeight;\n\n    const allowedRect = this._allowedRect;\n\n    for (let itemIndex = startIndex!; itemIndex < endIndex; itemIndex += itemsPerPage) {\n      const pageSpecification = this._getPageSpecification(props, itemIndex, allowedRect);\n      const pageHeight = pageSpecification.height;\n      const pageData = pageSpecification.data;\n      const key = pageSpecification.key;\n\n      itemsPerPage = pageSpecification.itemCount;\n\n      const pageBottom = pageTop + pageHeight - 1;\n\n      const isPageRendered =\n        findIndex(state.pages as IPage<T>[], (page: IPage<T>) => !!page.items && page.startIndex === itemIndex) > -1;\n      const isPageInAllowedRange = !allowedRect || (pageBottom >= allowedRect.top && pageTop <= allowedRect.bottom!);\n      const isPageInRequiredRange =\n        !this._requiredRect || (pageBottom >= this._requiredRect.top && pageTop <= this._requiredRect.bottom!);\n      const isPageVisible =\n        (!isFirstRender && (isPageInRequiredRange || (isPageInAllowedRange && isPageRendered))) || !shouldVirtualize;\n      const isPageFocused = focusedIndex >= itemIndex && focusedIndex < itemIndex + itemsPerPage;\n      const isFirstPage = itemIndex === startIndex;\n\n      // console.log('building page', itemIndex, 'pageTop: ' + pageTop, 'inAllowed: ' +\n      // isPageInAllowedRange, 'inRequired: ' + isPageInRequiredRange);\n\n      // Only render whats visible, focused, or first page,\n      // or when running in fast rendering mode (not in virtualized mode), we render all current items in pages\n      if (isPageVisible || isPageFocused || isFirstPage) {\n        if (currentSpacer) {\n          pages.push(currentSpacer);\n          currentSpacer = null;\n        }\n\n        const itemsInPage = Math.min(itemsPerPage, endIndex - itemIndex);\n        const newPage = this._createPage(\n          key,\n          items!.slice(itemIndex, itemIndex + itemsInPage),\n          itemIndex,\n          undefined,\n          undefined,\n          pageData,\n        );\n\n        newPage.top = pageTop;\n        newPage.height = pageHeight;\n        if (this._visibleRect && this._visibleRect.bottom) {\n          newPage.isVisible = pageBottom >= this._visibleRect.top && pageTop <= this._visibleRect.bottom;\n        }\n\n        pages.push(newPage);\n\n        if (isPageInRequiredRange && this._allowedRect) {\n          _mergeRect(materializedRect, {\n            top: pageTop,\n            bottom: pageBottom,\n            height: pageHeight,\n            left: allowedRect.left,\n            right: allowedRect.right,\n            width: allowedRect.width,\n          });\n        }\n      } else {\n        if (!currentSpacer) {\n          currentSpacer = this._createPage(\n            SPACER_KEY_PREFIX + itemIndex,\n            undefined,\n            itemIndex,\n            0,\n            undefined,\n            pageData,\n            true /*isSpacer*/,\n          );\n        }\n        currentSpacer.height = (currentSpacer.height || 0) + (pageBottom - pageTop) + 1;\n        currentSpacer.itemCount += itemsPerPage;\n      }\n      pageTop += pageBottom - pageTop + 1;\n\n      // in virtualized mode, we render need to render first page then break and measure,\n      // otherwise, we render all items without measurement to make rendering fast\n      if (isFirstRender && shouldVirtualize) {\n        break;\n      }\n    }\n\n    if (currentSpacer) {\n      currentSpacer.key = SPACER_KEY_PREFIX + 'end';\n      pages.push(currentSpacer);\n    }\n\n    this._materializedRect = materializedRect;\n\n    // console.log('materialized: ', materializedRect);\n    return {\n      ...state,\n      pages,\n      measureVersion: this._measureVersion,\n    };\n  }\n\n  private _getPageSpecification(\n    props: IListProps,\n    itemIndex: number,\n    visibleRect: IRectangle,\n  ): {\n    // These return values are now no longer optional.\n    itemCount: number;\n    height: number;\n    data?: any;\n    key?: string;\n  } {\n    const { getPageSpecification } = props;\n\n    if (getPageSpecification) {\n      const pageData = getPageSpecification(itemIndex, visibleRect);\n\n      const { itemCount = this._getItemCountForPage(itemIndex, visibleRect) } = pageData;\n\n      const { height = this._getPageHeight(itemIndex, visibleRect, itemCount) } = pageData;\n\n      return {\n        itemCount,\n        height,\n        data: pageData.data,\n        key: pageData.key,\n      };\n    } else {\n      const itemCount = this._getItemCountForPage(itemIndex, visibleRect);\n\n      return {\n        itemCount,\n        height: this._getPageHeight(itemIndex, visibleRect, itemCount),\n      };\n    }\n  }\n\n  /**\n   * Get the pixel height of a give page. Will use the props getPageHeight first, and if not provided, fallback to\n   * cached height, or estimated page height, or default page height.\n   */\n  private _getPageHeight(itemIndex: number, visibleRect: IRectangle, itemsPerPage: number): number {\n    if (this.props.getPageHeight) {\n      return this.props.getPageHeight(itemIndex, visibleRect, itemsPerPage);\n    } else {\n      const cachedHeight = this._cachedPageHeights[itemIndex];\n\n      return cachedHeight ? cachedHeight.height : this._estimatedPageHeight || DEFAULT_PAGE_HEIGHT;\n    }\n  }\n\n  private _getItemCountForPage(itemIndex: number, visibileRect: IRectangle): number {\n    const itemsPerPage = this.props.getItemCountForPage\n      ? this.props.getItemCountForPage(itemIndex, visibileRect)\n      : DEFAULT_ITEMS_PER_PAGE;\n\n    return itemsPerPage ? itemsPerPage : DEFAULT_ITEMS_PER_PAGE;\n  }\n\n  private _createPage(\n    pageKey: string | undefined,\n    items: any[] | undefined,\n    startIndex: number = -1,\n    count: number = items ? items.length : 0,\n    style: React.CSSProperties = {},\n    data?: any,\n    isSpacer?: boolean,\n  ): IPage<T> {\n    pageKey = pageKey || PAGE_KEY_PREFIX + startIndex;\n    const cachedPage = this._pageCache[pageKey];\n    if (cachedPage && cachedPage.page) {\n      return cachedPage.page;\n    }\n\n    return {\n      key: pageKey,\n      startIndex,\n      itemCount: count,\n      items,\n      style,\n      top: 0,\n      height: 0,\n      data,\n      isSpacer: isSpacer || false,\n    };\n  }\n\n  private _getRenderCount(props?: IListProps<T>): number {\n    const { items, startIndex, renderCount } = props || this.props;\n\n    return renderCount === undefined ? (items ? items.length - startIndex! : 0) : renderCount;\n  }\n\n  /** Calculate the visible rect within the list where top: 0 and left: 0 is the top/left of the list. */\n  private _updateRenderRects(props: IListProps<T>, state: IListState<T>, forceUpdate?: boolean): void {\n    const { renderedWindowsAhead, renderedWindowsBehind } = props;\n    const { pages } = state;\n    // when not in virtualize mode, we render all items without measurement to optimize page rendering perf\n    if (!this._shouldVirtualize(props)) {\n      return;\n    }\n\n    let surfaceRect = this._surfaceRect || { ...EMPTY_RECT };\n    const scrollHeight = getScrollHeight(this._scrollElement);\n    const scrollTop = getScrollYPosition(this._scrollElement);\n\n    // WARNING: EXPENSIVE CALL! We need to know the surface top relative to the window.\n    // This needs to be called to recalculate when new pages should be loaded.\n    // We check to see how far we've scrolled and if it's further than a third of a page we run it again.\n    if (\n      this._surface.current &&\n      (forceUpdate ||\n        !pages ||\n        !this._surfaceRect ||\n        !scrollHeight ||\n        scrollHeight !== this._scrollHeight ||\n        Math.abs(this._scrollTop - scrollTop) > this._estimatedPageHeight / 3)\n    ) {\n      surfaceRect = this._surfaceRect = _measureSurfaceRect(this._surface.current);\n      this._scrollTop = scrollTop;\n    }\n\n    // If the scroll height has changed, something in the container likely resized and\n    // we should redo the page heights incase their content resized.\n    if (forceUpdate || !scrollHeight || scrollHeight !== this._scrollHeight) {\n      this._measureVersion++;\n    }\n\n    this._scrollHeight = scrollHeight || 0;\n\n    // If the surface is above the container top or below the container bottom, or if this is not the first\n    // render return empty rect.\n    // The first time the list gets rendered we need to calculate the rectangle. The width of the list is\n    // used to calculate the width of the list items.\n    const visibleTop = Math.max(0, -surfaceRect.top);\n    const win = getWindow(this._root.current);\n    const visibleRect = {\n      top: visibleTop,\n      left: surfaceRect.left,\n      bottom: visibleTop + win!.innerHeight,\n      right: surfaceRect.right,\n      width: surfaceRect.width,\n      height: win!.innerHeight,\n    };\n\n    // The required/allowed rects are adjusted versions of the visible rect.\n    this._requiredRect = _expandRect(visibleRect, this._requiredWindowsBehind, this._requiredWindowsAhead);\n    this._allowedRect = _expandRect(visibleRect, renderedWindowsBehind!, renderedWindowsAhead!);\n\n    // store the visible rect for later use.\n    this._visibleRect = visibleRect;\n  }\n}\n\nfunction _expandRect(rect: IRectangle, pagesBefore: number, pagesAfter: number): IRectangle {\n  const top = rect.top - pagesBefore * rect.height;\n  const height = rect.height + (pagesBefore + pagesAfter) * rect.height;\n\n  return {\n    top,\n    bottom: top + height,\n    height,\n    left: rect.left,\n    right: rect.right,\n    width: rect.width,\n  };\n}\n\nfunction _isContainedWithin(innerRect: IRectangle, outerRect: IRectangle): boolean {\n  return (\n    innerRect.top >= outerRect.top &&\n    innerRect.left >= outerRect.left &&\n    innerRect.bottom! <= outerRect.bottom! &&\n    innerRect.right! <= outerRect.right!\n  );\n}\n\nfunction _mergeRect(targetRect: IRectangle, newRect: IRectangle): IRectangle {\n  targetRect.top = newRect.top < targetRect.top || targetRect.top === -1 ? newRect.top : targetRect.top;\n  targetRect.left = newRect.left < targetRect.left || targetRect.left === -1 ? newRect.left : targetRect.left;\n  targetRect.bottom =\n    newRect.bottom! > targetRect.bottom! || targetRect.bottom === -1 ? newRect.bottom : targetRect.bottom;\n  targetRect.right = newRect.right! > targetRect.right! || targetRect.right === -1 ? newRect.right : targetRect.right;\n  targetRect.width = targetRect.right! - targetRect.left + 1;\n  targetRect.height = targetRect.bottom! - targetRect.top + 1;\n\n  return targetRect;\n}\n", "import * as React from 'react';\nimport { List } from './List';\nimport type { IRefObject, IRectangle, IRenderFunction } from '../../Utilities';\n\n/**\n * {@docCategory List}\n */\nexport const ScrollToMode = {\n  /**\n   * Does not make any consideration to where in the viewport the item should align to.\n   */\n  auto: 0 as 0,\n  /**\n   * Attempts to scroll the list so the top of the desired item is aligned with the top of the viewport.\n   */\n  top: 1 as 1,\n  /**\n   * Attempts to scroll the list so the bottom of the desired item is aligned with the bottom of the viewport.\n   */\n  bottom: 2 as 2,\n  /**\n   * Attempts to scroll the list so the desired item is in the exact center of the viewport.\n   */\n  center: 3 as 3,\n};\n\n/**\n * {@docCategory List}\n */\nexport type ScrollToMode = (typeof ScrollToMode)[keyof typeof ScrollToMode];\n\n/**\n * Props passed to the render override for the list root.\n * {@docCategory List}\n */\nexport interface IListOnRenderRootProps<T> {\n  /**\n   * The ref to be applied to the list root.\n   * The `List` uses this element to track scroll position and sizing.\n   */\n  rootRef: React.Ref<HTMLDivElement>;\n  /**\n   * Props to apply to the list root element.\n   */\n  divProps: React.HTMLAttributes<HTMLDivElement>;\n  /**\n   * The active pages to be rendered into the list.\n   * These will have been rendered using `onRenderPage`.\n   */\n  pages: IPage<T>[];\n  /**\n   * The content to be rendered as the list surface element.\n   * This will have been rendered using `onRenderSurface`.\n   */\n  surfaceElement: JSX.Element | null;\n}\n\n/**\n * Props passed to the render override for the list surface.\n * {@docCategory List}\n */\nexport interface IListOnRenderSurfaceProps<T> {\n  /**\n   * A ref to be applied to the surface element.\n   * The `List` uses this element to track content size and focus.\n   */\n  surfaceRef: React.Ref<HTMLDivElement>;\n  /**\n   * Props to apply to the list surface element.\n   */\n  divProps: React.HTMLAttributes<HTMLDivElement>;\n  /**\n   * The active pages to be rendered into the list.\n   * These will have been rendered using `onRenderPage`.\n   */\n  pages: IPage<T>[];\n  /**\n   * The content to be rendered representing all active pages.\n   */\n  pageElements: JSX.Element[];\n}\n\n/**\n * {@docCategory List}\n */\nexport interface IList {\n  /**\n   * Force the component to update.\n   */\n  forceUpdate: () => void;\n\n  /**\n   * Get the current height the list and it's pages.\n   */\n  getTotalListHeight?: () => number;\n\n  /**\n   * Scroll to the given index. By default will bring the page the specified item is on into the view. If a callback\n   * to measure the height of an individual item is specified, will only scroll to bring the specific item into view.\n   *\n   * Note: with items of variable height and no passed in `getPageHeight` method, the list might jump after scrolling\n   * when windows before/ahead are being rendered, and the estimated height is replaced using actual elements.\n   *\n   * @param index - Index of item to scroll to\n   * @param measureItem - Optional callback to measure the height of an individual item\n   * @param scrollToMode - Optional defines the behavior of the scrolling alignment. Defaults to auto.\n   *  Note: The scrollToMode requires the measureItem callback is provided to function.\n   */\n  scrollToIndex: (index: number, measureItem?: (itemIndex: number) => number, scrollToMode?: ScrollToMode) => void;\n\n  /**\n   * Get the start index of the page that is currently in view\n   */\n  getStartItemIndexInView: () => number;\n}\n\n/**\n * {@docCategory List}\n */\nexport interface IListProps<T = any> extends React.HTMLAttributes<List<T> | HTMLDivElement> {\n  /**\n   * Optional callback to access the IList interface. Use this instead of ref for accessing\n   * the public methods and properties of the component.\n   */\n  componentRef?: IRefObject<IList>;\n\n  /** Optional classname to append to root list. */\n  className?: string;\n\n  /** Items to render. */\n  items?: T[];\n\n  /**\n   * Method to call when trying to render an item.\n   * @param item - The data associated with the cell that is being rendered.\n   * @param index - The index of the cell being rendered.\n   * @param isScrolling - True if the list is being scrolled. May be useful for rendering a placeholder if your cells\n   * are complex.\n   */\n  onRenderCell?: (item?: T, index?: number, isScrolling?: boolean) => React.ReactNode;\n\n  /**\n   * Method to call when trying to render an item conditionally.\n   *\n   * When this method returns `null` the cell will be skipped in the render.\n   *\n   * This prop is mutually exclusive with `onRenderCell` and when `onRenderCellConditional` is set,\n   * `onRenderCell` will not be called.\n   *\n   * @param item - The data associated with the cell that is being rendered.\n   * @param index - The index of the cell being rendered.\n   * @param isScrolling - True if the list is being scrolled. May be useful for rendering a placeholder if your cells\n   * are complex.\n   */\n  onRenderCellConditional?: (item?: T, index?: number, isScrolling?: boolean) => React.ReactNode | null;\n\n  /**\n   * Optional callback invoked when List rendering completed.\n   * This can be on initial mount or on re-render due to scrolling.\n   * This method will be called as a result of changes in List pages (added or removed),\n   * and after ALL the changes complete.\n   * To track individual page Add / Remove use onPageAdded / onPageRemoved instead.\n   * @param pages - The current array of pages in the List.\n   */\n  onPagesUpdated?: (pages: IPage<T>[]) => void;\n\n  /** Optional callback for monitoring when a page is added. */\n  onPageAdded?: (page: IPage<T>) => void;\n\n  /** Optional callback for monitoring when a page is removed. */\n  onPageRemoved?: (page: IPage<T>) => void;\n\n  /** Optional callback to get the item key, to be used on render. */\n  getKey?: (item: T, index?: number) => string;\n\n  /**\n   * Called by the list to get the specification for a page.\n   * Use this method to provide an allocation of items per page,\n   * as well as an estimated rendered height for the page.\n   * The list will use this to optimize virtualization.\n   */\n  getPageSpecification?: (itemIndex?: number, visibleRect?: IRectangle) => IPageSpecification;\n\n  /**\n   * Method called by the list to get how many items to render per page from specified index.\n   * In general, use `getPageSpecification` instead.\n   */\n  getItemCountForPage?: (itemIndex?: number, visibleRect?: IRectangle) => number;\n\n  /**\n   * Method called by the list to get the pixel height for a given page. By default, we measure the first\n   * page's height and default all other pages to that height when calculating the surface space. It is\n   * ideal to be able to adequately predict page heights in order to keep the surface space from jumping\n   * in pixels, which has been seen to cause browser performance issues.\n   * In general, use `getPageSpecification` instead.\n   */\n  getPageHeight?: (itemIndex?: number, visibleRect?: IRectangle, itemCount?: number) => number;\n\n  /**\n   * Method called by the list to derive the page style object. For spacer pages, the list will derive\n   * the height and passed in heights will be ignored.\n   */\n  getPageStyle?: (page: IPage<T>) => any;\n\n  /**\n   * In addition to the visible window, how many windowHeights should we render ahead.\n   * @defaultvalue 2\n   */\n  renderedWindowsAhead?: number;\n\n  /**\n   * In addition to the visible window, how many windowHeights should we render behind.\n   * @defaultvalue 2\n   */\n  renderedWindowsBehind?: number;\n\n  /**\n   * Index in `items` array to start rendering from.\n   * @default 0\n   */\n  startIndex?: number;\n\n  /**\n   * Number of items to render.\n   * @default items.length\n   */\n  renderCount?: number;\n\n  /**\n   * Boolean value to enable render page caching. This is an experimental performance optimization\n   * that is off by default.\n   * @defaultvalue false\n   */\n  usePageCache?: boolean;\n\n  /**\n   * Optional callback to determine whether the list should be rendered in full, or virtualized.\n   * Virtualization will add and remove pages of items as the user scrolls them into the visible range.\n   * This benefits larger list scenarios by reducing the DOM on the screen, but can negatively affect performance for\n   * smaller lists.\n   * The default implementation will virtualize when this callback is not provided.\n   */\n  onShouldVirtualize?: (props: IListProps<T>) => boolean;\n\n  /**\n   * The role to assign to the list root element.\n   * Use this to override the default assignment of 'list' to the root and 'listitem' to the cells.\n   */\n  role?: string;\n\n  /**\n   * Called when the List will render a page.\n   * Override this to control how cells are rendered within a page.\n   */\n  onRenderPage?: IRenderFunction<IPageProps<T>>;\n\n  /**\n   * Render override for the element at the root of the `List`.\n   * Use this to apply some final attributes or structure to the content\n   * each time the list is updated with new active pages or items.\n   */\n  onRenderRoot?: IRenderFunction<IListOnRenderRootProps<T>>;\n\n  /**\n   * Render override for the element representing the surface of the `List`.\n   * Use this to alter the structure of the rendered content if necessary on each update.\n   */\n  onRenderSurface?: IRenderFunction<IListOnRenderSurfaceProps<T>>;\n\n  /**\n   * For perf reasons, List avoids re-rendering unless certain props have changed.\n   * Use this prop if you need to force it to re-render in other cases. You can pass any type of\n   * value as long as it only changes (`===` comparison) when a re-render should happen.\n   */\n  version?: any;\n\n  /**\n   * Whether to disable scroll state updates. This causes the isScrolling arg in onRenderCell to always be undefined.\n   * This is a performance optimization to let List skip a render cycle by not updating its scrolling state.\n   */\n  ignoreScrollingState?: boolean;\n\n  /**\n   * Whether to render the list earlier than the default.\n   * Use this in scenarios where the list is contained in a FocusZone or FocusTrapZone\n   * as in a Dialog.\n   */\n  renderEarly?: boolean;\n}\n\n/**\n * {@docCategory List}\n */\nexport interface IPage<T = any> {\n  key: string;\n  items: T[] | undefined;\n  startIndex: number;\n  itemCount: number;\n  style: React.CSSProperties;\n  top: number;\n  height: number;\n  data?: any;\n  isSpacer?: boolean;\n  isVisible?: boolean;\n}\n\n/**\n * {@docCategory List}\n */\nexport interface IPageProps<T = any>\n  extends React.HTMLAttributes<HTMLDivElement>,\n    React.ClassAttributes<HTMLDivElement> {\n  /**\n   * The role being assigned to the rendered page element by the list.\n   */\n  role?: string;\n  /**\n   * The allocation data for the page.\n   */\n  page: IPage<T>;\n}\n\n/**\n * {@docCategory List}\n */\nexport interface IPageSpecification {\n  /**\n   * The number of items to allocate to the page.\n   */\n  itemCount?: number;\n  /**\n   * The estimated pixel height of the page.\n   */\n  height?: number;\n  /**\n   * Data to pass through to the page when rendering.\n   */\n  data?: any;\n  /**\n   * The key to use when creating the page.\n   */\n  key?: string;\n}\n", "export const getScrollHeight = (el?: HTMLElement | Window): number => {\n  if (el === undefined) {\n    return 0;\n  }\n\n  let scrollHeight = 0;\n  if ('scrollHeight' in el) {\n    scrollHeight = el.scrollHeight;\n  } else if ('document' in el) {\n    scrollHeight = el.document.documentElement.scrollHeight;\n  }\n\n  // No need to round as scrollHeight is already rounded for us.\n  // See: https://developer.mozilla.org/en-US/docs/Web/API/Element/scrollHeight\n  return scrollHeight;\n};\n\nexport const getScrollYPosition = (el?: HTMLElement | Window): number => {\n  if (el === undefined) {\n    return 0;\n  }\n\n  let scrollPos = 0;\n  if ('scrollTop' in el) {\n    scrollPos = el.scrollTop;\n  } else if ('scrollY' in el) {\n    scrollPos = el.scrollY;\n  }\n\n  // Round this value to an integer as it may be fractional.\n  // See: https://developer.mozilla.org/en-US/docs/Web/API/Element/scrollTop\n  // See: https://developer.mozilla.org/en-US/docs/Web/API/Window/scrollY\n  return Math.ceil(scrollPos);\n};\n\nexport const setScrollYPosition = (el: HTMLElement | Window, pos: number): void => {\n  if ('scrollTop' in el) {\n    el.scrollTop = pos;\n  } else if ('scrollY' in el) {\n    el.scrollTo(el.scrollX, pos);\n  }\n};\n", "import * as React from 'react';\nimport { styled } from '../../Utilities';\nimport { getStyles } from './GroupedList.styles';\nimport { GroupedListBase } from './GroupedList.base';\nimport type { IGroupedListProps, IGroupedListStyles, IGroupedListStyleProps } from './GroupedList.types';\n\nexport const GroupedList: React.FunctionComponent<IGroupedListProps> = styled<\n  IGroupedListProps,\n  IGroupedListStyleProps,\n  IGroupedListStyles\n>(GroupedListBase, getStyles, undefined, {\n  scope: 'GroupedList',\n});\n\nexport type { IGroupedListProps };\n", "import * as React from 'react';\nimport {\n  initializeComponentRef,\n  classNamesFunction,\n  KeyCodes,\n  getRTLSafeKeyCode,\n  css,\n  getId,\n  EventGroup,\n  IRenderFunction,\n} from '../../Utilities';\nimport { List, ScrollToMode, IListProps } from '../../List';\nimport { ISelection, SelectionMode, SELECTION_CHANGE } from '../../Selection';\nimport { FocusZone, FocusZoneDirection } from '../../FocusZone';\nimport type { IProcessedStyleSet } from '../../Styling';\nimport type {\n  IGroupedList,\n  IGroup,\n  IGroupRenderProps,\n  IGroupedListStyleProps,\n  IGroupedListStyles,\n} from './GroupedList.types';\nimport type { IGroupedListV2Props } from './GroupedListV2.types';\nimport { GroupHeader } from './GroupHeader';\nimport { GroupShowAll } from './GroupShowAll';\nimport { GroupFooter } from './GroupFooter';\nimport type { IGroupHeaderProps } from './GroupHeader';\nimport type { IGroupShowAllProps } from './GroupShowAll.styles';\nimport type { IGroupFooterProps } from './GroupFooter.types';\n\nexport interface IGroupedListV2State {\n  selectionMode?: IGroupedListV2Props['selectionMode'];\n  compact?: IGroupedListV2Props['compact'];\n  groups?: IGroup[];\n  items?: IGroupedListV2Props['items'];\n  listProps?: IGroupedListV2Props['listProps'];\n  version: {};\n  groupExpandedVersion: {};\n}\n\ntype IITemGroupedItem = {\n  type: 'item';\n  group: IGroup;\n  item: any;\n  itemIndex: number;\n};\n\ntype IShowAllGroupedItem = {\n  type: 'showAll';\n  group: IGroup;\n};\n\ntype IFooterGroupedItem = {\n  type: 'footer';\n  group: IGroup;\n};\n\ntype IHeaderGroupedItem = {\n  type: 'header';\n  group: IGroup;\n  groupId: string;\n  groupIndex: number;\n};\n\ntype IGroupedItem = IITemGroupedItem | IShowAllGroupedItem | IFooterGroupedItem | IHeaderGroupedItem;\n\ntype FlattenItems = (\n  groups: IGroup[] | undefined,\n  items: any[],\n  memoItems: IGroupedItem[],\n  groupProps: IGroupRenderProps['getGroupItemLimit'],\n) => IGroupedItem[];\n\ntype GroupStackItem = {\n  group: IGroup;\n  groupIndex: number;\n};\n\nconst flattenItems: FlattenItems = (groups, items, memoItems, getGroupItemLimit) => {\n  if (!groups) {\n    return items;\n  }\n\n  if (memoItems.length < 1) {\n    // Not the exact final size but gets us in the ballpark.\n    // This helps avoid trashing memory when building\n    // the flattened list.\n    memoItems = new Array(items.length);\n  }\n\n  let index = 0;\n\n  // const stack: IGroup[] = [];\n  const stack: GroupStackItem[] = [];\n  let j = groups.length - 1;\n  while (j >= 0) {\n    stack.push({ group: groups[j], groupIndex: j + 1 });\n    j--;\n  }\n\n  while (stack.length > 0) {\n    // eslint-disable-next-line prefer-const\n    let { group, groupIndex } = stack.pop()!;\n    memoItems[index] = {\n      group,\n      groupId: getId('GroupedListSection'),\n      type: 'header',\n      groupIndex,\n    };\n\n    index++;\n\n    while (group.isCollapsed !== true && group?.children && group.children.length > 0) {\n      j = group.children.length - 1;\n      while (j > 0) {\n        stack.push({ group: group.children[j], groupIndex: j + 1 });\n        j--;\n      }\n      group = group.children[0];\n      memoItems[index] = {\n        group,\n        groupId: getId('GroupedListSection'),\n        type: 'header',\n        groupIndex: 1,\n      };\n      index++;\n    }\n\n    if (group.isCollapsed !== true) {\n      let itemIndex = group.startIndex;\n      const renderCount = getGroupItemLimit ? getGroupItemLimit(group) : Infinity;\n      const count = !group.isShowingAll ? group.count : items.length;\n      const itemEnd = itemIndex + Math.min(count, renderCount);\n      while (itemIndex < itemEnd) {\n        memoItems[index] = {\n          group,\n          item: items[itemIndex],\n          itemIndex, // track the index in `item` for later rendering/selection\n          type: 'item',\n        };\n        itemIndex++;\n        index++;\n      }\n\n      const isShowAllVisible =\n        !group.children &&\n        !group.isCollapsed &&\n        !group.isShowingAll &&\n        (group.count > renderCount || group.hasMoreData);\n\n      if (isShowAllVisible) {\n        memoItems[index] = {\n          group,\n          type: 'showAll',\n        };\n        index++;\n      }\n    }\n\n    // Placeholder for a potential footer.\n    // Whether or not a footer is displayed is resolved\n    // by the footer render function so this is just a marker\n    // for where a footer may go.\n    memoItems[index] = {\n      group,\n      type: 'footer',\n    };\n    index++;\n  }\n\n  memoItems.length = index;\n\n  // console.log('MEMO ITEMS', memoItems);\n\n  return memoItems;\n};\n\ntype UseIsGroupSelected = (\n  startIndex: number,\n  count: number,\n  selection?: ISelection,\n  eventGroup?: EventGroup,\n) => boolean;\n\nconst useIsGroupSelected: UseIsGroupSelected = (startIndex, count, selection, eventGroup) => {\n  const [isSelected, setIsSelected] = React.useState(() => selection?.isRangeSelected(startIndex, count) ?? false);\n\n  React.useEffect(() => {\n    if (selection && eventGroup) {\n      const changeHandler = () => {\n        setIsSelected(selection?.isRangeSelected(startIndex, count) ?? false);\n      };\n\n      eventGroup.on(selection, SELECTION_CHANGE, changeHandler);\n\n      return () => {\n        eventGroup?.off(selection, SELECTION_CHANGE, changeHandler);\n      };\n    }\n  }, [startIndex, count, selection, eventGroup]);\n\n  return isSelected;\n};\n\nconst computeIsSomeGroupExpanded = (groups: IGroup[] | undefined): boolean => {\n  return !!(\n    groups && groups.some(group => (group.children ? computeIsSomeGroupExpanded(group.children) : !group.isCollapsed))\n  );\n};\n\nconst setGroupsCollapsedState = (groups: IGroup[] | undefined, isCollapsed: boolean): void => {\n  if (groups === undefined) {\n    return;\n  }\n  for (let groupIndex = 0; groupIndex < groups.length; groupIndex++) {\n    groups[groupIndex].isCollapsed = isCollapsed;\n  }\n};\n\nconst isInnerZoneKeystroke = (ev: React.KeyboardEvent<HTMLElement>): boolean => {\n  // eslint-disable-next-line deprecation/deprecation\n  return ev.which === getRTLSafeKeyCode(KeyCodes.right);\n};\n\nconst getClassNames = classNamesFunction<IGroupedListStyleProps, IGroupedListStyles>();\n\nconst getKey: IListProps['getKey'] = (item, _index) => {\n  switch (item.type) {\n    case 'item':\n      return item.item?.key ?? null;\n\n    case 'header':\n      return item.group.key;\n\n    case 'footer':\n      return `${item.group.key}-footer`;\n\n    case 'showAll':\n      return `${item.group.key}-showAll`;\n  }\n\n  return null;\n};\n\nconst renderGroupHeader = (props: IGroupHeaderProps): JSX.Element => {\n  return <GroupHeader {...props} />;\n};\n\nconst renderGroupShowAll = (props: IGroupShowAllProps): JSX.Element => {\n  return <GroupShowAll {...props} />;\n};\n\nconst renderGroupFooter = (props: IGroupFooterProps): JSX.Element | null => {\n  if (props.group && props.footerText) {\n    return <GroupFooter {...props} />;\n  }\n\n  return null;\n};\n\nexport const GroupedListV2FC: React.FC<IGroupedListV2Props> = props => {\n  const {\n    selection,\n    selectionMode = SelectionMode.multiple,\n    groupProps = {},\n    compact = false,\n    items = [],\n    groups,\n    onGroupExpandStateChanged,\n\n    className,\n    usePageCache,\n    onShouldVirtualize,\n    theme,\n    role = 'treegrid',\n    styles,\n    focusZoneProps = {},\n    rootListProps = {},\n    onRenderCell,\n    viewport,\n    listRef,\n    groupExpandedVersion,\n    version: versionFromProps,\n  } = props;\n\n  const {\n    onRenderHeader = renderGroupHeader,\n    onRenderFooter = renderGroupFooter,\n    onRenderShowAll = renderGroupShowAll,\n  } = groupProps;\n\n  const classNames: IProcessedStyleSet<IGroupedListStyles> = getClassNames(styles, {\n    theme: theme!,\n    className,\n    compact,\n  });\n\n  const events = React.useRef<EventGroup>();\n  const flatList = React.useRef<IGroupedItem[]>([]);\n  const isSomeGroupExpanded = React.useRef<boolean>(computeIsSomeGroupExpanded(groups));\n\n  const [version, setVersion] = React.useState({});\n  const [toggleVersion, setToggleVersion] = React.useState({});\n\n  // eslint-disable-next-line deprecation/deprecation\n  const { shouldEnterInnerZone = isInnerZoneKeystroke } = focusZoneProps;\n\n  const listView = React.useMemo(() => {\n    return flattenItems(groups, items, flatList.current, groupProps?.getGroupItemLimit);\n    // eslint-disable-next-line react-hooks/exhaustive-deps\n  }, [groups, groupProps?.getGroupItemLimit, items, toggleVersion, flatList, groupExpandedVersion]);\n\n  const getPageSpecification = React.useCallback(\n    (flattenedIndex: number): { key?: string } => {\n      const pageGroup = listView[flattenedIndex];\n      return {\n        key: pageGroup.type === 'header' ? pageGroup.group.key : undefined,\n      };\n    },\n    [listView],\n  );\n\n  React.useEffect(() => {\n    if (groupProps?.isAllGroupsCollapsed) {\n      setGroupsCollapsedState(groups, groupProps.isAllGroupsCollapsed);\n    }\n    events.current = new EventGroup(this);\n\n    return () => {\n      events.current?.dispose();\n      events.current = undefined;\n    };\n    // eslint-disable-next-line react-hooks/exhaustive-deps\n  }, []);\n\n  React.useEffect(() => {\n    setVersion({});\n  }, [versionFromProps]);\n\n  React.useEffect(() => {\n    const newIsSomeGroupExpanded = computeIsSomeGroupExpanded(groups);\n    if (newIsSomeGroupExpanded !== isSomeGroupExpanded.current) {\n      isSomeGroupExpanded.current = newIsSomeGroupExpanded;\n      onGroupExpandStateChanged?.(newIsSomeGroupExpanded);\n    }\n  }, [groups, toggleVersion, onGroupExpandStateChanged, groupExpandedVersion]);\n\n  const onToggleCollapse = React.useCallback(\n    (group: IGroup): void => {\n      const onToggleCollapseFn = groupProps?.headerProps?.onToggleCollapse;\n\n      if (group) {\n        onToggleCollapseFn?.(group);\n        group.isCollapsed = !group.isCollapsed;\n        setToggleVersion({});\n        setVersion({});\n      }\n    },\n    [setToggleVersion, groupProps],\n  );\n\n  const onToggleSelectGroup = (group: IGroup): void => {\n    if (group && selection && selectionMode === SelectionMode.multiple) {\n      selection.toggleRangeSelected(group.startIndex, group.count);\n    }\n  };\n\n  const onToggleSummarize = (group: IGroup): void => {\n    const onToggleSummarizeFn = groupProps?.showAllProps?.onToggleSummarize;\n\n    if (onToggleSummarizeFn) {\n      onToggleSummarizeFn(group);\n    } else {\n      if (group) {\n        group.isShowingAll = !group.isShowingAll;\n      }\n\n      setVersion({});\n      setToggleVersion({});\n    }\n  };\n\n  const getDividerProps = (group: IGroup, flattenedIndex: number) => {\n    const dividerProps = {\n      group,\n      groupIndex: flattenedIndex,\n      groupLevel: group.level ?? 0,\n      viewport,\n      selectionMode,\n      groups,\n      compact,\n      onToggleSelectGroup,\n      onToggleCollapse,\n      onToggleSummarize,\n    };\n\n    return dividerProps;\n  };\n\n  const renderHeader = (item: IHeaderGroupedItem, flattenedIndex: number): React.ReactNode => {\n    const group = item.group;\n\n    let ariaProps;\n    if (role === 'treegrid') {\n      // GroupedList default role\n      ariaProps = {\n        ariaLevel: group.level ? group.level + 1 : 1,\n        ariaSetSize: groups ? groups.length : undefined,\n        ariaPosInSet: item.groupIndex,\n      };\n    } else {\n      // Grouped DetailsList\n      ariaProps = {\n        ariaRowIndex: flattenedIndex,\n      };\n    }\n\n    const headerProps = {\n      ...groupProps!.headerProps,\n      ...getDividerProps(item.group, flattenedIndex),\n      key: group.key,\n      groupedListId: item.groupId,\n      ...ariaProps,\n    };\n\n    return (\n      <GroupItem\n        render={onRenderHeader}\n        defaultRender={renderGroupHeader}\n        item={item}\n        selection={selection}\n        eventGroup={events.current}\n        props={headerProps}\n      />\n    );\n  };\n\n  const renderShowAll = (item: IShowAllGroupedItem, flattenedIndex: number): React.ReactNode => {\n    const group = item.group;\n    const groupShowAllProps = {\n      ...groupProps!.showAllProps,\n      ...getDividerProps(group, flattenedIndex),\n      key: group.key ? `${group.key}-show-all` : undefined,\n    };\n\n    return onRenderShowAll(groupShowAllProps, renderGroupShowAll);\n  };\n\n  const renderFooter = (item: IFooterGroupedItem, flattenedIndex: number): React.ReactNode => {\n    const group = item.group;\n    const groupFooterProps = {\n      ...groupProps!.footerProps,\n      ...getDividerProps(group, flattenedIndex),\n      key: group.key ? `${group.key}-footer` : undefined,\n    };\n\n    return onRenderFooter(groupFooterProps, renderGroupFooter);\n  };\n\n  const renderItem = (item: IGroupedItem, flattenedIndex: number): React.ReactNode => {\n    if (item.type === 'header') {\n      return renderHeader(item, flattenedIndex);\n    } else if (item.type === 'showAll') {\n      return renderShowAll(item, flattenedIndex);\n    } else if (item.type === 'footer') {\n      return renderFooter(item, flattenedIndex);\n    } else {\n      const level = item.group.level ? item.group.level + 1 : 1;\n      return onRenderCell(level, item.item, item.itemIndex ?? flattenedIndex, item.group);\n    }\n  };\n\n  return (\n    <FocusZone\n      direction={FocusZoneDirection.vertical}\n      data-automationid=\"GroupedList\"\n      data-is-scrollable=\"false\"\n      role=\"presentation\"\n      {...focusZoneProps}\n      shouldEnterInnerZone={shouldEnterInnerZone}\n      className={css(classNames.root, focusZoneProps.className)}\n    >\n      <List\n        ref={listRef}\n        role={role}\n        items={listView}\n        // eslint-disable-next-line\n        onRenderCellConditional={renderItem}\n        usePageCache={usePageCache}\n        onShouldVirtualize={onShouldVirtualize}\n        getPageSpecification={getPageSpecification}\n        version={version}\n        getKey={getKey}\n        {...rootListProps}\n      />\n    </FocusZone>\n  );\n};\n\ninterface IGroupItemProps<T> {\n  props: T;\n  render: IRenderFunction<T>;\n  defaultRender: (props?: T) => JSX.Element | null;\n  item: any;\n  selection?: ISelection;\n  eventGroup?: EventGroup;\n}\n\nconst GroupItem = <T,>({\n  render,\n  defaultRender,\n  item,\n  selection,\n  eventGroup,\n  props,\n}: React.PropsWithChildren<IGroupItemProps<T>>): React.ReactElement | null => {\n  const group = item.group;\n\n  const isSelected = useIsGroupSelected(group.startIndex, group.count, selection, eventGroup);\n  const mergedProps = {\n    ...props,\n    isSelected,\n    selected: isSelected,\n  };\n  return render(mergedProps, defaultRender);\n};\n\nexport class GroupedListV2Wrapper\n  extends React.Component<IGroupedListV2Props, IGroupedListV2State>\n  implements IGroupedList\n{\n  public static displayName: string = 'GroupedListV2';\n  private _list = React.createRef<List>();\n\n  public static getDerivedStateFromProps(\n    nextProps: IGroupedListV2Props,\n    previousState: IGroupedListV2State,\n  ): IGroupedListV2State {\n    const { groups, selectionMode, compact, items, listProps } = nextProps;\n    const nextListVersion = listProps && listProps.version;\n\n    const nextState = {\n      ...previousState,\n      groups,\n    };\n\n    if (\n      nextListVersion !== previousState.version ||\n      items !== previousState.items ||\n      groups !== previousState.groups ||\n      selectionMode !== previousState.selectionMode ||\n      compact !== previousState.compact\n    ) {\n      nextState.version = {};\n    }\n\n    return nextState;\n  }\n\n  constructor(props: IGroupedListV2Props) {\n    super(props);\n    initializeComponentRef(this);\n\n    const { listProps: { version = {} } = {}, groups } = props;\n    this.state = {\n      version,\n      groupExpandedVersion: {},\n      groups,\n    };\n  }\n\n  public scrollToIndex(index: number, measureItem?: (itemIndex: number) => number, scrollToMode?: ScrollToMode): void {\n    if (this._list.current) {\n      this._list.current.scrollToIndex(index, measureItem, scrollToMode);\n    }\n  }\n\n  public getStartItemIndexInView(): number {\n    return this._list.current?.getStartItemIndexInView() || 0;\n  }\n\n  public render(): JSX.Element {\n    return <GroupedListV2FC {...this.props} {...this.state} listRef={this._list} />;\n  }\n\n  public forceUpdate() {\n    super.forceUpdate();\n    this._forceListUpdate();\n  }\n\n  public toggleCollapseAll(allCollapsed: boolean): void {\n    const { groups } = this.state;\n    const { groupProps } = this.props;\n\n    if (groups && groups.length > 0) {\n      groupProps?.onToggleCollapseAll?.(allCollapsed);\n\n      setGroupsCollapsedState(groups, allCollapsed);\n      this.setState({\n        groupExpandedVersion: {},\n      });\n\n      this.forceUpdate();\n    }\n  }\n\n  private _forceListUpdate(): void {\n    this.setState({\n      version: {},\n    });\n  }\n}\n", "import * as React from 'react';\nimport { styled } from '../../Utilities';\nimport { getStyles } from './GroupedList.styles';\nimport { GroupedListV2Wrapper } from './GroupedListV2.base';\nimport type { IGroupedListStyles, IGroupedListStyleProps } from './GroupedList.types';\nimport type { IGroupedListV2Props } from './GroupedListV2.types';\n\n/**\n * NOTE: GroupedListV2 is \"unstable\" and meant for preview use. It passes\n * the same test suite as GroupedList but it is an entirely new implementation\n * so it may have bugs and implementation details may change without notice.\n *\n * GroupedListV2 is an API-compatible replacement for GroupedList with a new implementation\n * that addresses issues GroupedList has with virtualizing nested lists under certain\n * conditions.\n */\nconst GroupedListV2: React.FunctionComponent<IGroupedListV2Props> = styled<\n  IGroupedListV2Props,\n  IGroupedListStyleProps,\n  IGroupedListStyles\n>(GroupedListV2Wrapper, getStyles, undefined, {\n  scope: 'GroupedListV2',\n});\n\nGroupedListV2.displayName = 'GroupedListV2_unstable';\n\nexport { GroupedListV2 as GroupedListV2_unstable };\nexport type { IGroupedListV2Props } from './GroupedListV2.types';\n", "import type { IGroup } from '../../components/GroupedList/GroupedList.types';\n\n/**\n * Takes an array of groups and returns a count of the groups and all descendant groups.\n * @param groups - The array of groups to count.\n */\nexport const GetGroupCount = (groups: IGroup[] | undefined): number => {\n  let total = 0;\n\n  if (groups) {\n    const remainingGroups = [...groups];\n    let currentGroup: IGroup;\n\n    while (remainingGroups && remainingGroups.length > 0) {\n      ++total;\n\n      currentGroup = remainingGroups.pop() as IGroup;\n\n      if (currentGroup && currentGroup.children) {\n        remainingGroups.push(...currentGroup.children);\n      }\n    }\n  }\n\n  return total;\n};\n", "import * as React from 'react';\nimport { css, styled, classNamesFunction, composeRenderFunction, getNativeElementProps } from '../../Utilities';\nimport { Check } from '../../Check';\nimport { getDetailsRowCheckStyles } from './DetailsRowCheck.styles';\nimport { SelectionMode } from '../../Selection';\nimport type {\n  IDetailsRowCheckProps,\n  IDetailsCheckboxProps,\n  IDetailsRowCheckStyleProps,\n  IDetailsRowCheckStyles,\n} from './DetailsRowCheck.types';\nimport type { ITheme } from '../../Styling';\n\nconst getClassNames = classNamesFunction<IDetailsRowCheckStyleProps, IDetailsRowCheckStyles>();\n\nconst DetailsRowCheckBase: React.FunctionComponent<IDetailsRowCheckProps> = props => {\n  const {\n    isVisible = false,\n    canSelect = false,\n    anySelected = false,\n    selected = false,\n    selectionMode,\n    isHeader = false,\n    className,\n    checkClassName,\n    styles,\n    theme,\n    compact,\n    onRenderDetailsCheckbox,\n    useFastIcons = true, // must be removed from buttonProps\n    ...buttonProps\n  } = props;\n  const defaultCheckboxRender = useFastIcons ? _fastDefaultCheckboxRender : _defaultCheckboxRender;\n\n  const onRenderCheckbox = onRenderDetailsCheckbox\n    ? composeRenderFunction(onRenderDetailsCheckbox, defaultCheckboxRender)\n    : defaultCheckboxRender;\n\n  const classNames = getClassNames(styles, {\n    theme: theme!,\n    canSelect,\n    selected,\n    anySelected,\n    className,\n    isHeader,\n    isVisible,\n    compact,\n  });\n\n  const detailsCheckboxProps: IDetailsCheckboxProps = {\n    checked: selected,\n    theme,\n  };\n\n  const divProps = getNativeElementProps('div', buttonProps, ['aria-label', 'aria-labelledby', 'aria-describedby']);\n\n  const checkRole = selectionMode === SelectionMode.single ? 'radio' : 'checkbox';\n\n  return canSelect ? (\n    <div\n      {...buttonProps}\n      role={checkRole}\n      // eslint-disable-next-line deprecation/deprecation\n      className={css(classNames.root, classNames.check)}\n      aria-checked={selected}\n      data-selection-toggle={true}\n      data-automationid=\"DetailsRowCheck\"\n      tabIndex={-1}\n    >\n      {onRenderCheckbox(detailsCheckboxProps)}\n    </div>\n  ) : (\n    // eslint-disable-next-line deprecation/deprecation\n    <div {...divProps} className={css(classNames.root, classNames.check)} />\n  );\n};\n\nconst FastCheck = React.memo((props: { theme?: ITheme; checked?: boolean; className?: string }) => {\n  return <Check theme={props.theme} checked={props.checked} className={props.className} useFastIcons />;\n});\n\nfunction _defaultCheckboxRender(checkboxProps: IDetailsCheckboxProps) {\n  return <Check checked={checkboxProps.checked} />;\n}\n\nfunction _fastDefaultCheckboxRender(checkboxProps: IDetailsCheckboxProps) {\n  return <FastCheck theme={checkboxProps.theme} checked={checkboxProps.checked} />;\n}\n\nexport const DetailsRowCheck = styled<IDetailsRowCheckProps, IDetailsRowCheckStyleProps, IDetailsRowCheckStyles>(\n  DetailsRowCheckBase,\n  getDetailsRowCheckStyles,\n  undefined,\n  { scope: 'DetailsRowCheck' },\n  true,\n);\n", "import { EventGroup, getDocument } from '../../Utilities';\nimport type {\n  IDragDropHelper,\n  IDragDropTarget,\n  IDragDropOptions,\n  IDragDropEvent,\n  IDragDropContext,\n} from './interfaces';\nimport type { ISelection } from '../../utilities/selection/interfaces';\n\nconst MOUSEDOWN_PRIMARY_BUTTON = 0; // for mouse down event we are using ev.button property, 0 means left button\nconst MOUSEMOVE_PRIMARY_BUTTON = 1; // for mouse move event we are using ev.buttons property, 1 means left button\n\nexport interface IDragDropHelperParams {\n  selection: ISelection;\n  minimumPixelsForDrag?: number;\n}\n\nexport class DragDropHelper implements IDragDropHelper {\n  private _dragEnterCounts: { [key: string]: number };\n  private _isDragging: boolean;\n  private _dragData: {\n    eventTarget: EventTarget | null;\n    clientX: number;\n    clientY: number;\n    dataTransfer?: DataTransfer;\n    dropTarget?: IDragDropTarget;\n    dragTarget?: IDragDropTarget;\n  } | null;\n  private _selection: ISelection;\n  private _activeTargets: {\n    [key: string]: {\n      target: IDragDropTarget;\n      dispose: () => void;\n    };\n  };\n  private _events: EventGroup;\n  private _lastId: number;\n  private _initialized: boolean;\n\n  constructor(params: IDragDropHelperParams) {\n    this._selection = params.selection;\n    this._dragEnterCounts = {};\n    this._activeTargets = {};\n    this._lastId = 0;\n    // To make this class cheap to create, which allows simplifying some logic elsewhere,\n    // only initialize the event group and global event handlers as needed.\n    this._initialized = false;\n  }\n\n  public dispose(): void {\n    if (this._events) {\n      this._events.dispose();\n    }\n  }\n\n  public subscribe(\n    root: HTMLElement,\n    events: EventGroup,\n    dragDropOptions: IDragDropOptions,\n  ): {\n    key: string;\n    dispose(): void;\n  } {\n    if (!this._initialized) {\n      this._events = new EventGroup(this);\n\n      const doc = getDocument();\n\n      // clear drag data when mouse up, use capture event to ensure it will be run\n      if (doc) {\n        this._events.on(doc.body, 'mouseup', this._onMouseUp.bind(this), true);\n        this._events.on(doc, 'mouseup', this._onDocumentMouseUp.bind(this), true);\n      }\n\n      this._initialized = true;\n    }\n\n    const { key = `${++this._lastId}` } = dragDropOptions;\n\n    const handlers: {\n      callback: (context: IDragDropContext, event?: any) => void;\n      eventName: string;\n    }[] = [];\n\n    let onDragStart: (event: DragEvent) => void;\n    let onDragLeave: (event: DragEvent) => void;\n    let onDragEnter: (event: DragEvent) => void;\n    let onDragEnd: (event: DragEvent) => void;\n    let onDrop: (event: DragEvent) => void;\n    let onDragOver: (event: DragEvent) => void;\n    let onMouseDown: (event: MouseEvent) => void;\n\n    let isDraggable: boolean;\n    let isDroppable: boolean;\n\n    let activeTarget: {\n      target: IDragDropTarget;\n      dispose: () => void;\n    };\n\n    if (dragDropOptions && root) {\n      const { eventMap, context, updateDropState } = dragDropOptions;\n\n      const dragDropTarget: IDragDropTarget = {\n        root,\n        options: dragDropOptions,\n        key,\n      };\n\n      isDraggable = this._isDraggable(dragDropTarget);\n      isDroppable = this._isDroppable(dragDropTarget);\n\n      if (isDraggable || isDroppable) {\n        if (eventMap) {\n          for (const event of eventMap) {\n            const handler = {\n              callback: event.callback.bind(null, context),\n              eventName: event.eventName,\n            };\n\n            handlers.push(handler);\n\n            this._events.on(root, handler.eventName, handler.callback);\n          }\n        }\n      }\n\n      if (isDroppable) {\n        // If the target is droppable, wire up global event listeners to track drop-related events.\n        onDragLeave = (event: DragEvent) => {\n          if (!(event as IDragDropEvent).isHandled) {\n            (event as IDragDropEvent).isHandled = true;\n            this._dragEnterCounts[key]--;\n            if (this._dragEnterCounts[key] === 0) {\n              updateDropState(false /* isDropping */, event);\n            }\n          }\n        };\n\n        onDragEnter = (event: DragEvent) => {\n          event.preventDefault(); // needed for IE\n          if (!(event as IDragDropEvent).isHandled) {\n            (event as IDragDropEvent).isHandled = true;\n            this._dragEnterCounts[key]++;\n            if (this._dragEnterCounts[key] === 1) {\n              updateDropState(true /* isDropping */, event);\n            }\n          }\n        };\n\n        onDragEnd = (event: DragEvent) => {\n          this._dragEnterCounts[key] = 0;\n          updateDropState(false /* isDropping */, event);\n        };\n\n        onDrop = (event: DragEvent) => {\n          this._dragEnterCounts[key] = 0;\n          updateDropState(false /* isDropping */, event);\n\n          if (dragDropOptions.onDrop) {\n            dragDropOptions.onDrop(dragDropOptions.context.data, event);\n          }\n        };\n\n        onDragOver = (event: DragEvent) => {\n          event.preventDefault();\n          if (dragDropOptions.onDragOver) {\n            dragDropOptions.onDragOver(dragDropOptions.context.data, event);\n          }\n        };\n\n        this._dragEnterCounts[key] = 0;\n\n        // dragenter and dragleave will be fired when hover to the child element\n        // but we only want to change state when enter or leave the current element\n        // use the count to ensure it.\n        events.on(root, 'dragenter', onDragEnter);\n        events.on(root, 'dragleave', onDragLeave);\n        events.on(root, 'dragend', onDragEnd);\n        events.on(root, 'drop', onDrop);\n        events.on(root, 'dragover', onDragOver);\n      }\n\n      if (isDraggable) {\n        // If the target is draggable, wire up local event listeners for mouse events.\n        onMouseDown = this._onMouseDown.bind(this, dragDropTarget);\n        onDragEnd = this._onDragEnd.bind(this, dragDropTarget);\n\n        // We need to add in data so that on Firefox we show the ghost element when dragging\n        onDragStart = (event: DragEvent) => {\n          const options = dragDropOptions;\n          if (options && options.onDragStart) {\n            options.onDragStart(options.context.data, options.context.index, this._selection.getSelection(), event);\n          }\n          this._isDragging = true;\n          if (event.dataTransfer) {\n            event.dataTransfer.setData('id', root.id);\n          }\n        };\n\n        events.on(root, 'dragstart', onDragStart);\n        events.on(root, 'mousedown', onMouseDown);\n        events.on(root, 'dragend', onDragEnd);\n      }\n\n      activeTarget = {\n        target: dragDropTarget,\n        dispose: () => {\n          if (this._activeTargets[key] === activeTarget) {\n            delete this._activeTargets[key];\n          }\n\n          if (root) {\n            for (const handler of handlers) {\n              this._events.off(root, handler.eventName, handler.callback);\n            }\n\n            if (isDroppable) {\n              events.off(root, 'dragenter', onDragEnter);\n              events.off(root, 'dragleave', onDragLeave);\n              events.off(root, 'dragend', onDragEnd);\n              events.off(root, 'dragover', onDragOver);\n              events.off(root, 'drop', onDrop);\n            }\n\n            if (isDraggable) {\n              events.off(root, 'dragstart', onDragStart);\n              events.off(root, 'mousedown', onMouseDown);\n              events.off(root, 'dragend', onDragEnd);\n            }\n          }\n        },\n      };\n\n      this._activeTargets[key] = activeTarget;\n    }\n\n    return {\n      key,\n      dispose: () => {\n        if (activeTarget) {\n          activeTarget.dispose();\n        }\n      },\n    };\n  }\n\n  public unsubscribe(root: HTMLElement, key: string): void {\n    const activeTarget = this._activeTargets[key];\n\n    if (activeTarget) {\n      activeTarget.dispose();\n    }\n  }\n\n  private _onDragEnd(target: IDragDropTarget, event: DragEvent): void {\n    const { options } = target;\n    if (options.onDragEnd) {\n      options.onDragEnd(options.context.data, event);\n    }\n  }\n\n  /**\n   * clear drag data when mouse up on body\n   */\n  private _onMouseUp(event: MouseEvent): void {\n    this._isDragging = false;\n    if (this._dragData) {\n      for (const key of Object.keys(this._activeTargets)) {\n        const activeTarget = this._activeTargets[key];\n\n        if (activeTarget.target.root) {\n          this._events.off(activeTarget.target.root, 'mousemove');\n          this._events.off(activeTarget.target.root, 'mouseleave');\n        }\n      }\n\n      if (this._dragData.dropTarget) {\n        // raise dragleave event to let dropTarget know it need to remove dropping style\n        EventGroup.raise(this._dragData.dropTarget.root, 'dragleave');\n        EventGroup.raise(this._dragData.dropTarget.root, 'drop');\n      }\n    }\n    this._dragData = null;\n  }\n\n  /**\n   * clear drag data when mouse up outside of the document\n   */\n  private _onDocumentMouseUp(event: MouseEvent): void {\n    const doc = getDocument();\n\n    if (doc && event.target === doc.documentElement) {\n      this._onMouseUp(event);\n    }\n  }\n\n  /**\n   * when mouse move over a new drop target while dragging some items,\n   * fire dragleave on the old target and fire dragenter to the new target\n   * The target will handle style change on dragenter and dragleave events.\n   */\n  private _onMouseMove(target: IDragDropTarget, event: MouseEvent): void {\n    const {\n      // use buttons property here since ev.button in some edge case is not updating well during the move.\n      // but firefox doesn't support it, so we set the default value when it is not defined.\n      buttons = MOUSEMOVE_PRIMARY_BUTTON,\n    } = event;\n\n    if (this._dragData && buttons !== MOUSEMOVE_PRIMARY_BUTTON) {\n      // cancel mouse down event and return early when the primary button is not pressed\n      this._onMouseUp(event);\n      return;\n    }\n\n    const { root, key } = target;\n    if (this._isDragging) {\n      if (this._isDroppable(target)) {\n        // we can have nested drop targets in the DOM, like a folder inside a group. In that case, when we drag into\n        // the inner target (folder), we first set dropTarget to the inner element. But the same event is bubbled to the\n        // outer target too, and we need to prevent the outer one from taking over.\n        // So, check if the last dropTarget is not a child of the current.\n\n        if (this._dragData) {\n          if (\n            this._dragData.dropTarget &&\n            this._dragData.dropTarget.key !== key &&\n            !this._isChild(root, this._dragData.dropTarget.root)\n          ) {\n            if (this._dragEnterCounts[this._dragData.dropTarget.key] > 0) {\n              EventGroup.raise(this._dragData.dropTarget.root, 'dragleave');\n              EventGroup.raise(root, 'dragenter');\n              this._dragData.dropTarget = target;\n            }\n          }\n        }\n      }\n    }\n  }\n\n  /**\n   * when mouse leave a target while dragging some items, fire dragleave to the target\n   */\n  private _onMouseLeave(target: IDragDropTarget, event: MouseEvent): void {\n    if (this._isDragging) {\n      if (this._dragData && this._dragData.dropTarget && this._dragData.dropTarget.key === target.key) {\n        EventGroup.raise(target.root, 'dragleave');\n        this._dragData.dropTarget = undefined;\n      }\n    }\n  }\n\n  /**\n   * when mouse down on a draggable item, we start to track dragdata.\n   */\n  private _onMouseDown(target: IDragDropTarget, event: MouseEvent): void {\n    if (event.button !== MOUSEDOWN_PRIMARY_BUTTON) {\n      // Ignore anything except the primary button.\n      return;\n    }\n\n    if (this._isDraggable(target)) {\n      this._dragData = {\n        clientX: event.clientX,\n        clientY: event.clientY,\n        eventTarget: event.target,\n        dragTarget: target,\n      };\n\n      for (const key of Object.keys(this._activeTargets)) {\n        const activeTarget = this._activeTargets[key];\n        if (activeTarget.target.root) {\n          this._events.on(activeTarget.target.root, 'mousemove', this._onMouseMove.bind(this, activeTarget.target));\n          this._events.on(activeTarget.target.root, 'mouseleave', this._onMouseLeave.bind(this, activeTarget.target));\n        }\n      }\n    } else {\n      this._dragData = null;\n    }\n  }\n\n  /**\n   * determine whether the child target is a descendant of the parent\n   */\n  private _isChild(parentElement: HTMLElement, childElement: HTMLElement): boolean {\n    while (childElement && childElement.parentElement) {\n      if (childElement.parentElement === parentElement) {\n        return true;\n      }\n      childElement = childElement.parentElement;\n    }\n    return false;\n  }\n\n  private _isDraggable(target: IDragDropTarget): boolean {\n    const { options } = target;\n    return !!(options.canDrag && options.canDrag(options.context.data));\n  }\n\n  private _isDroppable(target: IDragDropTarget): boolean {\n    // TODO: take the drag item into consideration to prevent dragging an item into the same group\n    const { options } = target;\n    const dragContext =\n      this._dragData && this._dragData.dragTarget ? this._dragData.dragTarget.options.context : undefined;\n    return !!(options.canDrop && options.canDrop(options.context, dragContext));\n  }\n}\n", "import * as React from 'react';\nimport { Icon, FontIcon } from '../../Icon';\nimport { initializeComponentRef, EventGroup, Async, classNamesFunction, composeRenderFunction } from '../../Utilities';\nimport { ColumnActionsMode } from './DetailsList.types';\nimport { DEFAULT_CELL_STYLE_PROPS } from './DetailsRow.styles';\nimport type { IProcessedStyleSet } from '../../Styling';\nimport type { IDisposable } from '../../Utilities';\nimport type { IDragDropOptions } from '../../DragDrop';\nimport type {\n  IDetailsColumnStyleProps,\n  IDetailsColumnProps,\n  IDetailsColumnStyles,\n  IDetailsColumnRenderTooltipProps,\n  IDetailsColumnFilterIconProps,\n} from './DetailsColumn.types';\nimport { ITooltipHost } from '../Tooltip/TooltipHost.types';\n\nconst MOUSEDOWN_PRIMARY_BUTTON = 0; // for mouse down event we are using ev.button property, 0 means left button\n\nconst getClassNames = classNamesFunction<IDetailsColumnStyleProps, IDetailsColumnStyles>();\nconst TRANSITION_DURATION_DRAG = 200; // ms\nconst TRANSITION_DURATION_DROP = 1500; // ms\nconst CLASSNAME_ADD_INTERVAL = 20; // ms\n\nconst defaultOnRenderHeader =\n  (classNames: IProcessedStyleSet<IDetailsColumnStyles>) =>\n  (props?: IDetailsColumnProps): JSX.Element | null => {\n    if (!props) {\n      return null;\n    }\n\n    if (props.column.isIconOnly) {\n      return <span className={classNames.accessibleLabel}>{props.column.name}</span>;\n    }\n\n    return <>{props.column.name}</>;\n  };\n\n/**\n * Component for rendering columns in a `DetailsList`.\n *\n * {@docCategory DetailsList}\n */\nexport class DetailsColumnBase extends React.Component<IDetailsColumnProps> {\n  private _async: Async;\n  private _events: EventGroup;\n  private _root = React.createRef<HTMLDivElement>();\n  private _dragDropSubscription?: IDisposable;\n  private _classNames: IProcessedStyleSet<IDetailsColumnStyles>;\n  private _tooltipRef = React.createRef<ITooltipHost>();\n\n  constructor(props: IDetailsColumnProps) {\n    super(props);\n    initializeComponentRef(this);\n    this._async = new Async(this);\n    this._events = new EventGroup(this);\n  }\n\n  public render(): JSX.Element {\n    const {\n      column,\n      parentId,\n      isDraggable,\n      styles,\n      theme,\n      cellStyleProps = DEFAULT_CELL_STYLE_PROPS,\n      useFastIcons = true,\n    } = this.props;\n    const { onRenderColumnHeaderTooltip = this._onRenderColumnHeaderTooltip } = this.props;\n\n    this._classNames = getClassNames(styles, {\n      theme: theme!,\n      headerClassName: column.headerClassName,\n      iconClassName: column.iconClassName,\n      isActionable: column.columnActionsMode !== ColumnActionsMode.disabled,\n      isEmpty: !column.name,\n      isIconVisible: column.isSorted || column.isGrouped || column.isFiltered,\n      isPadded: column.isPadded,\n      isIconOnly: column.isIconOnly,\n      cellStyleProps,\n      transitionDurationDrag: TRANSITION_DURATION_DRAG,\n      transitionDurationDrop: TRANSITION_DURATION_DROP,\n    });\n\n    const classNames = this._classNames;\n    const IconComponent = useFastIcons ? FontIcon : Icon;\n\n    const onRenderFilterIcon = column.onRenderFilterIcon\n      ? composeRenderFunction(column.onRenderFilterIcon, this._onRenderFilterIcon(this._classNames))\n      : this._onRenderFilterIcon(this._classNames);\n\n    const onRenderHeader = column.onRenderHeader\n      ? composeRenderFunction(column.onRenderHeader, defaultOnRenderHeader(this._classNames))\n      : defaultOnRenderHeader(this._classNames);\n\n    const hasInnerButton =\n      column.columnActionsMode !== ColumnActionsMode.disabled &&\n      (column.onColumnClick !== undefined || this.props.onColumnClick !== undefined);\n    // use aria-describedby to point to the tooltip if the tooltip is not using the ariaLabel string\n    const shouldAssociateTooltip = this.props.onRenderColumnHeaderTooltip\n      ? !column.ariaLabel\n      : this._hasAccessibleDescription();\n    const accNameDescription = {\n      'aria-label': column.ariaLabel ? column.ariaLabel : column.isIconOnly ? column.name : undefined,\n      'aria-labelledby': column.ariaLabel || column.isIconOnly ? undefined : `${parentId}-${column.key}-name`,\n      'aria-describedby': shouldAssociateTooltip ? `${parentId}-${column.key}-tooltip` : undefined,\n    };\n\n    return (\n      <>\n        <div\n          key={column.key}\n          ref={this._root}\n          role={'columnheader'}\n          {...(!hasInnerButton && accNameDescription)}\n          aria-sort={column.isSorted ? (column.isSortedDescending ? 'descending' : 'ascending') : 'none'}\n          // when the column is not disabled and has no inner button, this node should be in the focus order\n          data-is-focusable={\n            !hasInnerButton && column.columnActionsMode !== ColumnActionsMode.disabled ? 'true' : undefined\n          }\n          className={classNames.root}\n          data-is-draggable={isDraggable}\n          draggable={isDraggable}\n          style={{\n            width:\n              column.calculatedWidth! +\n              cellStyleProps.cellLeftPadding +\n              cellStyleProps.cellRightPadding +\n              (column.isPadded ? cellStyleProps.cellExtraRightPadding : 0),\n          }}\n          data-automationid={'ColumnsHeaderColumn'}\n          data-item-key={column.key}\n          onBlur={this._onColumnBlur}\n          onFocus={this._onColumnFocus}\n        >\n          {isDraggable && (\n            <IconComponent iconName=\"GripperBarVertical\" className={classNames.gripperBarVerticalStyle} />\n          )}\n          {onRenderColumnHeaderTooltip(\n            {\n              hostClassName: classNames.cellTooltip,\n              id: `${parentId}-${column.key}-tooltip`,\n              setAriaDescribedBy: false,\n              column,\n              componentRef: this._tooltipRef,\n              content: column.columnActionsMode !== ColumnActionsMode.disabled ? column.ariaLabel : '',\n              children: (\n                <span\n                  id={`${parentId}-${column.key}`}\n                  className={classNames.cellTitle}\n                  // this node should only be focusable when it is a button\n                  data-is-focusable={\n                    hasInnerButton && column.columnActionsMode !== ColumnActionsMode.disabled ? 'true' : undefined\n                  }\n                  role={hasInnerButton ? 'button' : undefined}\n                  {...(hasInnerButton && accNameDescription)}\n                  onContextMenu={this._onColumnContextMenu}\n                  onClick={this._onColumnClick}\n                  aria-haspopup={column.columnActionsMode === ColumnActionsMode.hasDropdown ? 'menu' : undefined}\n                  aria-expanded={\n                    column.columnActionsMode === ColumnActionsMode.hasDropdown ? !!column.isMenuOpen : undefined\n                  }\n                >\n                  <span id={`${parentId}-${column.key}-name`} className={classNames.cellName}>\n                    {(column.iconName || column.iconClassName) && (\n                      <IconComponent className={classNames.iconClassName} iconName={column.iconName} />\n                    )}\n\n                    {onRenderHeader(this.props)}\n                  </span>\n\n                  {column.isFiltered && <IconComponent className={classNames.nearIcon} iconName=\"Filter\" />}\n\n                  {(column.isSorted || column.showSortIconWhenUnsorted) && (\n                    <IconComponent\n                      className={classNames.sortIcon}\n                      iconName={column.isSorted ? (column.isSortedDescending ? 'SortDown' : 'SortUp') : 'Sort'}\n                    />\n                  )}\n\n                  {column.isGrouped && <IconComponent className={classNames.nearIcon} iconName=\"GroupedDescending\" />}\n\n                  {column.columnActionsMode === ColumnActionsMode.hasDropdown &&\n                    !column.isIconOnly &&\n                    onRenderFilterIcon({\n                      'aria-hidden': true,\n                      columnProps: this.props,\n                      className: classNames.filterChevron,\n                      iconName: 'ChevronDown',\n                    })}\n                </span>\n              ),\n            },\n            this._onRenderColumnHeaderTooltip,\n          )}\n        </div>\n        {!this.props.onRenderColumnHeaderTooltip ? this._renderAccessibleDescription() : null}\n      </>\n    );\n  }\n\n  public componentDidMount(): void {\n    if (this.props.dragDropHelper && this.props.isDraggable) {\n      this._addDragDropHandling();\n    }\n\n    const classNames = this._classNames;\n\n    if (this.props.isDropped) {\n      if (this._root.current) {\n        this._root.current.classList.add(classNames.borderAfterDropping);\n\n        this._async.setTimeout(() => {\n          if (this._root.current) {\n            this._root.current.classList.add(classNames.noBorderAfterDropping);\n          }\n        }, CLASSNAME_ADD_INTERVAL);\n      }\n\n      this._async.setTimeout(() => {\n        if (this._root.current) {\n          this._root.current.classList.remove(classNames.borderAfterDropping);\n          this._root.current.classList.remove(classNames.noBorderAfterDropping);\n        }\n      }, TRANSITION_DURATION_DROP + CLASSNAME_ADD_INTERVAL);\n    }\n  }\n\n  public componentWillUnmount(): void {\n    if (this._dragDropSubscription) {\n      this._dragDropSubscription.dispose();\n      delete this._dragDropSubscription;\n    }\n    this._async.dispose();\n    this._events.dispose();\n  }\n\n  public componentDidUpdate(): void {\n    if (!this._dragDropSubscription && this.props.dragDropHelper && this.props.isDraggable) {\n      this._addDragDropHandling();\n    }\n\n    if (this._dragDropSubscription && !this.props.isDraggable) {\n      this._dragDropSubscription.dispose();\n      this._events.off(this._root.current, 'mousedown');\n      delete this._dragDropSubscription;\n    }\n  }\n\n  private _onRenderFilterIcon =\n    (classNames: IProcessedStyleSet<IDetailsColumnStyles>) =>\n    (props: IDetailsColumnFilterIconProps): JSX.Element => {\n      const { columnProps, ...iconProps } = props;\n      const IconComponent = columnProps?.useFastIcons ? FontIcon : Icon;\n\n      return <IconComponent {...iconProps} />;\n    };\n\n  private _onRenderColumnHeaderTooltip = (tooltipHostProps: IDetailsColumnRenderTooltipProps): JSX.Element => {\n    return <span className={tooltipHostProps.hostClassName}>{tooltipHostProps.children}</span>;\n  };\n\n  private _onColumnClick = (ev: React.MouseEvent<HTMLElement>): void => {\n    const { onColumnClick, column } = this.props;\n\n    if (column.columnActionsMode === ColumnActionsMode.disabled) {\n      return;\n    }\n\n    if (column.onColumnClick) {\n      column.onColumnClick(ev, column);\n    }\n\n    if (onColumnClick) {\n      onColumnClick(ev, column);\n    }\n  };\n\n  private _onColumnBlur = () => {\n    this._tooltipRef.current && this._tooltipRef.current.dismiss();\n  };\n\n  private _onColumnFocus = () => {\n    this._tooltipRef.current && this._tooltipRef.current.show();\n  };\n\n  private _getColumnDragDropOptions(): IDragDropOptions {\n    const { columnIndex } = this.props;\n    const options = {\n      selectionIndex: columnIndex,\n      context: { data: columnIndex, index: columnIndex },\n      canDrag: () => this.props.isDraggable!,\n      canDrop: () => false,\n      onDragStart: this._onDragStart,\n      updateDropState: () => undefined,\n      onDrop: () => undefined,\n      onDragEnd: this._onDragEnd,\n    };\n    return options;\n  }\n\n  private _hasAccessibleDescription(): boolean {\n    const { column } = this.props;\n\n    return !!(\n      column.filterAriaLabel ||\n      column.sortAscendingAriaLabel ||\n      column.sortDescendingAriaLabel ||\n      column.groupAriaLabel ||\n      column.sortableAriaLabel\n    );\n  }\n\n  private _renderAccessibleDescription(): JSX.Element | null {\n    const { column, parentId } = this.props;\n    const classNames = this._classNames;\n\n    return this._hasAccessibleDescription() && !this.props.onRenderColumnHeaderTooltip ? (\n      <label\n        key={`${column.key}_label`}\n        id={`${parentId}-${column.key}-tooltip`}\n        className={classNames.accessibleLabel}\n        hidden\n      >\n        {(column.isFiltered && column.filterAriaLabel) || null}\n        {((column.isSorted || column.showSortIconWhenUnsorted) &&\n          (column.isSorted\n            ? column.isSortedDescending\n              ? column.sortDescendingAriaLabel\n              : column.sortAscendingAriaLabel\n            : column.sortableAriaLabel)) ||\n          null}\n        {(column.isGrouped && column.groupAriaLabel) || null}\n      </label>\n    ) : null;\n  }\n\n  private _onDragStart = (item?: any, itemIndex?: number, selectedItems?: any[], event?: MouseEvent): void => {\n    const classNames = this._classNames;\n    if (itemIndex) {\n      this._updateHeaderDragInfo(itemIndex);\n      this._root.current!.classList.add(classNames.borderWhileDragging);\n      this._async.setTimeout(() => {\n        if (this._root.current) {\n          this._root.current.classList.add(classNames.noBorderWhileDragging);\n        }\n      }, CLASSNAME_ADD_INTERVAL);\n    }\n  };\n\n  private _onDragEnd = (item?: any, event?: MouseEvent): void => {\n    const classNames = this._classNames;\n    if (event) {\n      this._updateHeaderDragInfo(-1, event);\n    }\n    this._root.current!.classList.remove(classNames.borderWhileDragging);\n    this._root.current!.classList.remove(classNames.noBorderWhileDragging);\n  };\n\n  private _updateHeaderDragInfo = (itemIndex: number, event?: MouseEvent) => {\n    /* eslint-disable deprecation/deprecation */\n    if (this.props.setDraggedItemIndex) {\n      this.props.setDraggedItemIndex(itemIndex);\n    }\n    /* eslint-enable deprecation/deprecation */\n    if (this.props.updateDragInfo) {\n      this.props.updateDragInfo({ itemIndex }, event);\n    }\n  };\n\n  private _onColumnContextMenu = (ev: React.MouseEvent<HTMLElement>): void => {\n    const { onColumnContextMenu, column } = this.props;\n    if (column.onColumnContextMenu) {\n      column.onColumnContextMenu(column, ev);\n      ev.preventDefault();\n    }\n    if (onColumnContextMenu) {\n      onColumnContextMenu(column, ev);\n      ev.preventDefault();\n    }\n  };\n\n  private _onRootMouseDown = (ev: MouseEvent): void => {\n    const { isDraggable } = this.props;\n    // Ignore anything except the primary button.\n    if (isDraggable && ev.button === MOUSEDOWN_PRIMARY_BUTTON) {\n      ev.stopPropagation();\n    }\n  };\n\n  private _addDragDropHandling() {\n    this._dragDropSubscription = this.props.dragDropHelper!.subscribe(\n      this._root.current!,\n      this._events,\n      this._getColumnDragDropOptions(),\n    );\n\n    // We need to use native on this to prevent MarqueeSelection from handling the event before us.\n    this._events.on(this._root.current, 'mousedown', this._onRootMouseDown);\n  }\n}\n", "import { getFocusStyle, getGlobalClassNames, hiddenContentStyle, FontWeights } from '../../Styling';\nimport { DEFAULT_CELL_STYLE_PROPS } from './DetailsRow.styles';\nimport { getCellStyles } from './DetailsHeader.styles';\nimport type { IDetailsColumnStyleProps, IDetailsColumnStyles } from './DetailsColumn.types';\nimport type { IStyle } from '../../Styling';\n\nconst GlobalClassNames = {\n  isActionable: 'is-actionable',\n  cellIsCheck: 'ms-DetailsHeader-cellIsCheck',\n  collapseButton: 'ms-DetailsHeader-collapseButton',\n  isCollapsed: 'is-collapsed',\n  isAllSelected: 'is-allSelected',\n  isSelectAllHidden: 'is-selectAllHidden',\n  isResizingColumn: 'is-resizingColumn',\n  isEmpty: 'is-empty',\n  isIconVisible: 'is-icon-visible',\n  cellSizer: 'ms-DetailsHeader-cellSizer',\n  isResizing: 'is-resizing',\n  dropHintCircleStyle: 'ms-DetailsHeader-dropHintCircleStyle',\n  dropHintLineStyle: 'ms-DetailsHeader-dropHintLineStyle',\n  cellTitle: 'ms-DetailsHeader-cellTitle',\n  cellName: 'ms-DetailsHeader-cellName',\n  filterChevron: 'ms-DetailsHeader-filterChevron',\n  gripperBarVerticalStyle: 'ms-DetailsColumn-gripperBar',\n  nearIcon: 'ms-DetailsColumn-nearIcon',\n};\n\nexport const getDetailsColumnStyles = (props: IDetailsColumnStyleProps): IDetailsColumnStyles => {\n  const {\n    theme,\n    headerClassName,\n    iconClassName,\n    isActionable,\n    isEmpty,\n    isIconVisible,\n    isPadded,\n    isIconOnly,\n    cellStyleProps = DEFAULT_CELL_STYLE_PROPS,\n    transitionDurationDrag,\n    transitionDurationDrop,\n  } = props;\n\n  const { semanticColors, palette, fonts } = theme;\n  const classNames = getGlobalClassNames(GlobalClassNames, theme);\n\n  const colors = {\n    iconForegroundColor: semanticColors.bodySubtext,\n    headerForegroundColor: semanticColors.bodyText,\n    headerBackgroundColor: semanticColors.bodyBackground,\n    dropdownChevronForegroundColor: palette.neutralSecondary,\n    resizerColor: palette.neutralTertiaryAlt,\n  };\n\n  const nearIconStyle: IStyle = {\n    color: colors.iconForegroundColor,\n    opacity: 1,\n    paddingLeft: 8,\n  };\n\n  const borderWhileDragging: IStyle = {\n    outline: `1px solid ${palette.themePrimary}`,\n  };\n\n  const borderAfterDragOrDrop: IStyle = {\n    outlineColor: 'transparent',\n  };\n\n  return {\n    root: [\n      getCellStyles(props),\n      fonts.small,\n      isActionable && [\n        classNames.isActionable,\n        {\n          selectors: {\n            ':hover': {\n              color: semanticColors.bodyText,\n              background: semanticColors.listHeaderBackgroundHovered,\n            },\n            ':active': {\n              background: semanticColors.listHeaderBackgroundPressed,\n            },\n          },\n        },\n      ],\n      isEmpty && [\n        classNames.isEmpty,\n        {\n          textOverflow: 'clip',\n        },\n      ],\n      isIconVisible && classNames.isIconVisible,\n      isPadded && {\n        paddingRight: cellStyleProps.cellExtraRightPadding + cellStyleProps.cellRightPadding,\n      },\n      {\n        selectors: {\n          ':hover i[data-icon-name=\"GripperBarVertical\"]': {\n            display: 'block',\n          },\n        },\n      },\n      headerClassName,\n    ],\n\n    gripperBarVerticalStyle: {\n      display: 'none',\n      position: 'absolute',\n      textAlign: 'left',\n      color: palette.neutralTertiary,\n      left: 1,\n    },\n\n    nearIcon: [classNames.nearIcon, nearIconStyle],\n\n    sortIcon: [\n      nearIconStyle,\n      {\n        paddingLeft: 4,\n        position: 'relative',\n        top: 1,\n      },\n    ],\n\n    iconClassName: [\n      {\n        color: colors.iconForegroundColor,\n        opacity: 1,\n      },\n      iconClassName,\n    ],\n\n    filterChevron: [\n      classNames.filterChevron,\n      {\n        color: colors.dropdownChevronForegroundColor,\n        paddingLeft: 6,\n        verticalAlign: 'middle',\n        fontSize: fonts.small.fontSize,\n      },\n    ],\n\n    cellTitle: [\n      classNames.cellTitle,\n      getFocusStyle(theme),\n      {\n        display: 'flex',\n        flexDirection: 'row',\n        justifyContent: 'flex-start',\n        alignItems: 'stretch',\n        boxSizing: 'border-box',\n        overflow: 'hidden',\n        padding: `0 ${cellStyleProps.cellRightPadding}px 0 ${cellStyleProps.cellLeftPadding}px`,\n        ...(isIconOnly\n          ? {\n              alignContent: 'flex-end',\n              maxHeight: '100%',\n              flexWrap: 'wrap-reverse',\n            }\n          : {}),\n      },\n    ],\n\n    cellName: [\n      classNames.cellName,\n      {\n        flex: '0 1 auto',\n        overflow: 'hidden',\n        textOverflow: 'ellipsis',\n        fontWeight: FontWeights.semibold,\n        fontSize: fonts.medium.fontSize,\n      },\n      isIconOnly && {\n        selectors: {\n          [`.${classNames.nearIcon}`]: {\n            paddingLeft: 0,\n          },\n        },\n      },\n    ],\n\n    cellTooltip: {\n      display: 'block',\n      position: 'absolute',\n      top: 0,\n      left: 0,\n      bottom: 0,\n      right: 0,\n    },\n\n    accessibleLabel: hiddenContentStyle,\n\n    borderWhileDragging,\n\n    noBorderWhileDragging: [borderAfterDragOrDrop, { transition: `outline ${transitionDurationDrag}ms ease` }],\n\n    borderAfterDropping: borderWhileDragging,\n\n    noBorderAfterDropping: [borderAfterDragOrDrop, { transition: `outline  ${transitionDurationDrop}ms ease` }],\n  };\n};\n", "import * as React from 'react';\nimport { styled } from '../../Utilities';\nimport { DetailsColumnBase } from './DetailsColumn.base';\nimport { getDetailsColumnStyles } from './DetailsColumn.styles';\nimport type { IDetailsColumnProps, IDetailsColumnStyleProps, IDetailsColumnStyles } from './DetailsColumn.types';\n\nexport const DetailsColumn: React.FunctionComponent<IDetailsColumnProps> = styled<\n  IDetailsColumnProps,\n  IDetailsColumnStyleProps,\n  IDetailsColumnStyles\n>(DetailsColumnBase, getDetailsColumnStyles, undefined, { scope: 'DetailsColumn' });\n\nexport type { IDetailsColumnProps };\n", "import * as React from 'react';\nimport { CollapseAllVisibility } from '../../GroupedList';\nimport { DetailsHeaderBase } from './DetailsHeader.base';\nimport { DetailsListLayoutMode, ColumnDragEndLocation } from './DetailsList.types';\nimport { SelectionMode } from '../../Selection';\nimport type { IRefObject, IRenderFunction, IStyleFunctionOrObject } from '../../Utilities';\nimport type { ITheme, IStyle } from '../../Styling';\nimport type { IColumn, IColumnReorderOptions } from './DetailsList.types';\nimport type { ICellStyleProps, IDetailsItemProps } from './DetailsRow.types';\nimport type { ISelection } from '../../Selection';\nimport type { IDetailsCheckboxProps } from './DetailsRowCheck.types';\nimport type { IDetailsColumnRenderTooltipProps } from './DetailsColumn.types';\n\n/**\n * {@docCategory DetailsList}\n */\nexport interface IDetailsHeader {\n  /** sets focus into the header */\n  focus: () => boolean;\n}\n\n/**\n * {@docCategory DetailsList}\n */\nexport interface IDetailsHeaderBaseProps extends React.ClassAttributes<DetailsHeaderBase>, IDetailsItemProps {\n  /** Theme from the Higher Order Component */\n  theme?: ITheme;\n\n  /** Call to provide customized styling that will layer on top of the variant rules. */\n  styles?: IStyleFunctionOrObject<IDetailsHeaderStyleProps, IDetailsHeaderStyles>;\n\n  /** Ref to the component itself */\n  componentRef?: IRefObject<IDetailsHeader>;\n\n  /** Layout mode - fixedColumns or justified */\n  layoutMode: DetailsListLayoutMode;\n\n  /** Callback for when column sizing has changed */\n  onColumnIsSizingChanged?: (column: IColumn, isSizing: boolean) => void;\n\n  /** Callback for when column is resized */\n  onColumnResized?: (column: IColumn, newWidth: number, columnIndex: number) => void;\n\n  /** Callback for when column is automatically resized */\n  onColumnAutoResized?: (column: IColumn, columnIndex: number) => void;\n\n  /** Callback for when the column is clicked */\n  onColumnClick?: (ev: React.MouseEvent<HTMLElement>, column: IColumn) => void;\n\n  /** Callback for when the column needs to show a context menu */\n  onColumnContextMenu?: (column: IColumn, ev: React.MouseEvent<HTMLElement>) => void;\n\n  /** Callback to render a tooltip for the column header */\n  onRenderColumnHeaderTooltip?: IRenderFunction<IDetailsColumnRenderTooltipProps>;\n\n  /** Whether to collapse for all visibility */\n  collapseAllVisibility?: CollapseAllVisibility;\n\n  /** Whether or not all is collapsed */\n  isAllCollapsed?: boolean;\n\n  /** Callback for when collapse all is toggled */\n  onToggleCollapseAll?: (isAllCollapsed: boolean) => void;\n\n  /** ariaLabel for the entire header */\n  ariaLabel?: string;\n\n  /** ariaLabel for expand/collapse group button */\n  ariaLabelForToggleAllGroupsButton?: string;\n\n  /** ariaLabel for the header checkbox that selects or deselects everything */\n  ariaLabelForSelectAllCheckbox?: string;\n\n  /** ariaLabel for the selection column */\n  ariaLabelForSelectionColumn?: string;\n\n  /** Select all button visibility */\n  selectAllVisibility?: SelectAllVisibility;\n\n  /** Column reordering options */\n  columnReorderOptions?: IColumnReorderOptions;\n\n  /** Column reordering options */\n  columnReorderProps?: IColumnReorderHeaderProps;\n\n  /** Minimum pixels to be moved before dragging is registered */\n  minimumPixelsForDrag?: number;\n\n  /** Overriding class name */\n  className?: string;\n\n  /** If provided, can be used to render a custom checkbox */\n  onRenderDetailsCheckbox?: IRenderFunction<IDetailsCheckboxProps>;\n\n  /**\n   * Whether to use fast icon and check components. The icons can't be targeted by customization\n   * but are still customizable via class names.\n   * @defaultvalue true\n   */\n  useFastIcons?: boolean;\n}\n\n/**\n * {@docCategory DetailsList}\n */\nexport interface IDetailsHeaderProps extends IDetailsHeaderBaseProps {\n  /**\n   * Column metadata\n   */\n  columns: IColumn[];\n\n  /**\n   * Selection from utilities\n   */\n  selection: ISelection;\n\n  /**\n   * Selection mode\n   */\n  selectionMode: SelectionMode;\n}\n\n/**\n * {@docCategory DetailsList}\n */\nexport enum SelectAllVisibility {\n  none = 0,\n  hidden = 1,\n  visible = 2,\n}\n\n/**\n * {@docCategory DetailsList}\n */\nexport interface IDetailsHeaderState {\n  columnResizeDetails?: IColumnResizeDetails;\n  isAllSelected?: boolean;\n  isSizing?: boolean;\n  isAllCollapsed?: boolean;\n}\n\n/**\n * {@docCategory DetailsList}\n */\nexport interface IColumnResizeDetails {\n  columnIndex: number;\n  originX?: number;\n  columnMinWidth: number;\n}\n\n/**\n * {@docCategory DetailsList}\n */\nexport interface IColumnReorderHeaderProps extends IColumnReorderOptions {\n  /** Callback to notify the column dragEnd event to List\n   * Need this to check whether the dragEnd has happened on\n   * corresponding list or outside of the list\n   */\n  onColumnDragEnd?: (props: { dropLocation?: ColumnDragEndLocation }, event: MouseEvent) => void;\n}\n\n/**\n * {@docCategory DetailsList}\n */\nexport interface IDropHintDetails {\n  originX: number; // X index of dropHint Element relative to header\n  startX: number; // start index of the range for the current drophint\n  endX: number; // end index of the range for the current drophint\n  dropHintElementRef: HTMLElement; // Reference for drophint to change the style when needed\n}\n\n/**\n * {@docCategory DetailsList}\n */\nexport type IDetailsHeaderStyleProps = Required<Pick<IDetailsHeaderProps, 'theme'>> &\n  Pick<IDetailsHeaderProps, 'className'> & {\n    /** Whether to hide select all checkbox */\n    isSelectAllHidden?: boolean;\n\n    /** Whether the \"select all\" checkbox is checked */\n    isAllSelected?: boolean;\n\n    /** Is column being resized */\n    isResizingColumn?: boolean;\n\n    /** Are all columns collapsed */\n    isAllCollapsed?: boolean;\n\n    /** Whether the header is sizing */\n    isSizing?: boolean;\n\n    /** Whether checkbox is hidden  */\n    isCheckboxHidden?: boolean;\n\n    cellStyleProps?: ICellStyleProps;\n  };\n\n/**\n * {@docCategory DetailsList}\n */\nexport interface IDetailsHeaderStyles {\n  root: IStyle;\n  check: IStyle;\n\n  /**\n   * @deprecated Not used\n   */\n  cellWrapperPadded: IStyle;\n  cellIsCheck: IStyle;\n\n  /**\n   * @deprecated Not used\n   */\n  cellIsActionable: IStyle;\n\n  /**\n   * @deprecated Not used\n   */\n  cellIsEmpty: IStyle;\n  cellSizer: IStyle;\n  cellSizerStart: IStyle;\n  cellSizerEnd: IStyle;\n  cellIsResizing: IStyle;\n  cellIsGroupExpander: IStyle;\n  collapseButton: IStyle;\n  checkTooltip: IStyle;\n  sizingOverlay: IStyle;\n  dropHintCircleStyle: IStyle;\n  dropHintCaretStyle: IStyle;\n  dropHintLineStyle: IStyle;\n  dropHintStyle: IStyle;\n  accessibleLabel: IStyle;\n}\n", "import * as React from 'react';\nimport { styled } from '../../Utilities';\nimport { DetailsHeaderBase } from './DetailsHeader.base';\nimport { getDetailsHeaderStyles } from './DetailsHeader.styles';\nimport type {\n  IDetailsHeaderProps,\n  IDetailsHeaderBaseProps,\n  IDetailsHeaderStyleProps,\n  IDetailsHeaderStyles,\n} from './DetailsHeader.types';\n\nexport const DetailsHeader: React.FunctionComponent<IDetailsHeaderBaseProps> = styled<\n  IDetailsHeaderBaseProps,\n  IDetailsHeaderStyleProps,\n  IDetailsHeaderStyles\n>(DetailsHeaderBase, getDetailsHeaderStyles, undefined, { scope: 'DetailsHeader' });\n\nexport type { IDetailsHeaderProps, IDetailsHeaderBaseProps };\n", "import * as React from 'react';\n\nimport {\n  initializeComponentRef,\n  FocusRects,\n  Async,\n  KeyCodes,\n  elementContains,\n  getRTLSafeKeyCode,\n  classNamesFunction,\n  css,\n  memoizeFunction,\n  warnMutuallyExclusive,\n} from '../../Utilities';\nimport {\n  CheckboxVisibility,\n  ColumnActionsMode,\n  ConstrainMode,\n  DetailsListLayoutMode,\n  ColumnDragEndLocation,\n  IColumnDragDropDetails,\n} from '../DetailsList/DetailsList.types';\nimport { DetailsHeader } from '../DetailsList/DetailsHeader';\nimport { SelectAllVisibility } from '../DetailsList/DetailsHeader.types';\nimport { DetailsRowBase } from '../DetailsList/DetailsRow.base';\nimport { DetailsRow } from '../DetailsList/DetailsRow';\nimport { FocusZone, FocusZoneDirection } from '../../FocusZone';\nimport { Selection, SelectionMode, SelectionZone } from '../../Selection';\n\nimport { DragDropHelper } from '../../DragDrop';\nimport { GroupedList } from '../../GroupedList';\nimport { List, ScrollToMode } from '../../List';\nimport { withViewport } from '../../utilities/decorators/withViewport';\nimport { GetGroupCount } from '../../utilities/groupedList/GroupedListUtility';\nimport { DEFAULT_CELL_STYLE_PROPS } from './DetailsRow.styles';\nimport { CHECK_CELL_WIDTH as CHECKBOX_WIDTH } from './DetailsRowCheck.styles';\n// For every group level there is a GroupSpacer added. Importing this const to have the source value in one place.\nimport { SPACER_WIDTH as GROUP_EXPAND_WIDTH } from '../GroupedList/GroupSpacer';\nimport { composeComponentAs, composeRenderFunction, getId } from '@fluentui/utilities';\nimport { useConst } from '@fluentui/react-hooks';\nimport type { IRenderFunction } from '../../Utilities';\nimport type {\n  IColumn,\n  IDetailsList,\n  IDetailsListProps,\n  IDetailsListStyles,\n  IDetailsListStyleProps,\n} from '../DetailsList/DetailsList.types';\nimport type {\n  IDetailsHeader,\n  IDetailsHeaderProps,\n  IColumnReorderHeaderProps,\n} from '../DetailsList/DetailsHeader.types';\nimport type { IDetailsFooterProps } from '../DetailsList/DetailsFooter.types';\nimport type { IDetailsRowProps } from '../DetailsList/DetailsRow.types';\nimport type { IFocusZone, IFocusZoneProps } from '../../FocusZone';\nimport type { IObjectWithKey, ISelection } from '../../Selection';\nimport type { IGroupedList, IGroupDividerProps, IGroupRenderProps, IGroup } from '../../GroupedList';\nimport type { IListProps } from '../../List';\n\nconst getClassNames = classNamesFunction<IDetailsListStyleProps, IDetailsListStyles>();\nconst COMPONENT_NAME = 'DetailsList';\n\nexport interface IDetailsListState {\n  focusedItemIndex: number;\n  lastWidth?: number;\n  lastSelectionMode?: SelectionMode;\n  adjustedColumns: IColumn[];\n  isCollapsed?: boolean;\n  isSizing?: boolean;\n  isSomeGroupExpanded?: boolean;\n  /**\n   * A unique object used to force-update the List when it changes.\n   */\n  version: {};\n  getDerivedStateFromProps(nextProps: IDetailsListProps, previousState: IDetailsListState): IDetailsListState;\n}\n\nconst MIN_COLUMN_WIDTH = 100; // this is the global min width\n\nconst DEFAULT_RENDERED_WINDOWS_AHEAD = 2;\nconst DEFAULT_RENDERED_WINDOWS_BEHIND = 2;\n\nconst rowFocusZoneAddTabIndexProps = { tabIndex: 0 };\nconst rowFocusZoneNoTabIndexProps = {};\n\ntype IDetailsListInnerProps = Omit<IDetailsListProps, 'selection'> &\n  IDetailsListState & {\n    selection: ISelection;\n    dragDropHelper: DragDropHelper | undefined;\n    rootRef: React.RefObject<HTMLDivElement>;\n    listRef: React.RefObject<List>;\n    groupedListRef: React.RefObject<IGroupedList>;\n    focusZoneRef: React.RefObject<IFocusZone>;\n    headerRef: React.RefObject<IDetailsHeader>;\n    selectionZoneRef: React.RefObject<SelectionZone>;\n    onGroupExpandStateChanged: (isSomeGroupExpanded: boolean) => void;\n    onColumnIsSizingChanged: (column: IColumn, isSizing: boolean) => void;\n    onRowDidMount: (row: DetailsRowBase) => void;\n    onRowWillUnmount: (row: DetailsRowBase) => void;\n    onColumnResized: (resizingColumn: IColumn, newWidth: number, resizingColumnIndex: number) => void;\n    onColumnAutoResized: (column: IColumn, columnIndex: number) => void;\n    onToggleCollapse: (collapsed: boolean) => void;\n    onActiveRowChanged: (el?: HTMLElement, ev?: React.FocusEvent<HTMLElement>) => void;\n    onBlur: (event: React.FocusEvent<HTMLElement>) => void;\n    onRenderDefaultRow: (detailsRowProps: IDetailsRowProps) => JSX.Element;\n  };\n\n/**\n * Hooks-based implementation of DetailsList.\n * Since many existing consumers of DetailsList expect `ref` to return a `DetailsList`,\n * this inner component handles rendering while the outer maintains compatibility.\n */\nconst DetailsListInner: React.ComponentType<IDetailsListInnerProps> = (\n  props: IDetailsListInnerProps,\n): JSX.Element | null => {\n  const { selection } = props;\n\n  const {\n    ariaLabelForListHeader,\n    ariaLabelForSelectAllCheckbox,\n    ariaLabelForSelectionColumn,\n    className,\n    checkboxVisibility,\n    compact,\n    constrainMode,\n    dragDropEvents,\n    groups,\n    groupProps,\n    indentWidth,\n    items,\n    isPlaceholderData,\n    isHeaderVisible,\n    layoutMode,\n    onItemInvoked,\n    onItemContextMenu,\n    onColumnHeaderClick,\n    onColumnHeaderContextMenu,\n    selectionMode = selection.mode,\n    selectionPreservedOnEmptyClick,\n    selectionZoneProps,\n    // eslint-disable-next-line deprecation/deprecation\n    ariaLabel,\n    ariaLabelForGrid,\n    rowElementEventMap,\n    // eslint-disable-next-line deprecation/deprecation\n    shouldApplyApplicationRole = false,\n    getKey,\n    listProps,\n    usePageCache,\n    onShouldVirtualize,\n    viewport,\n    minimumPixelsForDrag,\n    getGroupHeight,\n    styles,\n    theme,\n    cellStyleProps = DEFAULT_CELL_STYLE_PROPS,\n    onRenderCheckbox,\n    useFastIcons,\n    dragDropHelper,\n    adjustedColumns,\n    isCollapsed,\n    isSizing,\n    isSomeGroupExpanded,\n    version,\n    rootRef,\n    listRef,\n    focusZoneRef,\n    columnReorderOptions,\n    groupedListRef,\n    headerRef,\n    onGroupExpandStateChanged,\n    onColumnIsSizingChanged,\n    onRowDidMount,\n    onRowWillUnmount,\n    disableSelectionZone,\n    isSelectedOnFocus = true,\n    onColumnResized,\n    onColumnAutoResized,\n    onToggleCollapse,\n    onActiveRowChanged,\n    onBlur,\n    rowElementEventMap: eventsToRegister,\n    onRenderMissingItem,\n    onRenderItemColumn,\n    onRenderField,\n    getCellValueKey,\n    getRowAriaLabel,\n    getRowAriaDescribedBy,\n    checkButtonAriaLabel,\n    checkButtonGroupAriaLabel,\n    checkboxCellClassName,\n    useReducedRowRenderer,\n    enableUpdateAnimations,\n    enterModalSelectionOnTouch,\n    onRenderDefaultRow,\n    selectionZoneRef,\n    focusZoneProps,\n  } = props;\n\n  const defaultRole = 'grid';\n  const role = props.role ? props.role : defaultRole;\n\n  const rowId = getId('row');\n\n  const groupNestingDepth = getGroupNestingDepth(groups);\n  const groupedDetailsListIndexMap = useGroupedDetailsListIndexMap(groups);\n\n  const additionalListProps = React.useMemo((): IListProps => {\n    return {\n      renderedWindowsAhead: isSizing ? 0 : DEFAULT_RENDERED_WINDOWS_AHEAD,\n      renderedWindowsBehind: isSizing ? 0 : DEFAULT_RENDERED_WINDOWS_BEHIND,\n      getKey,\n      version,\n      ...listProps,\n    };\n  }, [isSizing, getKey, version, listProps]);\n\n  let selectAllVisibility = SelectAllVisibility.none; // for SelectionMode.none\n  if (selectionMode === SelectionMode.single) {\n    selectAllVisibility = SelectAllVisibility.hidden;\n  }\n  if (selectionMode === SelectionMode.multiple) {\n    // if isCollapsedGroupSelectVisible is false, disable select all when the list has all collapsed groups\n    let isCollapsedGroupSelectVisible =\n      groupProps && groupProps.headerProps && groupProps.headerProps.isCollapsedGroupSelectVisible;\n    if (isCollapsedGroupSelectVisible === undefined) {\n      isCollapsedGroupSelectVisible = true;\n    }\n    const isSelectAllVisible = isCollapsedGroupSelectVisible || !groups || isSomeGroupExpanded;\n    selectAllVisibility = isSelectAllVisible ? SelectAllVisibility.visible : SelectAllVisibility.hidden;\n  }\n\n  if (checkboxVisibility === CheckboxVisibility.hidden) {\n    selectAllVisibility = SelectAllVisibility.none;\n  }\n\n  const defaultOnRenderDetailsHeader = React.useCallback(\n    (detailsHeaderProps: IDetailsHeaderProps): JSX.Element | null => {\n      return <DetailsHeader {...detailsHeaderProps} />;\n    },\n    [],\n  );\n\n  const defaultOnRenderDetailsFooter = React.useCallback((): JSX.Element | null => {\n    return null;\n  }, []);\n\n  const propsOnRenderDetailsHeader = props.onRenderDetailsHeader;\n\n  const onRenderDetailsHeader = React.useMemo(() => {\n    return propsOnRenderDetailsHeader\n      ? composeRenderFunction(propsOnRenderDetailsHeader, defaultOnRenderDetailsHeader)\n      : defaultOnRenderDetailsHeader;\n  }, [propsOnRenderDetailsHeader, defaultOnRenderDetailsHeader]);\n\n  const propsOnRenderDetailsFooter = props.onRenderDetailsFooter;\n\n  const onRenderDetailsFooter = React.useMemo(() => {\n    return propsOnRenderDetailsFooter\n      ? composeRenderFunction(propsOnRenderDetailsFooter, defaultOnRenderDetailsFooter)\n      : defaultOnRenderDetailsFooter;\n  }, [propsOnRenderDetailsFooter, defaultOnRenderDetailsFooter]);\n\n  const detailsFooterProps = React.useMemo((): IDetailsFooterProps => {\n    return {\n      columns: adjustedColumns,\n      groupNestingDepth,\n      selection,\n      selectionMode,\n      viewport,\n      checkboxVisibility,\n      indentWidth,\n      cellStyleProps,\n    };\n  }, [\n    adjustedColumns,\n    groupNestingDepth,\n    selection,\n    selectionMode,\n    viewport,\n    checkboxVisibility,\n    indentWidth,\n    cellStyleProps,\n  ]);\n\n  const columnReorderOnDragEnd = columnReorderOptions && columnReorderOptions.onDragEnd;\n\n  const onColumnDragEnd = React.useCallback(\n    (\n      {\n        dropLocation,\n      }: {\n        dropLocation?: ColumnDragEndLocation;\n      },\n      event: MouseEvent,\n    ): void => {\n      let finalDropLocation: ColumnDragEndLocation = ColumnDragEndLocation.outside;\n      if (columnReorderOnDragEnd) {\n        if (dropLocation && dropLocation !== ColumnDragEndLocation.header) {\n          finalDropLocation = dropLocation;\n        } else if (rootRef.current) {\n          const clientRect = rootRef.current.getBoundingClientRect();\n          if (\n            event.clientX > clientRect.left &&\n            event.clientX < clientRect.right &&\n            event.clientY > clientRect.top &&\n            event.clientY < clientRect.bottom\n          ) {\n            finalDropLocation = ColumnDragEndLocation.surface;\n          }\n        }\n        columnReorderOnDragEnd(finalDropLocation);\n      }\n    },\n    [columnReorderOnDragEnd, rootRef],\n  );\n\n  const columnReorderProps = React.useMemo((): IColumnReorderHeaderProps | undefined => {\n    if (columnReorderOptions) {\n      return {\n        ...columnReorderOptions,\n        onColumnDragEnd,\n      };\n    }\n  }, [columnReorderOptions, onColumnDragEnd]);\n\n  const rowCount =\n    (isHeaderVisible ? 1 : 0) +\n    (props.onRenderDetailsFooter ? 1 : 0) +\n    GetGroupCount(groups) +\n    (items ? items.length : 0);\n  const colCount =\n    (selectAllVisibility !== SelectAllVisibility.none ? 1 : 0) +\n    (adjustedColumns ? adjustedColumns.length : 0) +\n    (groups ? 1 : 0);\n\n  const classNames = React.useMemo(() => {\n    return getClassNames(styles, {\n      theme: theme!,\n      compact,\n      isFixed: layoutMode === DetailsListLayoutMode.fixedColumns,\n      isHorizontalConstrained: constrainMode === ConstrainMode.horizontalConstrained,\n      className,\n    });\n  }, [styles, theme, compact, layoutMode, constrainMode, className]);\n\n  const onRenderDetailsGroupFooter = groupProps && groupProps.onRenderFooter;\n\n  const finalOnRenderDetailsGroupFooter = React.useMemo(() => {\n    return onRenderDetailsGroupFooter\n      ? (groupFooterProps: IGroupDividerProps, defaultRender?: IRenderFunction<IGroupDividerProps>) => {\n          return onRenderDetailsGroupFooter(\n            {\n              ...groupFooterProps,\n              columns: adjustedColumns,\n              groupNestingDepth,\n              indentWidth,\n              selection,\n              selectionMode,\n              viewport,\n              checkboxVisibility,\n              cellStyleProps,\n            },\n            defaultRender,\n          );\n        }\n      : undefined;\n  }, [\n    onRenderDetailsGroupFooter,\n    adjustedColumns,\n    groupNestingDepth,\n    indentWidth,\n    selection,\n    selectionMode,\n    viewport,\n    checkboxVisibility,\n    cellStyleProps,\n  ]);\n\n  const onRenderDetailsGroupHeader = groupProps && groupProps.onRenderHeader;\n\n  const finalOnRenderDetailsGroupHeader = React.useMemo(() => {\n    return onRenderDetailsGroupHeader\n      ? (groupHeaderProps: IGroupDividerProps, defaultRender?: IRenderFunction<IGroupDividerProps>) => {\n          const { groupIndex } = groupHeaderProps;\n          const groupKey: string | undefined =\n            groupIndex !== undefined ? groupHeaderProps.groups?.[groupIndex]?.key : undefined;\n          const totalRowCount: number =\n            groupKey !== undefined && groupedDetailsListIndexMap[groupKey]\n              ? groupedDetailsListIndexMap[groupKey].totalRowCount\n              : 0;\n\n          return onRenderDetailsGroupHeader(\n            {\n              ...groupHeaderProps,\n              columns: adjustedColumns,\n              groupNestingDepth,\n              indentWidth,\n              selection,\n              selectionMode: checkboxVisibility !== CheckboxVisibility.hidden ? selectionMode : SelectionMode.none,\n              viewport,\n              checkboxVisibility,\n              cellStyleProps,\n              ariaColSpan: adjustedColumns.length,\n              ariaLevel: undefined,\n              ariaPosInSet: undefined,\n              ariaSetSize: undefined,\n              ariaRowCount: undefined,\n              ariaRowIndex: groupIndex !== undefined ? totalRowCount + (isHeaderVisible ? 1 : 0) : undefined,\n            },\n            defaultRender,\n          );\n        }\n      : (groupHeaderProps: IGroupDividerProps, defaultRender: IRenderFunction<IGroupDividerProps>) => {\n          const { groupIndex } = groupHeaderProps;\n          const groupKey: string | undefined =\n            groupIndex !== undefined ? groupHeaderProps.groups?.[groupIndex]?.key : undefined;\n          const totalRowCount: number =\n            groupKey !== undefined && groupedDetailsListIndexMap[groupKey]\n              ? groupedDetailsListIndexMap[groupKey].totalRowCount\n              : 0;\n\n          return defaultRender({\n            ...groupHeaderProps,\n            ariaColSpan: adjustedColumns.length,\n            ariaLevel: undefined,\n            ariaPosInSet: undefined,\n            ariaSetSize: undefined,\n            ariaRowCount: undefined,\n            ariaRowIndex: groupIndex !== undefined ? totalRowCount + (isHeaderVisible ? 1 : 0) : undefined,\n          });\n        };\n  }, [\n    onRenderDetailsGroupHeader,\n    adjustedColumns,\n    groupNestingDepth,\n    indentWidth,\n    isHeaderVisible,\n    selection,\n    selectionMode,\n    viewport,\n    checkboxVisibility,\n    cellStyleProps,\n    groupedDetailsListIndexMap,\n  ]);\n\n  const finalGroupProps = React.useMemo((): IGroupRenderProps | undefined => {\n    return {\n      ...groupProps,\n      role: role === defaultRole ? 'rowgroup' : 'presentation',\n      onRenderFooter: finalOnRenderDetailsGroupFooter,\n      onRenderHeader: finalOnRenderDetailsGroupHeader,\n      // pass through custom group header checkbox label\n      headerProps: {\n        ...groupProps?.headerProps,\n        selectAllButtonProps: {\n          'aria-label': checkButtonGroupAriaLabel,\n          ...groupProps?.headerProps?.selectAllButtonProps,\n        },\n      },\n    };\n  }, [groupProps, finalOnRenderDetailsGroupFooter, finalOnRenderDetailsGroupHeader, checkButtonGroupAriaLabel, role]);\n\n  const sumColumnWidths = useConst(() =>\n    memoizeFunction((columns: IColumn[]) => {\n      let totalWidth: number = 0;\n\n      columns.forEach((column: IColumn) => (totalWidth += column.calculatedWidth || column.minWidth));\n\n      return totalWidth;\n    }),\n  );\n\n  const collapseAllVisibility = groupProps && groupProps.collapseAllVisibility;\n\n  const rowWidth = React.useMemo(() => {\n    return sumColumnWidths(adjustedColumns);\n  }, [adjustedColumns, sumColumnWidths]);\n\n  const onRenderCell = React.useCallback(\n    (nestingDepth: number, item: any, index: number, group?: IGroup): React.ReactNode => {\n      const finalOnRenderRow = props.onRenderRow\n        ? composeRenderFunction(props.onRenderRow, onRenderDefaultRow)\n        : onRenderDefaultRow;\n\n      const groupKey: string | undefined = group ? group.key : undefined;\n      const numOfGroupHeadersBeforeItem: number =\n        groupKey && groupedDetailsListIndexMap[groupKey]\n          ? groupedDetailsListIndexMap[groupKey].numOfGroupHeadersBeforeItem\n          : 0;\n\n      const rowRole = role === defaultRole ? undefined : 'presentation';\n\n      // add tabindex=\"0\" to first row if no header exists, to ensure the focuszone is in the tab order\n      const rowFocusZoneProps =\n        isHeaderVisible || index > 0 ? rowFocusZoneNoTabIndexProps : rowFocusZoneAddTabIndexProps;\n\n      const rowProps: IDetailsRowProps = {\n        item,\n        itemIndex: index,\n        flatIndexOffset: (isHeaderVisible ? 2 : 1) + numOfGroupHeadersBeforeItem,\n        compact,\n        columns: adjustedColumns,\n        groupNestingDepth: nestingDepth,\n        id: `${rowId}-${index}`,\n        selectionMode,\n        selection,\n        onDidMount: onRowDidMount,\n        onWillUnmount: onRowWillUnmount,\n        onRenderItemColumn,\n        onRenderField,\n        getCellValueKey,\n        eventsToRegister,\n        dragDropEvents,\n        dragDropHelper,\n        viewport,\n        checkboxVisibility,\n        collapseAllVisibility,\n        getRowAriaLabel,\n        getRowAriaDescribedBy,\n        checkButtonAriaLabel,\n        checkboxCellClassName,\n        useReducedRowRenderer,\n        indentWidth,\n        cellStyleProps,\n        onRenderDetailsCheckbox: onRenderCheckbox,\n        enableUpdateAnimations,\n        rowWidth,\n        useFastIcons,\n        role: rowRole,\n        isGridRow: true,\n        focusZoneProps: rowFocusZoneProps,\n      };\n\n      if (!item) {\n        if (onRenderMissingItem) {\n          return onRenderMissingItem(index, rowProps);\n        }\n\n        return null;\n      }\n\n      return finalOnRenderRow(rowProps);\n    },\n    [\n      compact,\n      adjustedColumns,\n      selectionMode,\n      selection,\n      rowId,\n      onRowDidMount,\n      onRowWillUnmount,\n      onRenderItemColumn,\n      onRenderField,\n      getCellValueKey,\n      eventsToRegister,\n      dragDropEvents,\n      dragDropHelper,\n      viewport,\n      checkboxVisibility,\n      collapseAllVisibility,\n      getRowAriaLabel,\n      getRowAriaDescribedBy,\n      isHeaderVisible,\n      checkButtonAriaLabel,\n      checkboxCellClassName,\n      useReducedRowRenderer,\n      indentWidth,\n      cellStyleProps,\n      onRenderCheckbox,\n      enableUpdateAnimations,\n      useFastIcons,\n      onRenderDefaultRow,\n      onRenderMissingItem,\n      props.onRenderRow,\n      rowWidth,\n      role,\n      groupedDetailsListIndexMap,\n    ],\n  );\n\n  const onRenderListCell = React.useCallback(\n    (nestingDepth: number): ((item: any, itemIndex: number) => React.ReactNode) => {\n      return (item: any, itemIndex: number): React.ReactNode => {\n        return onRenderCell(nestingDepth, item, itemIndex);\n      };\n    },\n    [onRenderCell],\n  );\n\n  const isRightArrow = React.useCallback(\n    (event: React.KeyboardEvent<HTMLElement>) => {\n      // eslint-disable-next-line deprecation/deprecation\n      return event.which === getRTLSafeKeyCode(KeyCodes.right, theme);\n    },\n    [theme],\n  );\n\n  const focusZoneInnerProps: IFocusZoneProps = {\n    ...focusZoneProps,\n    componentRef: focusZoneProps && focusZoneProps.componentRef ? focusZoneProps.componentRef : focusZoneRef,\n    className:\n      focusZoneProps && focusZoneProps.className\n        ? css(classNames.focusZone, focusZoneProps.className)\n        : classNames.focusZone,\n    direction: focusZoneProps ? focusZoneProps.direction : FocusZoneDirection.vertical,\n    shouldEnterInnerZone:\n      focusZoneProps && focusZoneProps.shouldEnterInnerZone ? focusZoneProps.shouldEnterInnerZone : isRightArrow,\n    onActiveElementChanged:\n      focusZoneProps && focusZoneProps.onActiveElementChanged\n        ? focusZoneProps.onActiveElementChanged\n        : onActiveRowChanged,\n    shouldRaiseClicksOnEnter: false,\n    onBlur: focusZoneProps && focusZoneProps.onBlur ? focusZoneProps.onBlur : onBlur,\n  };\n\n  const FinalGroupedList =\n    groups && groupProps?.groupedListAs ? composeComponentAs(groupProps.groupedListAs, GroupedList) : GroupedList;\n\n  const list = groups ? (\n    <FinalGroupedList\n      focusZoneProps={focusZoneInnerProps}\n      componentRef={groupedListRef}\n      groups={groups}\n      groupProps={finalGroupProps}\n      items={items}\n      onRenderCell={onRenderCell}\n      role=\"presentation\"\n      selection={selection}\n      selectionMode={checkboxVisibility !== CheckboxVisibility.hidden ? selectionMode : SelectionMode.none}\n      dragDropEvents={dragDropEvents}\n      dragDropHelper={dragDropHelper}\n      eventsToRegister={rowElementEventMap}\n      listProps={additionalListProps}\n      onGroupExpandStateChanged={onGroupExpandStateChanged}\n      usePageCache={usePageCache}\n      onShouldVirtualize={onShouldVirtualize}\n      getGroupHeight={getGroupHeight}\n      compact={compact}\n    />\n  ) : (\n    <FocusZone {...focusZoneInnerProps}>\n      <List\n        ref={listRef}\n        role=\"presentation\"\n        items={items}\n        onRenderCell={onRenderListCell(0)}\n        usePageCache={usePageCache}\n        onShouldVirtualize={onShouldVirtualize}\n        {...additionalListProps}\n      />\n    </FocusZone>\n  );\n\n  const onHeaderKeyDown = React.useCallback(\n    (ev: React.KeyboardEvent<HTMLElement>): void => {\n      // eslint-disable-next-line deprecation/deprecation\n      if (ev.which === KeyCodes.down) {\n        if (focusZoneRef.current && focusZoneRef.current.focus()) {\n          // select the first item in list after down arrow key event\n          // only if nothing was selected; otherwise start with the already-selected item\n          if (isSelectedOnFocus && selection.getSelectedIndices().length === 0) {\n            selection.setIndexSelected(0, true, false);\n          }\n\n          ev.preventDefault();\n          ev.stopPropagation();\n        }\n      }\n    },\n    [selection, focusZoneRef, isSelectedOnFocus],\n  );\n\n  const onContentKeyDown = React.useCallback(\n    (ev: React.KeyboardEvent<HTMLElement>): void => {\n      // eslint-disable-next-line deprecation/deprecation\n      if (ev.which === KeyCodes.up && !ev.altKey) {\n        if (headerRef.current && headerRef.current.focus()) {\n          ev.preventDefault();\n          ev.stopPropagation();\n        }\n      }\n    },\n    [headerRef],\n  );\n\n  return (\n    <div\n      ref={rootRef}\n      className={classNames.root}\n      data-automationid=\"DetailsList\"\n      data-is-scrollable=\"false\"\n      {...(shouldApplyApplicationRole ? { role: 'application' } : {})}\n    >\n      <FocusRects />\n      <div\n        role={role}\n        // ariaLabel is a legacy prop that used to be applied on the root node, which has poor AT support\n        // it is now treated as a fallback to ariaLabelForGrid for legacy support\n        aria-label={ariaLabelForGrid || ariaLabel}\n        aria-rowcount={isPlaceholderData ? 0 : rowCount}\n        aria-colcount={colCount}\n        aria-busy={isPlaceholderData}\n      >\n        <div onKeyDown={onHeaderKeyDown} role=\"presentation\" className={classNames.headerWrapper}>\n          {isHeaderVisible &&\n            onRenderDetailsHeader(\n              {\n                componentRef: headerRef,\n                selectionMode,\n                layoutMode: layoutMode!,\n                selection,\n                columns: adjustedColumns,\n                onColumnClick: onColumnHeaderClick,\n                onColumnContextMenu: onColumnHeaderContextMenu,\n                onColumnResized,\n                onColumnIsSizingChanged,\n                onColumnAutoResized,\n                groupNestingDepth,\n                isAllCollapsed: isCollapsed,\n                onToggleCollapseAll: onToggleCollapse,\n                ariaLabel: ariaLabelForListHeader,\n                ariaLabelForSelectAllCheckbox,\n                ariaLabelForSelectionColumn,\n                selectAllVisibility,\n                collapseAllVisibility: groupProps && groupProps.collapseAllVisibility,\n                viewport,\n                columnReorderProps,\n                minimumPixelsForDrag,\n                cellStyleProps,\n                checkboxVisibility,\n                indentWidth,\n                onRenderDetailsCheckbox: onRenderCheckbox,\n                rowWidth: sumColumnWidths(adjustedColumns),\n                useFastIcons,\n              },\n              onRenderDetailsHeader,\n            )}\n        </div>\n        <div onKeyDown={onContentKeyDown} role=\"presentation\" className={classNames.contentWrapper}>\n          {!disableSelectionZone ? (\n            <SelectionZone\n              ref={selectionZoneRef}\n              selection={selection}\n              selectionPreservedOnEmptyClick={selectionPreservedOnEmptyClick}\n              selectionMode={selectionMode}\n              isSelectedOnFocus={isSelectedOnFocus}\n              selectionClearedOnEscapePress={isSelectedOnFocus}\n              toggleWithoutModifierPressed={!isSelectedOnFocus}\n              onItemInvoked={onItemInvoked}\n              onItemContextMenu={onItemContextMenu}\n              enterModalOnTouch={enterModalSelectionOnTouch}\n              {...(selectionZoneProps || {})}\n            >\n              {list}\n            </SelectionZone>\n          ) : (\n            list\n          )}\n        </div>\n        {onRenderDetailsFooter({\n          ...detailsFooterProps,\n        })}\n      </div>\n    </div>\n  );\n};\n\n@withViewport\nexport class DetailsListBase extends React.Component<IDetailsListProps, IDetailsListState> implements IDetailsList {\n  public static defaultProps = {\n    layoutMode: DetailsListLayoutMode.justified,\n    selectionMode: SelectionMode.multiple,\n    constrainMode: ConstrainMode.horizontalConstrained,\n    checkboxVisibility: CheckboxVisibility.onHover,\n    isHeaderVisible: true,\n    compact: false,\n    useFastIcons: true,\n  };\n\n  // References\n  private _async: Async;\n  private _root = React.createRef<HTMLDivElement>();\n  private _header = React.createRef<IDetailsHeader>();\n  private _groupedList = React.createRef<IGroupedList>();\n  private _list = React.createRef<List>();\n  private _focusZone = React.createRef<IFocusZone>();\n  private _selectionZone = React.createRef<SelectionZone>();\n\n  private _selection: ISelection;\n  private _activeRows: { [key: string]: DetailsRowBase };\n  private _dragDropHelper: DragDropHelper | undefined;\n  private _initialFocusedIndex: number | undefined;\n\n  private _columnOverrides: {\n    [key: string]: IColumn;\n  };\n\n  public static getDerivedStateFromProps(\n    nextProps: IDetailsListProps,\n    previousState: IDetailsListState,\n  ): IDetailsListState {\n    return previousState.getDerivedStateFromProps(nextProps, previousState);\n  }\n\n  constructor(props: IDetailsListProps) {\n    super(props);\n\n    initializeComponentRef(this);\n    this._async = new Async(this);\n\n    this._activeRows = {};\n    this._columnOverrides = {};\n\n    this.state = {\n      focusedItemIndex: -1,\n      lastWidth: 0,\n      adjustedColumns: this._getAdjustedColumns(props, undefined),\n      isSizing: false,\n      isCollapsed: props.groupProps && props.groupProps.isAllGroupsCollapsed,\n      isSomeGroupExpanded: props.groupProps && !props.groupProps.isAllGroupsCollapsed,\n      version: {},\n      getDerivedStateFromProps: this._getDerivedStateFromProps,\n    };\n\n    warnMutuallyExclusive(COMPONENT_NAME, props, {\n      selection: 'getKey',\n    });\n\n    this._selection =\n      props.selection ||\n      new Selection({\n        onSelectionChanged: undefined,\n        getKey: props.getKey,\n        selectionMode: props.selectionMode,\n      });\n\n    if (!this.props.disableSelectionZone) {\n      this._selection.setItems(props.items as IObjectWithKey[], false);\n    }\n\n    this._dragDropHelper = props.dragDropEvents\n      ? new DragDropHelper({\n          selection: this._selection,\n          minimumPixelsForDrag: props.minimumPixelsForDrag,\n        })\n      : undefined;\n    this._initialFocusedIndex = props.initialFocusedIndex;\n  }\n\n  public scrollToIndex(index: number, measureItem?: (itemIndex: number) => number, scrollToMode?: ScrollToMode): void {\n    this._list.current && this._list.current.scrollToIndex(index, measureItem, scrollToMode);\n    this._groupedList.current && this._groupedList.current.scrollToIndex(index, measureItem, scrollToMode);\n  }\n\n  public focusIndex(\n    index: number,\n    forceIntoFirstElement: boolean = false,\n    measureItem?: (itemIndex: number) => number,\n    scrollToMode?: ScrollToMode,\n  ): void {\n    const item = this.props.items[index];\n    if (item) {\n      this.scrollToIndex(index, measureItem, scrollToMode);\n\n      const itemKey = this._getItemKey(item, index);\n      const row = this._activeRows[itemKey];\n      if (row) {\n        this._setFocusToRow(row, forceIntoFirstElement);\n      }\n    }\n  }\n\n  public getStartItemIndexInView(): number {\n    if (this._list && this._list.current) {\n      return this._list.current.getStartItemIndexInView();\n    } else if (this._groupedList && this._groupedList.current) {\n      return this._groupedList.current.getStartItemIndexInView();\n    }\n    return 0;\n  }\n\n  public updateColumn(column: IColumn, options: { width?: number; newColumnIndex?: number }) {\n    const NO_COLUMNS: IColumn[] = [];\n\n    const { columns = NO_COLUMNS, selectionMode, checkboxVisibility, columnReorderOptions } = this.props;\n    const { width, newColumnIndex } = options;\n    const index = columns.findIndex(col => col.key === column.key);\n\n    if (width) {\n      this._onColumnResized(column, width, index!);\n    }\n\n    if (newColumnIndex !== undefined && columnReorderOptions) {\n      const isCheckboxColumnHidden =\n        selectionMode === SelectionMode.none || checkboxVisibility === CheckboxVisibility.hidden;\n\n      const showCheckbox = checkboxVisibility !== CheckboxVisibility.hidden;\n      const columnIndex = (showCheckbox ? 2 : 1) + index!;\n\n      const draggedIndex = isCheckboxColumnHidden ? columnIndex - 1 : columnIndex - 2;\n      const targetIndex = isCheckboxColumnHidden ? newColumnIndex - 1 : newColumnIndex - 2;\n\n      const frozenColumnCountFromStart = columnReorderOptions.frozenColumnCountFromStart ?? 0;\n      const frozenColumnCountFromEnd = columnReorderOptions.frozenColumnCountFromEnd ?? 0;\n      const isValidTargetIndex =\n        targetIndex >= frozenColumnCountFromStart && targetIndex < columns.length - frozenColumnCountFromEnd;\n\n      if (isValidTargetIndex) {\n        if (columnReorderOptions.onColumnDrop) {\n          const dragDropDetails: IColumnDragDropDetails = {\n            draggedIndex,\n            targetIndex,\n          };\n          columnReorderOptions.onColumnDrop(dragDropDetails);\n          /* eslint-disable deprecation/deprecation */\n        } else if (columnReorderOptions.handleColumnReorder) {\n          columnReorderOptions.handleColumnReorder(draggedIndex, targetIndex);\n          /* eslint-enable deprecation/deprecation */\n        }\n      }\n    }\n  }\n\n  public componentWillUnmount(): void {\n    if (this._dragDropHelper) {\n      // TODO If the DragDropHelper was passed via props, this will dispose it, which is incorrect behavior.\n      this._dragDropHelper.dispose();\n    }\n    this._async.dispose();\n  }\n\n  public componentDidUpdate(prevProps: IDetailsListProps, prevState: IDetailsListState) {\n    this._notifyColumnsResized();\n\n    if (this._initialFocusedIndex !== undefined) {\n      const item = this.props.items[this._initialFocusedIndex];\n      if (item) {\n        const itemKey = this._getItemKey(item, this._initialFocusedIndex);\n        const row = this._activeRows[itemKey];\n        if (row) {\n          this._setFocusToRowIfPending(row);\n        }\n      }\n    }\n\n    if (\n      this.props.items !== prevProps.items &&\n      this.props.items.length > 0 &&\n      this.state.focusedItemIndex !== -1 &&\n      !elementContains(this._root.current, document.activeElement as HTMLElement, false)\n    ) {\n      // Item set has changed and previously-focused item is gone.\n      // Set focus to item at index of previously-focused item if it is in range,\n      // else set focus to the last item.\n      const index =\n        this.state.focusedItemIndex < this.props.items.length\n          ? this.state.focusedItemIndex\n          : this.props.items.length - 1;\n      const item = this.props.items[index];\n      const itemKey = this._getItemKey(item, this.state.focusedItemIndex);\n      const row = this._activeRows[itemKey];\n      if (row) {\n        this._setFocusToRow(row);\n      } else {\n        this._initialFocusedIndex = index;\n      }\n    }\n    if (this.props.onDidUpdate) {\n      this.props.onDidUpdate(this);\n    }\n  }\n\n  public render(): JSX.Element {\n    return (\n      <DetailsListInner\n        {...this.props}\n        {...this.state}\n        selection={this._selection}\n        dragDropHelper={this._dragDropHelper}\n        rootRef={this._root}\n        listRef={this._list}\n        groupedListRef={this._groupedList}\n        focusZoneRef={this._focusZone}\n        headerRef={this._header}\n        selectionZoneRef={this._selectionZone}\n        onGroupExpandStateChanged={this._onGroupExpandStateChanged}\n        onColumnIsSizingChanged={this._onColumnIsSizingChanged}\n        onRowDidMount={this._onRowDidMount}\n        onRowWillUnmount={this._onRowWillUnmount}\n        onColumnResized={this._onColumnResized}\n        onColumnAutoResized={this._onColumnAutoResized}\n        onToggleCollapse={this._onToggleCollapse}\n        onActiveRowChanged={this._onActiveRowChanged}\n        onBlur={this._onBlur}\n        onRenderDefaultRow={this._onRenderRow}\n      />\n    );\n  }\n\n  public forceUpdate(): void {\n    super.forceUpdate();\n    this._forceListUpdates();\n  }\n\n  protected _onRenderRow = (\n    props: IDetailsRowProps,\n    defaultRender?: IRenderFunction<IDetailsRowProps>,\n  ): JSX.Element => {\n    return <DetailsRow {...props} />;\n  };\n\n  private _getDerivedStateFromProps = (\n    nextProps: IDetailsListProps,\n    previousState: IDetailsListState,\n  ): IDetailsListState => {\n    const {\n      checkboxVisibility,\n      items,\n      setKey,\n      selectionMode = this._selection.mode,\n      columns,\n      viewport,\n      compact,\n      dragDropEvents,\n    } = this.props;\n\n    const { isAllGroupsCollapsed = undefined } = this.props.groupProps || {};\n    const newViewportWidth = (nextProps.viewport && nextProps.viewport.width) || 0;\n    const oldViewportWidth = (viewport && viewport.width) || 0;\n    const shouldResetSelection = nextProps.setKey !== setKey || nextProps.setKey === undefined;\n    let shouldForceUpdates = false;\n\n    if (nextProps.layoutMode !== this.props.layoutMode) {\n      shouldForceUpdates = true;\n    }\n\n    let nextState = previousState;\n\n    if (shouldResetSelection) {\n      this._initialFocusedIndex = nextProps.initialFocusedIndex;\n      // reset focusedItemIndex when setKey changes\n      nextState = {\n        ...nextState,\n        focusedItemIndex: this._initialFocusedIndex !== undefined ? this._initialFocusedIndex : -1,\n      };\n    }\n\n    if (!this.props.disableSelectionZone && nextProps.items !== items) {\n      this._selection.setItems(nextProps.items, shouldResetSelection);\n    }\n\n    if (\n      nextProps.checkboxVisibility !== checkboxVisibility ||\n      nextProps.columns !== columns ||\n      newViewportWidth !== oldViewportWidth ||\n      nextProps.compact !== compact\n    ) {\n      shouldForceUpdates = true;\n    }\n\n    nextState = {\n      ...nextState,\n      ...this._adjustColumns(nextProps, nextState, true),\n    };\n\n    if (nextProps.selectionMode !== selectionMode) {\n      shouldForceUpdates = true;\n    }\n\n    if (\n      isAllGroupsCollapsed === undefined &&\n      nextProps.groupProps &&\n      nextProps.groupProps.isAllGroupsCollapsed !== undefined\n    ) {\n      nextState = {\n        ...nextState,\n        isCollapsed: nextProps.groupProps.isAllGroupsCollapsed,\n        isSomeGroupExpanded: !nextProps.groupProps.isAllGroupsCollapsed,\n      };\n    }\n\n    if (nextProps.dragDropEvents !== dragDropEvents) {\n      this._dragDropHelper && this._dragDropHelper.dispose();\n      this._dragDropHelper = nextProps.dragDropEvents\n        ? new DragDropHelper({\n            selection: this._selection,\n            minimumPixelsForDrag: nextProps.minimumPixelsForDrag,\n          })\n        : undefined;\n      shouldForceUpdates = true;\n    }\n\n    if (shouldForceUpdates) {\n      nextState = {\n        ...nextState,\n        version: {},\n      };\n    }\n\n    return nextState;\n  };\n\n  private _onGroupExpandStateChanged = (isSomeGroupExpanded: boolean): void => {\n    this.setState({ isSomeGroupExpanded });\n  };\n\n  private _onColumnIsSizingChanged = (column: IColumn, isSizing: boolean): void => {\n    this.setState({ isSizing });\n  };\n\n  private _getGroupNestingDepth(): number {\n    const { groups } = this.props;\n    let level = 0;\n    let groupsInLevel = groups;\n\n    while (groupsInLevel && groupsInLevel.length > 0) {\n      level++;\n      groupsInLevel = groupsInLevel[0].children;\n    }\n\n    return level;\n  }\n\n  private _onRowDidMount = (row: DetailsRowBase): void => {\n    const { item, itemIndex } = row.props;\n    const itemKey = this._getItemKey(item, itemIndex);\n    this._activeRows[itemKey] = row; // this is used for column auto resize\n\n    this._setFocusToRowIfPending(row);\n\n    const { onRowDidMount } = this.props;\n    if (onRowDidMount) {\n      onRowDidMount(item, itemIndex);\n    }\n  };\n\n  private _setFocusToRowIfPending(row: DetailsRowBase): void {\n    const { itemIndex } = row.props;\n    if (this._initialFocusedIndex !== undefined && itemIndex === this._initialFocusedIndex) {\n      this._setFocusToRow(row);\n      delete this._initialFocusedIndex;\n    }\n  }\n\n  private _setFocusToRow(row: DetailsRowBase, forceIntoFirstElement: boolean = false): void {\n    if (this._selectionZone.current) {\n      this._selectionZone.current.ignoreNextFocus();\n    }\n    this._async.setTimeout((): void => {\n      row.focus(forceIntoFirstElement);\n    }, 0);\n  }\n\n  private _onRowWillUnmount = (row: DetailsRowBase): void => {\n    const { onRowWillUnmount } = this.props;\n\n    const { item, itemIndex } = row.props;\n    const itemKey = this._getItemKey(item, itemIndex);\n    delete this._activeRows[itemKey];\n\n    if (onRowWillUnmount) {\n      onRowWillUnmount(item, itemIndex);\n    }\n  };\n\n  private _onToggleCollapse = (collapsed: boolean): void => {\n    this.setState({\n      isCollapsed: collapsed,\n    });\n    if (this._groupedList.current) {\n      this._groupedList.current.toggleCollapseAll(collapsed);\n    }\n  };\n\n  private _forceListUpdates(): void {\n    if (this._groupedList.current) {\n      this._groupedList.current.forceUpdate();\n    }\n    if (this._list.current) {\n      this._list.current.forceUpdate();\n    }\n  }\n\n  private _notifyColumnsResized(): void {\n    this.state.adjustedColumns.forEach(column => {\n      if (column.onColumnResize) {\n        column.onColumnResize(column.currentWidth);\n      }\n    });\n  }\n\n  private _adjustColumns(\n    newProps: IDetailsListProps,\n    previousState: IDetailsListState,\n    forceUpdate?: boolean,\n    resizingColumnIndex?: number,\n  ): IDetailsListState {\n    const adjustedColumns = this._getAdjustedColumns(newProps, previousState, forceUpdate, resizingColumnIndex);\n    const { viewport } = this.props;\n    const viewportWidth = viewport && viewport.width ? viewport.width : 0;\n\n    return {\n      ...previousState,\n      adjustedColumns,\n      lastWidth: viewportWidth,\n    };\n  }\n\n  /** Returns adjusted columns, given the viewport size and layout mode. */\n  private _getAdjustedColumns(\n    newProps: IDetailsListProps,\n    previousState: IDetailsListState | undefined,\n    forceUpdate?: boolean,\n    resizingColumnIndex?: number,\n  ): IColumn[] {\n    const { items: newItems, layoutMode, selectionMode, viewport } = newProps;\n    const viewportWidth = viewport && viewport.width ? viewport.width : 0;\n    let { columns: newColumns } = newProps;\n\n    const columns = this.props ? this.props.columns : [];\n    const lastWidth = previousState ? previousState.lastWidth : -1;\n    const lastSelectionMode = previousState ? previousState.lastSelectionMode : undefined;\n\n    if (\n      !forceUpdate &&\n      lastWidth === viewportWidth &&\n      lastSelectionMode === selectionMode &&\n      (!columns || newColumns === columns)\n    ) {\n      return newColumns || [];\n    }\n\n    newColumns = newColumns || buildColumns(newItems, true);\n\n    let adjustedColumns: IColumn[];\n\n    if (layoutMode === DetailsListLayoutMode.fixedColumns) {\n      adjustedColumns = this._getFixedColumns(newColumns, viewportWidth, newProps);\n\n      // Preserve adjusted column calculated widths.\n      adjustedColumns.forEach(column => {\n        this._rememberCalculatedWidth(column, column.calculatedWidth!);\n      });\n    } else {\n      adjustedColumns = this._getJustifiedColumns(newColumns, viewportWidth, newProps);\n\n      adjustedColumns.forEach(column => {\n        this._getColumnOverride(column.key).currentWidth = column.calculatedWidth;\n      });\n    }\n\n    return adjustedColumns;\n  }\n\n  /** Builds a set of columns based on the given columns mixed with the current overrides. */\n  private _getFixedColumns(newColumns: IColumn[], viewportWidth: number, props: IDetailsListProps): IColumn[] {\n    const { selectionMode = this._selection.mode, checkboxVisibility, flexMargin, skipViewportMeasures } = this.props;\n    let remainingWidth = viewportWidth - (flexMargin || 0);\n    let sumProportionalWidth = 0;\n\n    newColumns.forEach((col: IColumn) => {\n      if (skipViewportMeasures || !col.flexGrow) {\n        remainingWidth -= col.maxWidth || col.minWidth || MIN_COLUMN_WIDTH;\n      } else {\n        remainingWidth -= col.minWidth || MIN_COLUMN_WIDTH;\n        sumProportionalWidth += col.flexGrow;\n      }\n\n      remainingWidth -= getPaddedWidth(col, props, true);\n    });\n\n    const rowCheckWidth =\n      selectionMode !== SelectionMode.none && checkboxVisibility !== CheckboxVisibility.hidden ? CHECKBOX_WIDTH : 0;\n    const groupExpandWidth = this._getGroupNestingDepth() * GROUP_EXPAND_WIDTH;\n    remainingWidth -= rowCheckWidth + groupExpandWidth;\n\n    let widthFraction = remainingWidth / sumProportionalWidth;\n\n    // Shrinks proportional columns to their max width and adds the remaining width to distribute to other columns.\n    if (!skipViewportMeasures) {\n      newColumns.forEach((column: IColumn) => {\n        const newColumn: IColumn = { ...column, ...this._columnOverrides[column.key] };\n\n        if (newColumn.flexGrow && newColumn.maxWidth) {\n          const fullWidth = newColumn.flexGrow * widthFraction + newColumn.minWidth;\n          const shrinkWidth = fullWidth - newColumn.maxWidth;\n\n          if (shrinkWidth > 0) {\n            remainingWidth += shrinkWidth;\n            sumProportionalWidth -= (shrinkWidth / (fullWidth - newColumn.minWidth)) * newColumn.flexGrow;\n          }\n        }\n      });\n    }\n\n    widthFraction = remainingWidth > 0 ? remainingWidth / sumProportionalWidth : 0;\n\n    return newColumns.map(column => {\n      const newColumn: IColumn = { ...column, ...this._columnOverrides[column.key] };\n\n      // Delay computation until viewport width is available.\n      if (!skipViewportMeasures && newColumn.flexGrow && remainingWidth <= 0) {\n        return newColumn;\n      }\n\n      if (!newColumn.calculatedWidth) {\n        if (!skipViewportMeasures && newColumn.flexGrow) {\n          // Assigns the proportion of the remaining extra width after all columns have met minimum widths.\n          newColumn.calculatedWidth = newColumn.minWidth + newColumn.flexGrow * widthFraction;\n          newColumn.calculatedWidth = Math.min(newColumn.calculatedWidth, newColumn.maxWidth || Number.MAX_VALUE);\n        } else {\n          newColumn.calculatedWidth = newColumn.maxWidth || newColumn.minWidth || MIN_COLUMN_WIDTH;\n        }\n      }\n\n      return newColumn;\n    });\n  }\n\n  /** Builds a set of columns to fix within the viewport width. */\n  private _getJustifiedColumns(newColumns: IColumn[], viewportWidth: number, props: IDetailsListProps): IColumn[] {\n    const { selectionMode = this._selection.mode, checkboxVisibility, skipViewportMeasures } = props;\n    const rowCheckWidth =\n      selectionMode !== SelectionMode.none && checkboxVisibility !== CheckboxVisibility.hidden ? CHECKBOX_WIDTH : 0;\n    const groupExpandWidth = this._getGroupNestingDepth() * GROUP_EXPAND_WIDTH;\n    let totalWidth = 0; // offset because we have one less inner padding.\n    let minimumWidth = 0;\n    const availableWidth = viewportWidth - (rowCheckWidth + groupExpandWidth);\n    const adjustedColumns: IColumn[] = newColumns.map((column, i) => {\n      const baseColumn = {\n        ...column,\n        calculatedWidth: column.minWidth || MIN_COLUMN_WIDTH,\n      };\n\n      const newColumn = {\n        ...baseColumn,\n        ...this._columnOverrides[column.key],\n      };\n\n      // eslint-disable-next-line deprecation/deprecation\n      if (!(baseColumn.isCollapsible || baseColumn.isCollapsable)) {\n        minimumWidth += getPaddedWidth(baseColumn, props);\n      }\n\n      totalWidth += getPaddedWidth(newColumn, props);\n\n      return newColumn;\n    });\n\n    if (skipViewportMeasures) {\n      return adjustedColumns;\n    }\n\n    let lastIndex = adjustedColumns.length - 1;\n\n    // Shrink or remove collapsable columns.\n    while (lastIndex >= 0 && totalWidth > availableWidth) {\n      const column = adjustedColumns[lastIndex];\n\n      const minWidth = column.minWidth || MIN_COLUMN_WIDTH;\n      const overflowWidth = totalWidth - availableWidth;\n\n      // eslint-disable-next-line deprecation/deprecation\n      if (column.calculatedWidth! - minWidth >= overflowWidth || !(column.isCollapsible || column.isCollapsable)) {\n        const originalWidth = column.calculatedWidth!;\n        if (minimumWidth < availableWidth) {\n          // Only adjust in cases where all the columns fit within the viewport\n          column.calculatedWidth = Math.max(column.calculatedWidth! - overflowWidth, minWidth);\n        }\n        totalWidth -= originalWidth - column.calculatedWidth!;\n      } else {\n        totalWidth -= getPaddedWidth(column, props);\n        adjustedColumns.splice(lastIndex, 1);\n      }\n      lastIndex--;\n    }\n\n    // Then expand columns starting at the beginning, until we've filled the width.\n    for (let i = 0; i < adjustedColumns.length && totalWidth < availableWidth; i++) {\n      const column = adjustedColumns[i];\n      const isLast = i === adjustedColumns.length - 1;\n      const overrides = this._columnOverrides[column.key];\n      if (overrides && overrides.calculatedWidth && !isLast) {\n        continue;\n      }\n\n      const spaceLeft = availableWidth - totalWidth;\n      let increment: number;\n      if (isLast) {\n        increment = spaceLeft;\n      } else {\n        const maxWidth = column.maxWidth;\n        const minWidth = column.minWidth || maxWidth || MIN_COLUMN_WIDTH;\n        increment = maxWidth ? Math.min(spaceLeft, maxWidth - minWidth) : spaceLeft;\n      }\n\n      column.calculatedWidth = (column.calculatedWidth as number) + increment;\n      totalWidth += increment;\n    }\n\n    return adjustedColumns;\n  }\n\n  private _onColumnResized = (resizingColumn: IColumn, newWidth: number, resizingColumnIndex: number): void => {\n    const newCalculatedWidth = Math.max(resizingColumn.minWidth || MIN_COLUMN_WIDTH, newWidth);\n    if (this.props.onColumnResize) {\n      this.props.onColumnResize(resizingColumn, newCalculatedWidth, resizingColumnIndex);\n    }\n\n    this._rememberCalculatedWidth(resizingColumn, newCalculatedWidth);\n\n    this.setState({\n      ...this._adjustColumns(this.props, this.state, true, resizingColumnIndex),\n      version: {},\n    });\n  };\n\n  private _rememberCalculatedWidth(column: IColumn, newCalculatedWidth: number): void {\n    const overrides = this._getColumnOverride(column.key);\n    overrides.calculatedWidth = newCalculatedWidth;\n    overrides.currentWidth = newCalculatedWidth;\n  }\n\n  private _getColumnOverride(key: string): IColumn {\n    return (this._columnOverrides[key] = this._columnOverrides[key] || {});\n  }\n\n  /**\n   * Callback function when double clicked on the details header column resizer\n   * which will measure the column cells of all the active rows and resize the\n   * column to the max cell width.\n   *\n   * @param column - double clicked column definition\n   * @param columnIndex - double clicked column index\n   * TODO: min width 100 should be changed to const value and should be consistent with the\n   * value used on _onSizerMove method in DetailsHeader\n   */\n  private _onColumnAutoResized = (column: IColumn, columnIndex: number): void => {\n    let max = 0;\n    let count = 0;\n    const totalCount = Object.keys(this._activeRows).length;\n\n    for (const key in this._activeRows) {\n      if (this._activeRows.hasOwnProperty(key)) {\n        const currentRow = this._activeRows[key];\n        currentRow.measureCell(columnIndex, (width: number) => {\n          max = Math.max(max, width);\n          count++;\n          if (count === totalCount) {\n            this._onColumnResized(column, max, columnIndex);\n          }\n        });\n      }\n    }\n  };\n\n  /**\n   * Call back function when an element in FocusZone becomes active. It will translate it into item\n   * and call onActiveItemChanged callback if specified.\n   *\n   * @param row - element that became active in Focus Zone\n   * @param focus - event from Focus Zone\n   */\n  private _onActiveRowChanged = (el?: HTMLElement, ev?: React.FocusEvent<HTMLElement>): void => {\n    const { items, onActiveItemChanged } = this.props;\n\n    if (!el) {\n      return;\n    }\n\n    // Check and assign index only if the event was raised from any DetailsRow element\n    if (el.getAttribute('data-item-index')) {\n      const index = Number(el.getAttribute('data-item-index'));\n      if (index >= 0) {\n        if (onActiveItemChanged) {\n          onActiveItemChanged(items[index], index, ev);\n        }\n        this.setState({\n          focusedItemIndex: index,\n        });\n      }\n    }\n  };\n\n  private _onBlur = (event: React.FocusEvent<HTMLElement>): void => {\n    this.setState({\n      focusedItemIndex: -1,\n    });\n  };\n\n  private _getItemKey(item: any, itemIndex: number): string | number {\n    const { getKey } = this.props;\n\n    let itemKey: string | number | undefined = undefined;\n    if (item) {\n      itemKey = item.key;\n    }\n\n    if (getKey) {\n      itemKey = getKey(item, itemIndex);\n    }\n\n    if (!itemKey) {\n      itemKey = itemIndex;\n    }\n\n    return itemKey;\n  }\n}\n\nexport function buildColumns(\n  items: any[],\n  canResizeColumns?: boolean,\n  onColumnClick?: (ev: React.MouseEvent<HTMLElement>, column: IColumn) => void,\n  sortedColumnKey?: string,\n  isSortedDescending?: boolean,\n  groupedColumnKey?: string,\n  isMultiline?: boolean,\n  columnActionsMode?: ColumnActionsMode,\n) {\n  const columns: IColumn[] = [];\n\n  if (items && items.length) {\n    const firstItem = items[0];\n\n    for (const propName in firstItem) {\n      if (firstItem.hasOwnProperty(propName)) {\n        columns.push({\n          key: propName,\n          name: propName,\n          fieldName: propName,\n          minWidth: MIN_COLUMN_WIDTH,\n          maxWidth: 300,\n          isCollapsible: !!columns.length,\n          isMultiline: isMultiline === undefined ? false : isMultiline,\n          isSorted: sortedColumnKey === propName,\n          isSortedDescending: !!isSortedDescending,\n          isRowHeader: false,\n          columnActionsMode: columnActionsMode ?? ColumnActionsMode.clickable,\n          isResizable: canResizeColumns,\n          onColumnClick,\n          isGrouped: groupedColumnKey === propName,\n        });\n      }\n    }\n  }\n\n  return columns;\n}\n\nfunction getPaddedWidth(column: IColumn, props: IDetailsListProps, paddingOnly?: true): number {\n  const { cellStyleProps = DEFAULT_CELL_STYLE_PROPS } = props;\n\n  return (\n    (paddingOnly ? 0 : column.calculatedWidth!) +\n    cellStyleProps.cellLeftPadding +\n    cellStyleProps.cellRightPadding +\n    (column.isPadded ? cellStyleProps.cellExtraRightPadding : 0)\n  );\n}\n\nfunction getGroupNestingDepth(groups: IDetailsListProps['groups']): number {\n  let level = 0;\n  let groupsInLevel = groups;\n\n  while (groupsInLevel && groupsInLevel.length > 0) {\n    level++;\n    groupsInLevel = groupsInLevel[0].children;\n  }\n\n  return level;\n}\n\ninterface IGroupedDetailsListIndexMap {\n  [key: string]: { numOfGroupHeadersBeforeItem: number; totalRowCount: number };\n}\n\nfunction useGroupedDetailsListIndexMap(groups: IDetailsListProps['groups']) {\n  return React.useMemo((): IGroupedDetailsListIndexMap => {\n    const indexMap: IGroupedDetailsListIndexMap = {};\n    if (groups) {\n      let rowCount = 1;\n      let numGroupHeaders = 1;\n      for (const group of groups) {\n        const { key } = group;\n        indexMap[key] = { numOfGroupHeadersBeforeItem: numGroupHeaders, totalRowCount: rowCount };\n        numGroupHeaders++;\n        rowCount += group.count + 1;\n      }\n    }\n    return indexMap;\n  }, [groups]);\n}\n", "import * as React from 'react';\nimport {\n  initializeComponentRef,\n  EventGroup,\n  css,\n  shallowCompare,\n  getNativeProps,\n  divProperties,\n  composeComponentAs,\n} from '../../Utilities';\nimport { CheckboxVisibility } from './DetailsList.types';\nimport { DetailsRowCheck } from './DetailsRowCheck';\nimport { GroupSpacer } from '../GroupedList/GroupSpacer';\nimport { DetailsRowFields } from './DetailsRowFields';\nimport { FocusZone, FocusZoneDirection } from '../../FocusZone';\nimport { SelectionMode, SELECTION_CHANGE } from '../../Selection';\nimport { classNamesFunction } from '../../Utilities';\nimport type { IDisposable } from '../../Utilities';\nimport type { IColumn } from './DetailsList.types';\nimport type { IFocusZone } from '../../FocusZone';\nimport type { IDragDropOptions } from '../../DragDrop';\nimport type { IDetailsRowBaseProps, IDetailsRowStyleProps, IDetailsRowStyles } from './DetailsRow.types';\nimport type { IDetailsRowCheckProps } from './DetailsRowCheck.types';\nimport type { IDetailsRowFieldsProps } from './DetailsRowFields.types';\nimport type { IProcessedStyleSet } from '../../Styling';\nimport { getId } from '../../Utilities';\n\nconst getClassNames = classNamesFunction<IDetailsRowStyleProps, IDetailsRowStyles>();\n\nexport interface IDetailsRowSelectionState {\n  isSelected: boolean;\n  isSelectionModal: boolean;\n}\n\nexport interface IDetailsRowState {\n  selectionState: IDetailsRowSelectionState;\n  columnMeasureInfo?: {\n    index: number;\n    column: IColumn;\n    onMeasureDone: (measuredWidth: number) => void;\n  };\n  isDropping?: boolean;\n}\n\nconst DEFAULT_DROPPING_CSS_CLASS = 'is-dropping';\n\nconst NO_COLUMNS: IColumn[] = [];\n\nexport class DetailsRowBase extends React.Component<IDetailsRowBaseProps, IDetailsRowState> {\n  private _events: EventGroup;\n  private _root = React.createRef<HTMLElement>();\n  private _cellMeasurer = React.createRef<HTMLSpanElement>();\n  private _focusZone = React.createRef<IFocusZone>();\n  private _droppingClassNames: string;\n  /** Whether this.props.onDidMount has been called */\n  private _onDidMountCalled: boolean;\n  private _dragDropSubscription?: IDisposable;\n\n  private _classNames: IProcessedStyleSet<IDetailsRowStyles>;\n  private _rowClassNames: IDetailsRowFieldsProps['rowClassNames'];\n  private _ariaRowDescriptionId: string;\n\n  public static getDerivedStateFromProps(\n    nextProps: IDetailsRowBaseProps,\n    previousState: IDetailsRowState,\n  ): IDetailsRowState {\n    return {\n      ...previousState,\n      selectionState: getSelectionState(nextProps),\n    };\n  }\n\n  constructor(props: IDetailsRowBaseProps) {\n    super(props);\n\n    initializeComponentRef(this);\n    this._events = new EventGroup(this);\n\n    this.state = {\n      selectionState: getSelectionState(props),\n      columnMeasureInfo: undefined,\n      isDropping: false,\n    };\n\n    this._droppingClassNames = '';\n  }\n  public componentDidMount(): void {\n    const { dragDropHelper, selection, item, onDidMount } = this.props;\n\n    if (dragDropHelper && this._root.current) {\n      this._dragDropSubscription = dragDropHelper.subscribe(\n        this._root.current,\n        this._events,\n        this._getRowDragDropOptions(),\n      );\n    }\n\n    if (selection) {\n      this._events.on(selection, SELECTION_CHANGE, this._onSelectionChanged);\n    }\n\n    if (onDidMount && item) {\n      // If the item appears later, we should wait for it before calling this method.\n      this._onDidMountCalled = true;\n      onDidMount(this);\n    }\n  }\n\n  public componentDidUpdate(previousProps: IDetailsRowBaseProps) {\n    const state = this.state;\n    const { item, onDidMount } = this.props;\n    const { columnMeasureInfo } = state;\n\n    if (\n      this.props.itemIndex !== previousProps.itemIndex ||\n      this.props.item !== previousProps.item ||\n      this.props.dragDropHelper !== previousProps.dragDropHelper\n    ) {\n      if (this._dragDropSubscription) {\n        this._dragDropSubscription.dispose();\n        delete this._dragDropSubscription;\n      }\n\n      if (this.props.dragDropHelper && this._root.current) {\n        this._dragDropSubscription = this.props.dragDropHelper.subscribe(\n          this._root.current,\n          this._events,\n          this._getRowDragDropOptions(),\n        );\n      }\n    }\n\n    if (columnMeasureInfo && columnMeasureInfo.index >= 0 && this._cellMeasurer.current) {\n      const newWidth = this._cellMeasurer.current.getBoundingClientRect().width;\n\n      columnMeasureInfo.onMeasureDone(newWidth);\n\n      this.setState({\n        columnMeasureInfo: undefined,\n      });\n    }\n\n    if (item && onDidMount && !this._onDidMountCalled) {\n      this._onDidMountCalled = true;\n      onDidMount(this);\n    }\n  }\n\n  public componentWillUnmount(): void {\n    const { item, onWillUnmount } = this.props;\n\n    // Only call the onWillUnmount callback if we have an item.\n    if (onWillUnmount && item) {\n      onWillUnmount(this);\n    }\n\n    if (this._dragDropSubscription) {\n      this._dragDropSubscription.dispose();\n      delete this._dragDropSubscription;\n    }\n\n    this._events.dispose();\n  }\n\n  public shouldComponentUpdate(nextProps: IDetailsRowBaseProps, nextState: IDetailsRowState): boolean {\n    if (this.props.useReducedRowRenderer) {\n      const newSelectionState = getSelectionState(nextProps);\n      if (this.state.selectionState.isSelected !== newSelectionState.isSelected) {\n        return true;\n      }\n      return !shallowCompare(this.props, nextProps);\n    } else {\n      return true;\n    }\n  }\n\n  public render(): JSX.Element {\n    const {\n      className,\n      columns = NO_COLUMNS,\n      dragDropEvents,\n      item,\n      itemIndex,\n      id,\n      flatIndexOffset = 2,\n      onRenderCheck = this._onRenderCheck,\n      onRenderDetailsCheckbox,\n      onRenderItemColumn,\n      onRenderField,\n      getCellValueKey,\n      selectionMode,\n      checkboxVisibility,\n      getRowAriaLabel,\n      getRowAriaDescription,\n      getRowAriaDescribedBy,\n      isGridRow,\n      checkButtonAriaLabel,\n      checkboxCellClassName,\n      /** Alias rowFieldsAs as RowFields and default to DetailsRowFields if rowFieldsAs does not exist */\n      rowFieldsAs,\n      selection,\n      indentWidth,\n      enableUpdateAnimations,\n      compact,\n      theme,\n      styles,\n      cellsByColumn,\n      groupNestingDepth,\n      useFastIcons = true,\n      cellStyleProps,\n      group,\n      focusZoneProps,\n      disabled = false,\n    } = this.props;\n    const { columnMeasureInfo, isDropping } = this.state;\n    const { isSelected = false, isSelectionModal = false } = this.state.selectionState;\n    const isDraggable = dragDropEvents ? !!(dragDropEvents.canDrag && dragDropEvents.canDrag(item)) : undefined;\n    const droppingClassName = isDropping ? this._droppingClassNames || DEFAULT_DROPPING_CSS_CLASS : '';\n    const ariaLabel = getRowAriaLabel ? getRowAriaLabel(item) : undefined;\n    const ariaRowDescription = getRowAriaDescription ? getRowAriaDescription(item) : undefined;\n    const ariaDescribedBy = getRowAriaDescribedBy ? getRowAriaDescribedBy(item) : undefined;\n    const canSelect = !!selection && selection.canSelectItem(item, itemIndex) && !disabled;\n    const isContentUnselectable = selectionMode === SelectionMode.multiple;\n    const showCheckbox = selectionMode !== SelectionMode.none && checkboxVisibility !== CheckboxVisibility.hidden;\n    const ariaSelected = selectionMode === SelectionMode.none ? undefined : isSelected;\n    const ariaPositionInSet = group ? itemIndex - group.startIndex + 1 : undefined;\n    const ariaSetSize = group ? group.count : undefined;\n    const focusZoneDirection = focusZoneProps ? focusZoneProps.direction : FocusZoneDirection.horizontal;\n\n    this._classNames = {\n      ...this._classNames,\n      ...getClassNames(styles, {\n        theme: theme!,\n        isSelected,\n        canSelect: !isContentUnselectable,\n        anySelected: isSelectionModal,\n        checkboxCellClassName,\n        droppingClassName,\n        className,\n        compact,\n        enableUpdateAnimations,\n        cellStyleProps,\n        disabled,\n      }),\n    };\n\n    const rowClassNames: IDetailsRowFieldsProps['rowClassNames'] = {\n      isMultiline: this._classNames.isMultiline,\n      isRowHeader: this._classNames.isRowHeader,\n      cell: this._classNames.cell,\n      cellAnimation: this._classNames.cellAnimation,\n      cellPadded: this._classNames.cellPadded,\n      cellUnpadded: this._classNames.cellUnpadded,\n      fields: this._classNames.fields,\n    };\n\n    // Only re-assign rowClassNames when classNames have changed.\n    // Otherwise, they will cause DetailsRowFields to unnecessarily\n    // re-render, see https://github.com/microsoft/fluentui/pull/8799.\n    // Refactor DetailsRowFields to generate own styles to remove need for this.\n    if (!shallowCompare(this._rowClassNames || {}, rowClassNames)) {\n      this._rowClassNames = rowClassNames;\n    }\n\n    const RowFields = rowFieldsAs ? composeComponentAs(rowFieldsAs, DetailsRowFields) : DetailsRowFields;\n\n    const rowFields = (\n      <RowFields\n        rowClassNames={this._rowClassNames}\n        rowHeaderId={`${id}-header`}\n        cellsByColumn={cellsByColumn}\n        columns={columns}\n        item={item}\n        itemIndex={itemIndex}\n        isSelected={isSelected}\n        columnStartIndex={(showCheckbox ? 1 : 0) + (groupNestingDepth ? 1 : 0)}\n        onRenderItemColumn={onRenderItemColumn}\n        onRenderField={onRenderField}\n        getCellValueKey={getCellValueKey}\n        enableUpdateAnimations={enableUpdateAnimations}\n        cellStyleProps={cellStyleProps}\n      />\n    );\n\n    const defaultRole = 'row';\n    const role = this.props.role ? this.props.role : defaultRole;\n    this._ariaRowDescriptionId = getId('DetailsRow-description');\n\n    // When the user does not specify any column is a row-header in the columns props,\n    // The aria-labelledby of the checkbox does not specify {id}-header.\n    const hasRowHeader = columns.some(column => {\n      return !!column.isRowHeader;\n    });\n    const ariaLabelledby = `${id}-checkbox` + (hasRowHeader ? ` ${id}-header` : '');\n\n    // additional props for rows within a GroupedList\n    // these are needed for treegrid row semantics, but not grid row semantics\n    const groupedListRowProps = isGridRow\n      ? {}\n      : {\n          'aria-level': (groupNestingDepth && groupNestingDepth + 1) || undefined,\n          'aria-posinset': ariaPositionInSet,\n          'aria-setsize': ariaSetSize,\n        };\n\n    return (\n      <FocusZone\n        data-is-focusable={true}\n        {...getNativeProps(this.props, divProperties)}\n        {...(typeof isDraggable === 'boolean'\n          ? {\n              'data-is-draggable': isDraggable, // This data attribute is used by some host applications.\n              draggable: isDraggable,\n            }\n          : {})}\n        {...focusZoneProps}\n        {...groupedListRowProps}\n        direction={focusZoneDirection}\n        elementRef={this._root}\n        componentRef={this._focusZone}\n        role={role}\n        aria-label={ariaLabel}\n        aria-disabled={disabled || undefined}\n        aria-describedby={ariaRowDescription ? this._ariaRowDescriptionId : ariaDescribedBy}\n        className={this._classNames.root}\n        data-selection-index={itemIndex}\n        data-selection-touch-invoke={true}\n        data-selection-disabled={(this.props as any)['data-selection-disabled'] ?? (disabled || undefined)}\n        data-item-index={itemIndex}\n        aria-rowindex={ariaPositionInSet === undefined ? itemIndex + flatIndexOffset : undefined}\n        data-automationid=\"DetailsRow\"\n        aria-selected={ariaSelected}\n        allowFocusRoot={true}\n      >\n        {ariaRowDescription ? (\n          <span key=\"description\" role=\"presentation\" hidden={true} id={this._ariaRowDescriptionId}>\n            {ariaRowDescription}\n          </span>\n        ) : null}\n        {showCheckbox && (\n          <div role=\"gridcell\" data-selection-toggle={true} className={this._classNames.checkCell}>\n            {onRenderCheck({\n              id: id ? `${id}-checkbox` : undefined,\n              selected: isSelected,\n              selectionMode,\n              anySelected: isSelectionModal,\n              'aria-label': checkButtonAriaLabel,\n              'aria-labelledby': id ? ariaLabelledby : undefined,\n              canSelect,\n              compact,\n              className: this._classNames.check,\n              theme,\n              isVisible: checkboxVisibility === CheckboxVisibility.always,\n              onRenderDetailsCheckbox,\n              useFastIcons,\n            })}\n          </div>\n        )}\n\n        <GroupSpacer\n          indentWidth={indentWidth}\n          role=\"gridcell\"\n          count={groupNestingDepth! === 0 ? -1 : groupNestingDepth!}\n        />\n\n        {item && rowFields}\n        {columnMeasureInfo && (\n          <span\n            role=\"presentation\"\n            className={css(this._classNames.cellMeasurer, this._classNames.cell)}\n            ref={this._cellMeasurer}\n          >\n            <RowFields\n              rowClassNames={this._rowClassNames}\n              rowHeaderId={`${id}-header`}\n              columns={[columnMeasureInfo.column]}\n              item={item}\n              itemIndex={itemIndex}\n              columnStartIndex={(showCheckbox ? 1 : 0) + (groupNestingDepth ? 1 : 0) + columns.length}\n              onRenderItemColumn={onRenderItemColumn}\n              getCellValueKey={getCellValueKey}\n            />\n          </span>\n        )}\n      </FocusZone>\n    );\n  }\n\n  /**\n   * measure cell at index. and call the call back with the measured cell width when finish measure\n   *\n   * @param index - The cell index\n   * @param onMeasureDone - The call back function when finish measure\n   */\n  public measureCell(index: number, onMeasureDone: (width: number) => void): void {\n    const { columns = NO_COLUMNS } = this.props;\n    const column: IColumn = { ...columns[index] };\n\n    column.minWidth = 0;\n    column.maxWidth = 999999;\n\n    delete column.calculatedWidth;\n\n    this.setState({\n      columnMeasureInfo: {\n        index,\n        column,\n        onMeasureDone,\n      },\n    });\n  }\n\n  public focus(forceIntoFirstElement: boolean = false): boolean {\n    return !!this._focusZone.current?.focus(forceIntoFirstElement);\n  }\n\n  protected _onRenderCheck(props: IDetailsRowCheckProps) {\n    return <DetailsRowCheck {...props} />;\n  }\n\n  private _onSelectionChanged = (): void => {\n    const selectionState = getSelectionState(this.props);\n\n    if (!shallowCompare(selectionState, this.state.selectionState)) {\n      this.setState({ selectionState });\n    }\n  };\n\n  private _getRowDragDropOptions(): IDragDropOptions {\n    const { item, itemIndex, dragDropEvents, eventsToRegister } = this.props;\n    const options = {\n      eventMap: eventsToRegister,\n      selectionIndex: itemIndex,\n      context: { data: item, index: itemIndex },\n      canDrag: dragDropEvents!.canDrag,\n      canDrop: dragDropEvents!.canDrop,\n      onDragStart: dragDropEvents!.onDragStart,\n      updateDropState: this._updateDroppingState,\n      onDrop: dragDropEvents!.onDrop,\n      onDragEnd: dragDropEvents!.onDragEnd,\n      onDragOver: dragDropEvents!.onDragOver,\n    };\n\n    return options;\n  }\n\n  /**\n   * update isDropping state based on the input value, which is used to change style during drag and drop\n   *\n   * when change to true, that means drag enter. we will add default dropping class name\n   * or the custom dropping class name (return result from onDragEnter) to the root elemet.\n   *\n   * when change to false, that means drag leave. we will remove the dropping class name from root element.\n   *\n   * @param newValue - New isDropping state value\n   * @param event - The event trigger dropping state change which can be dragenter, dragleave etc\n   */\n  private _updateDroppingState = (newValue: boolean, event: DragEvent): void => {\n    const { isDropping } = this.state;\n    const { dragDropEvents, item } = this.props;\n\n    if (!newValue) {\n      if (dragDropEvents!.onDragLeave) {\n        dragDropEvents!.onDragLeave(item, event);\n      }\n    } else if (dragDropEvents!.onDragEnter) {\n      this._droppingClassNames = dragDropEvents!.onDragEnter(item, event);\n    }\n\n    if (isDropping !== newValue) {\n      this.setState({ isDropping: newValue });\n    }\n  };\n}\n\nfunction getSelectionState(props: IDetailsRowBaseProps): IDetailsRowSelectionState {\n  const { itemIndex, selection } = props;\n\n  return {\n    isSelected: !!selection?.isIndexSelected(itemIndex),\n    isSelectionModal: !!selection?.isModal?.(),\n  };\n}\n", "import * as React from 'react';\nimport { composeRenderFunction, css } from '../../Utilities';\nimport { DEFAULT_CELL_STYLE_PROPS } from './DetailsRow.styles';\nimport type { IColumn } from './DetailsList.types';\nimport type { IDetailsRowFieldsProps } from './DetailsRowFields.types';\nimport type { IDetailsColumnFieldProps } from './DetailsColumn.types';\n\nconst getCellText = (item: any, column: IColumn): string => {\n  let value = item && column && column.fieldName ? item[column.fieldName] : '';\n\n  if (value === null || value === undefined) {\n    value = '';\n  }\n\n  if (typeof value === 'boolean') {\n    return value.toString();\n  }\n\n  return value;\n};\n\n/**\n * Component for rendering a row's cells in a `DetailsList`.\n *\n * {@docCategory DetailsList}\n */\nexport const DetailsRowFields: React.FunctionComponent<IDetailsRowFieldsProps> = props => {\n  const {\n    columns,\n    rowClassNames,\n    cellStyleProps = DEFAULT_CELL_STYLE_PROPS,\n    item,\n    itemIndex,\n    isSelected,\n    onRenderItemColumn,\n    getCellValueKey,\n    onRenderField: propsOnRenderField,\n    cellsByColumn,\n    enableUpdateAnimations,\n    rowHeaderId,\n  } = props;\n\n  const cellValueKeysRef = React.useRef<{\n    [columnKey: string]: string | undefined;\n  }>();\n\n  const cellValueKeys = cellValueKeysRef.current || (cellValueKeysRef.current = {});\n\n  const defaultOnRenderField = React.useCallback(\n    (fieldProps: IDetailsColumnFieldProps): JSX.Element | null => {\n      const { column, cellValueKey, className, onRender, item: fieldItem, itemIndex: fieldItemIndex } = fieldProps;\n\n      const width: string | number =\n        typeof column.calculatedWidth === 'undefined'\n          ? 'auto'\n          : column.calculatedWidth +\n            cellStyleProps.cellLeftPadding +\n            cellStyleProps.cellRightPadding +\n            (column.isPadded ? cellStyleProps.cellExtraRightPadding : 0);\n\n      const key = `${column.key}${cellValueKey !== undefined ? `-${cellValueKey}` : ''}`;\n\n      return (\n        <div\n          key={key}\n          id={column.isRowHeader ? rowHeaderId : undefined}\n          role={column.isRowHeader ? 'rowheader' : 'gridcell'}\n          className={css(\n            column.className,\n            column.isMultiline && rowClassNames.isMultiline,\n            column.isRowHeader && rowClassNames.isRowHeader,\n            rowClassNames.cell,\n            column.isPadded ? rowClassNames.cellPadded : rowClassNames.cellUnpadded,\n            className,\n          )}\n          style={{ width }}\n          data-automationid=\"DetailsRowCell\"\n          data-automation-key={column.key}\n        >\n          {onRender(fieldItem, fieldItemIndex, column)}\n        </div>\n      );\n    },\n    [rowClassNames, cellStyleProps, rowHeaderId],\n  );\n\n  return (\n    <div className={rowClassNames.fields} data-automationid=\"DetailsRowFields\" role=\"presentation\">\n      {columns.map(column => {\n        const { getValueKey = getCellValueKey } = column;\n\n        const onRender =\n          (cellsByColumn && column.key in cellsByColumn && (() => cellsByColumn[column.key])) ||\n          column.onRender ||\n          onRenderItemColumn ||\n          defaultOnRender;\n\n        let onRenderField = defaultOnRenderField;\n\n        if (column.onRenderField) {\n          onRenderField = composeRenderFunction(column.onRenderField, onRenderField);\n        }\n\n        if (propsOnRenderField) {\n          onRenderField = composeRenderFunction(propsOnRenderField, onRenderField);\n        }\n\n        const previousValueKey = cellValueKeys[column.key];\n\n        const cellValueKey = enableUpdateAnimations && getValueKey ? getValueKey(item, itemIndex, column) : undefined;\n\n        let showAnimation = false;\n\n        if (cellValueKey !== undefined && previousValueKey !== undefined && cellValueKey !== previousValueKey) {\n          showAnimation = true;\n        }\n\n        cellValueKeys[column.key] = cellValueKey;\n\n        return onRenderField({\n          item,\n          itemIndex,\n          isSelected,\n          column,\n          cellValueKey,\n          className: showAnimation ? rowClassNames.cellAnimation : undefined,\n          onRender,\n        });\n      })}\n    </div>\n  );\n};\n\nfunction defaultOnRender(item?: any, index?: number, column?: IColumn): React.ReactNode {\n  if (!item || !column) {\n    return null;\n  }\n\n  return getCellText(item, column);\n}\n", "import * as React from 'react';\nimport { styled } from '../../Utilities';\nimport { DetailsRowBase } from './DetailsRow.base';\nimport { getDetailsRowStyles } from './DetailsRow.styles';\nimport type {\n  IDetailsRowProps,\n  IDetailsRowBaseProps,\n  IDetailsRowStyleProps,\n  IDetailsRowStyles,\n} from './DetailsRow.types';\n\nexport const DetailsRow: React.FunctionComponent<IDetailsRowBaseProps> = styled<\n  IDetailsRowBaseProps,\n  IDetailsRowStyleProps,\n  IDetailsRowStyles\n>(DetailsRowBase, getDetailsRowStyles, undefined, {\n  scope: 'DetailsRow',\n});\n\nexport type { IDetailsRowProps, IDetailsRowBaseProps };\n", "import * as React from 'react';\nimport { BaseDecorator } from './BaseDecorator';\nimport { findScrollableParent, getRect, getWindow, Async, EventGroup } from '../../Utilities';\n\n/**\n * Viewport rectangle dimensions.\n *\n * {@docCategory DetailsList}\n */\nexport interface IViewport {\n  /**\n   * Width in pixels.\n   */\n  width: number;\n  /**\n   * Height in pixels.\n   */\n  height: number;\n}\n\nexport interface IWithViewportState {\n  viewport?: IViewport;\n}\n\n/**\n * Props interface for the withViewport component.\n *\n * {@docCategory DetailsList}\n */\nexport interface IWithViewportProps {\n  /**\n   * Whether or not `withViewport` should disable its viewport measurements, effectively making this decorator\n   * pass-through with no impact on the rendered component.\n   *\n   * Since `withViewport` measures the `viewport` on mount, after each React update, and in response to events,\n   * it may cause a component which does not currently need this information due to its configuration to re-render\n   * too often. `skipViewportMeasures` may be toggled on and off based on current state, and will suspend and resume\n   * measurement as-needed.\n   *\n   * For example, when this wraps `DetailsList`, set `skipViewportMeasures` to `true` when the `layoutMode` is\n   * `fixedColumns`, since the `DetailsList` does not use the viewport size in any calculations.\n   *\n   * In addition, consider setting `skipViewportMeasures` to `true` when running within a React test renderer, to avoid\n   * direct DOM dependencies.\n   */\n\n  skipViewportMeasures?: boolean;\n  /**\n   * Whether or not to explicitly disable usage of the `ResizeObserver` in favor of a `'resize'` event on `window`,\n   * even if the browser supports `ResizeObserver`. This may be necessary if use of `ResizeObserver` results in too\n   * many re-renders of the wrapped component due to the frequency at which events are fired.\n   *\n   * This has no impact if `skipViewportMeasures` is `true`, as no viewport measurement strategy is used.\n   */\n  disableResizeObserver?: boolean;\n\n  /**\n   * Whether or not `withViewport` will delay before first measuring the viewport size.\n   * Setting this will delay measurement by the same amount as the debounce for resizing the window.\n   * This is useful for giving the child of the viewport time to render before measuring.\n   *\n   * This is an opt-in setting as existing systems have a dependency on immediate measurement for performance.\n   * @default false\n   */\n  delayFirstMeasure?: boolean;\n}\n\nconst RESIZE_DELAY = 500;\nconst MAX_RESIZE_ATTEMPTS = 3;\n\n/**\n * A decorator to update decorated component on viewport or window resize events.\n *\n * @param ComposedComponent - decorated React component reference.\n */\nexport function withViewport<TProps extends { viewport?: IViewport }, TState>(\n  ComposedComponent: new (props: TProps, ...args: any[]) => React.Component<TProps, TState>,\n): any {\n  return class WithViewportComponent extends BaseDecorator<TProps, IWithViewportState> {\n    private _root = React.createRef<HTMLDivElement>();\n    private _resizeAttempts: number;\n    private _viewportResizeObserver: any;\n    private _async: Async;\n    private _events: EventGroup;\n\n    constructor(props: TProps) {\n      super(props);\n\n      this._async = new Async(this);\n      this._events = new EventGroup(this);\n      this._resizeAttempts = 0;\n\n      this.state = {\n        viewport: {\n          width: 0,\n          height: 0,\n        },\n      };\n    }\n\n    public componentDidMount(): void {\n      const { delayFirstMeasure, disableResizeObserver, skipViewportMeasures } = this.props as IWithViewportProps;\n      const win = getWindow(this._root.current);\n\n      this._onAsyncResize = this._async.debounce(this._onAsyncResize, RESIZE_DELAY, {\n        leading: false,\n      });\n\n      if (!skipViewportMeasures) {\n        if (!disableResizeObserver && this._isResizeObserverAvailable()) {\n          this._registerResizeObserver();\n        } else {\n          this._events.on(win, 'resize', this._onAsyncResize);\n        }\n\n        if (delayFirstMeasure) {\n          this._async.setTimeout(() => {\n            this._updateViewport();\n          }, RESIZE_DELAY);\n        } else {\n          this._updateViewport();\n        }\n      }\n    }\n\n    public componentDidUpdate(previousProps: TProps) {\n      const { skipViewportMeasures: previousSkipViewportMeasures } = previousProps as IWithViewportProps;\n      const { disableResizeObserver, skipViewportMeasures } = this.props as IWithViewportProps;\n      const win = getWindow(this._root.current);\n\n      if (skipViewportMeasures !== previousSkipViewportMeasures) {\n        if (!skipViewportMeasures) {\n          if (!disableResizeObserver && this._isResizeObserverAvailable()) {\n            if (!this._viewportResizeObserver) {\n              this._registerResizeObserver();\n            }\n          } else {\n            this._events.on(win, 'resize', this._onAsyncResize);\n          }\n\n          this._updateViewport();\n        } else {\n          this._unregisterResizeObserver();\n          this._events.off(win, 'resize', this._onAsyncResize);\n        }\n      }\n    }\n\n    public componentWillUnmount(): void {\n      this._events.dispose();\n      this._async.dispose();\n      this._unregisterResizeObserver();\n    }\n\n    public render(): JSX.Element {\n      const { viewport } = this.state;\n      const newViewport = viewport!.width > 0 && viewport!.height > 0 ? viewport : undefined;\n\n      return (\n        <div className=\"ms-Viewport\" ref={this._root} style={{ minWidth: 1, minHeight: 1 }}>\n          <ComposedComponent ref={this._updateComposedComponentRef} viewport={newViewport} {...(this.props as any)} />\n        </div>\n      );\n    }\n\n    public forceUpdate(): void {\n      this._updateViewport(true);\n    }\n\n    private _onAsyncResize(): void {\n      this._updateViewport();\n    }\n\n    private _isResizeObserverAvailable(): boolean {\n      const win = getWindow(this._root.current);\n\n      return win && (win as any).ResizeObserver;\n    }\n\n    private _registerResizeObserver = () => {\n      const win = getWindow(this._root.current);\n\n      this._viewportResizeObserver = new (win as any).ResizeObserver(this._onAsyncResize);\n      this._viewportResizeObserver.observe(this._root.current);\n    };\n\n    private _unregisterResizeObserver = () => {\n      if (this._viewportResizeObserver) {\n        this._viewportResizeObserver.disconnect();\n        delete this._viewportResizeObserver;\n      }\n    };\n\n    /* Note: using lambda here because decorators don't seem to work in decorators. */\n    private _updateViewport = (withForceUpdate?: boolean) => {\n      const { viewport } = this.state;\n      const viewportElement = this._root.current;\n      const scrollElement = findScrollableParent(viewportElement) as HTMLElement;\n      const scrollRect = getRect(scrollElement);\n      const clientRect = getRect(viewportElement);\n      const updateComponent = () => {\n        if (withForceUpdate && this._composedComponentInstance) {\n          this._composedComponentInstance.forceUpdate();\n        }\n      };\n\n      const isSizeChanged =\n        (clientRect && clientRect.width) !== viewport!.width || (scrollRect && scrollRect.height) !== viewport!.height;\n\n      if (isSizeChanged && this._resizeAttempts < MAX_RESIZE_ATTEMPTS && clientRect && scrollRect) {\n        this._resizeAttempts++;\n        this.setState(\n          {\n            viewport: {\n              width: clientRect.width,\n              height: scrollRect.height,\n            },\n          },\n          () => {\n            this._updateViewport(withForceUpdate);\n          },\n        );\n      } else {\n        this._resizeAttempts = 0;\n        updateComponent();\n      }\n    };\n  };\n}\n", "import { getGlobalClassNames } from '../../Styling';\nimport type { IDetailsListStyleProps, IDetailsListStyles } from './DetailsList.types';\n\nconst GlobalClassNames = {\n  root: 'ms-DetailsList',\n  compact: 'ms-DetailsList--Compact',\n  contentWrapper: 'ms-DetailsList-contentWrapper',\n  headerWrapper: 'ms-DetailsList-headerWrapper',\n  isFixed: 'is-fixed',\n  isHorizontalConstrained: 'is-horizontalConstrained',\n  listCell: 'ms-List-cell',\n};\n\nexport const getDetailsListStyles = (props: IDetailsListStyleProps): IDetailsListStyles => {\n  const { theme, className, isHorizontalConstrained, compact, isFixed } = props;\n  const { semanticColors } = theme;\n  const classNames = getGlobalClassNames(GlobalClassNames, theme);\n\n  return {\n    root: [\n      classNames.root,\n      theme.fonts.small,\n      {\n        position: 'relative',\n        color: semanticColors.listText,\n        selectors: {\n          [`& .${classNames.listCell}`]: {\n            minHeight: 38,\n            wordBreak: 'break-word',\n          },\n        },\n      },\n\n      isFixed && classNames.isFixed,\n\n      compact && [\n        classNames.compact,\n        {\n          selectors: {\n            [`.${classNames.listCell}`]: {\n              minHeight: 32,\n            },\n          },\n        },\n      ],\n\n      isHorizontalConstrained && [\n        classNames.isHorizontalConstrained,\n        {\n          overflowX: 'auto',\n          overflowY: 'visible',\n          WebkitOverflowScrolling: 'touch',\n        },\n      ],\n\n      className,\n    ],\n\n    focusZone: [\n      {\n        display: 'inline-block',\n        minWidth: '100%',\n        minHeight: 1,\n      },\n    ],\n    headerWrapper: classNames.headerWrapper,\n    contentWrapper: classNames.contentWrapper,\n  };\n};\n", "import * as React from 'react';\nimport { styled } from '../../Utilities';\nimport { DetailsListBase } from './DetailsList.base';\nimport { getDetailsListStyles } from './DetailsList.styles';\nimport type { IDetailsListProps, IDetailsListStyleProps, IDetailsListStyles } from './DetailsList.types';\n\nexport const DetailsList: React.FunctionComponent<IDetailsListProps> = styled<\n  IDetailsListProps,\n  IDetailsListStyleProps,\n  IDetailsListStyles\n>(DetailsListBase, getDetailsListStyles, undefined, {\n  scope: 'DetailsList',\n});\n\nexport type { IDetailsListProps };\n"],
  "mappings": "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",
  "names": ["SelectionZone", "_this", "selection", "isModal", "CollapseAllVisibility", "React", "ColumnActionsMode", "ConstrainMode", "ColumnDragEndLocation", "DetailsListLayoutMode", "CheckboxVisibility", "React", "React", "React", "GlobalClassNames", "getStyles", "GlobalClassNames", "GlobalClassNames", "getStyles", "GlobalClassNames", "GlobalClassNames", "beziers", "getStyles", "React", "React", "getStyles", "React", "SpinnerSize", "SpinnerType", "getClassNames", "SpinnerBase", "GlobalClassNames", "getStyles", "getStyles", "getClassNames", "GroupHeaderBase", "_this", "props", "getStyles", "GlobalClassNames", "getStyles", "React", "React", "React", "getClassNames", "getStyles", "getStyles", "getClassNames", "getStyles", "GlobalClassNames", "getStyles", "React", "getClassNames", "getStyles", "React", "List", "_this", "props", "itemIndex", "GroupedListSection", "_this", "props", "selection", "group", "getClassNames", "GroupedListBase", "_this", "_a", "React", "_a", "getClassNames", "GroupedListV2Wrapper", "_this", "React", "getClassNames", "FastCheck", "DragDropHelper", "_this", "_i", "handler", "React", "MOUSEDOWN_PRIMARY_BUTTON", "getClassNames", "DetailsColumnBase", "_this", "props", "GlobalClassNames", "SelectAllVisibility", "getClassNames", "MOUSEDOWN_PRIMARY_BUTTON", "MOUSEMOVE_PRIMARY_BUTTON", "DetailsHeaderBase", "_this", "props", "React", "React", "React", "_a", "getClassNames", "DEFAULT_DROPPING_CSS_CLASS", "NO_COLUMNS", "DetailsRowBase", "_this", "React", "RESIZE_DELAY", "_this", "getClassNames", "DEFAULT_RENDERED_WINDOWS_AHEAD", "DEFAULT_RENDERED_WINDOWS_BEHIND", "getKey", "_a", "_b", "DetailsListBase", "_this", "props", "NO_COLUMNS", "column", "i", "GlobalClassNames"]
}
