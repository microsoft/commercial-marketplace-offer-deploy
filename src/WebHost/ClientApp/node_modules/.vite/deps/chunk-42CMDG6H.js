import {
  DirectionalHint,
  TooltipHost,
  TooltipOverflowMode
} from "./chunk-KDVNYAWK.js";
import {
  FontWeights,
  HighContrastSelector,
  Icon,
  Image,
  ImageFit,
  ImageLoadState,
  getGlobalClassNames,
  getHighContrastNoAdjustStyle,
  noWrap,
  normalize
} from "./chunk-53BTC5C3.js";
import {
  __assign,
  classNamesFunction,
  divProperties,
  getInitials,
  getNativeProps,
  getPropsWithDefaults,
  getRTL,
  memoizeFunction,
  mergeStyles,
  styled,
  useMergedRefs,
  useWarnings
} from "./chunk-T5LOAC42.js";
import {
  require_react
} from "./chunk-ZVMIEU5R.js";
import {
  __toESM
} from "./chunk-UXIASGQL.js";

// node_modules/@fluentui/react/lib/components/Persona/Persona.base.js
var React3 = __toESM(require_react());

// node_modules/@fluentui/react/lib/components/Persona/PersonaCoin/PersonaCoin.base.js
var React2 = __toESM(require_react());

// node_modules/@fluentui/react/lib/components/Persona/PersonaPresence/PersonaPresence.base.js
var React = __toESM(require_react());

// node_modules/@fluentui/react/lib/components/Persona/Persona.types.js
var PersonaSize;
(function(PersonaSize2) {
  PersonaSize2[PersonaSize2["tiny"] = 0] = "tiny";
  PersonaSize2[PersonaSize2["extraExtraSmall"] = 1] = "extraExtraSmall";
  PersonaSize2[PersonaSize2["extraSmall"] = 2] = "extraSmall";
  PersonaSize2[PersonaSize2["small"] = 3] = "small";
  PersonaSize2[PersonaSize2["regular"] = 4] = "regular";
  PersonaSize2[PersonaSize2["large"] = 5] = "large";
  PersonaSize2[PersonaSize2["extraLarge"] = 6] = "extraLarge";
  PersonaSize2[PersonaSize2["size8"] = 17] = "size8";
  PersonaSize2[PersonaSize2["size10"] = 9] = "size10";
  PersonaSize2[PersonaSize2["size16"] = 8] = "size16";
  PersonaSize2[PersonaSize2["size24"] = 10] = "size24";
  PersonaSize2[PersonaSize2["size28"] = 7] = "size28";
  PersonaSize2[PersonaSize2["size32"] = 11] = "size32";
  PersonaSize2[PersonaSize2["size40"] = 12] = "size40";
  PersonaSize2[PersonaSize2["size48"] = 13] = "size48";
  PersonaSize2[PersonaSize2["size56"] = 16] = "size56";
  PersonaSize2[PersonaSize2["size72"] = 14] = "size72";
  PersonaSize2[PersonaSize2["size100"] = 15] = "size100";
  PersonaSize2[PersonaSize2["size120"] = 18] = "size120";
})(PersonaSize || (PersonaSize = {}));
var PersonaPresence;
(function(PersonaPresence3) {
  PersonaPresence3[PersonaPresence3["none"] = 0] = "none";
  PersonaPresence3[PersonaPresence3["offline"] = 1] = "offline";
  PersonaPresence3[PersonaPresence3["online"] = 2] = "online";
  PersonaPresence3[PersonaPresence3["away"] = 3] = "away";
  PersonaPresence3[PersonaPresence3["dnd"] = 4] = "dnd";
  PersonaPresence3[PersonaPresence3["blocked"] = 5] = "blocked";
  PersonaPresence3[PersonaPresence3["busy"] = 6] = "busy";
})(PersonaPresence || (PersonaPresence = {}));
var PersonaInitialsColor;
(function(PersonaInitialsColor2) {
  PersonaInitialsColor2[PersonaInitialsColor2["lightBlue"] = 0] = "lightBlue";
  PersonaInitialsColor2[PersonaInitialsColor2["blue"] = 1] = "blue";
  PersonaInitialsColor2[PersonaInitialsColor2["darkBlue"] = 2] = "darkBlue";
  PersonaInitialsColor2[PersonaInitialsColor2["teal"] = 3] = "teal";
  PersonaInitialsColor2[PersonaInitialsColor2["lightGreen"] = 4] = "lightGreen";
  PersonaInitialsColor2[PersonaInitialsColor2["green"] = 5] = "green";
  PersonaInitialsColor2[PersonaInitialsColor2["darkGreen"] = 6] = "darkGreen";
  PersonaInitialsColor2[PersonaInitialsColor2["lightPink"] = 7] = "lightPink";
  PersonaInitialsColor2[PersonaInitialsColor2["pink"] = 8] = "pink";
  PersonaInitialsColor2[PersonaInitialsColor2["magenta"] = 9] = "magenta";
  PersonaInitialsColor2[PersonaInitialsColor2["purple"] = 10] = "purple";
  PersonaInitialsColor2[PersonaInitialsColor2["black"] = 11] = "black";
  PersonaInitialsColor2[PersonaInitialsColor2["orange"] = 12] = "orange";
  PersonaInitialsColor2[PersonaInitialsColor2["red"] = 13] = "red";
  PersonaInitialsColor2[PersonaInitialsColor2["darkRed"] = 14] = "darkRed";
  PersonaInitialsColor2[PersonaInitialsColor2["transparent"] = 15] = "transparent";
  PersonaInitialsColor2[PersonaInitialsColor2["violet"] = 16] = "violet";
  PersonaInitialsColor2[PersonaInitialsColor2["lightRed"] = 17] = "lightRed";
  PersonaInitialsColor2[PersonaInitialsColor2["gold"] = 18] = "gold";
  PersonaInitialsColor2[PersonaInitialsColor2["burgundy"] = 19] = "burgundy";
  PersonaInitialsColor2[PersonaInitialsColor2["warmGray"] = 20] = "warmGray";
  PersonaInitialsColor2[PersonaInitialsColor2["coolGray"] = 21] = "coolGray";
  PersonaInitialsColor2[PersonaInitialsColor2["gray"] = 22] = "gray";
  PersonaInitialsColor2[PersonaInitialsColor2["cyan"] = 23] = "cyan";
  PersonaInitialsColor2[PersonaInitialsColor2["rust"] = 24] = "rust";
})(PersonaInitialsColor || (PersonaInitialsColor = {}));

// node_modules/@fluentui/react/lib/components/Persona/PersonaConsts.js
var _a;
var personaSize;
(function(personaSize2) {
  personaSize2.size8 = "20px";
  personaSize2.size10 = "20px";
  personaSize2.size16 = "16px";
  personaSize2.size24 = "24px";
  personaSize2.size28 = "28px";
  personaSize2.size32 = "32px";
  personaSize2.size40 = "40px";
  personaSize2.size48 = "48px";
  personaSize2.size56 = "56px";
  personaSize2.size72 = "72px";
  personaSize2.size100 = "100px";
  personaSize2.size120 = "120px";
})(personaSize || (personaSize = {}));
var personaPresenceSize;
(function(personaPresenceSize2) {
  personaPresenceSize2.size6 = "6px";
  personaPresenceSize2.size8 = "8px";
  personaPresenceSize2.size12 = "12px";
  personaPresenceSize2.size16 = "16px";
  personaPresenceSize2.size20 = "20px";
  personaPresenceSize2.size28 = "28px";
  personaPresenceSize2.size32 = "32px";
  personaPresenceSize2.border = "2px";
})(personaPresenceSize || (personaPresenceSize = {}));
var sizeBoolean = function(size) {
  return {
    isSize8: size === PersonaSize.size8,
    /* eslint-disable deprecation/deprecation */
    isSize10: size === PersonaSize.size10 || size === PersonaSize.tiny,
    isSize16: size === PersonaSize.size16,
    isSize24: size === PersonaSize.size24 || size === PersonaSize.extraExtraSmall,
    isSize28: size === PersonaSize.size28 || size === PersonaSize.extraSmall,
    isSize32: size === PersonaSize.size32,
    isSize40: size === PersonaSize.size40 || size === PersonaSize.small,
    isSize48: size === PersonaSize.size48 || size === PersonaSize.regular,
    isSize56: size === PersonaSize.size56,
    isSize72: size === PersonaSize.size72 || size === PersonaSize.large,
    isSize100: size === PersonaSize.size100 || size === PersonaSize.extraLarge,
    isSize120: size === PersonaSize.size120
  };
};
var sizeToPixels = (_a = {}, // Old deprecated sizes
_a[PersonaSize.tiny] = 10, _a[PersonaSize.extraExtraSmall] = 24, _a[PersonaSize.extraSmall] = 28, _a[PersonaSize.small] = 40, _a[PersonaSize.regular] = 48, _a[PersonaSize.large] = 72, _a[PersonaSize.extraLarge] = 100, // New sizes
_a[PersonaSize.size8] = 8, _a[PersonaSize.size10] = 10, _a[PersonaSize.size16] = 16, _a[PersonaSize.size24] = 24, _a[PersonaSize.size28] = 28, /* eslint-enable deprecation/deprecation */
_a[PersonaSize.size32] = 32, _a[PersonaSize.size40] = 40, _a[PersonaSize.size48] = 48, _a[PersonaSize.size56] = 56, _a[PersonaSize.size72] = 72, _a[PersonaSize.size100] = 100, _a[PersonaSize.size120] = 120, _a);
var presenceBoolean = function(presence) {
  return {
    isAvailable: presence === PersonaPresence.online,
    isAway: presence === PersonaPresence.away,
    isBlocked: presence === PersonaPresence.blocked,
    isBusy: presence === PersonaPresence.busy,
    isDoNotDisturb: presence === PersonaPresence.dnd,
    isOffline: presence === PersonaPresence.offline
  };
};

// node_modules/@fluentui/react/lib/components/Persona/PersonaPresence/PersonaPresence.base.js
var coinSizeFontScaleFactor = 6;
var coinSizePresenceScaleFactor = 3;
var presenceMaxSize = 40;
var presenceFontMaxSize = 20;
var getClassNames = classNamesFunction({
  // There can be many PersonaPresence rendered with different sizes.
  // Therefore setting a larger cache size.
  cacheSize: 100
});
var PersonaPresenceBase = React.forwardRef(function(props, forwardedRef) {
  var coinSize = props.coinSize, isOutOfOffice = props.isOutOfOffice, styles = props.styles, presence = props.presence, theme = props.theme, presenceTitle = props.presenceTitle, presenceColors = props.presenceColors;
  var rootRef = React.useRef(null);
  var mergedRootRef = useMergedRefs(forwardedRef, rootRef);
  var size = sizeBoolean(props.size);
  var renderIcon = !(size.isSize8 || size.isSize10 || size.isSize16 || size.isSize24 || size.isSize28 || size.isSize32) && (coinSize ? coinSize > 32 : true);
  var presenceHeightWidth = coinSize ? coinSize / coinSizePresenceScaleFactor < presenceMaxSize ? coinSize / coinSizePresenceScaleFactor + "px" : presenceMaxSize + "px" : "";
  var presenceFontSize = coinSize ? coinSize / coinSizeFontScaleFactor < presenceFontMaxSize ? coinSize / coinSizeFontScaleFactor + "px" : presenceFontMaxSize + "px" : "";
  var coinSizeWithPresenceIconStyle = coinSize ? { fontSize: presenceFontSize, lineHeight: presenceHeightWidth } : void 0;
  var coinSizeWithPresenceStyle = coinSize ? { width: presenceHeightWidth, height: presenceHeightWidth } : void 0;
  var classNames = getClassNames(styles, {
    theme,
    presence,
    size: props.size,
    isOutOfOffice,
    presenceColors
  });
  if (presence === PersonaPresence.none) {
    return null;
  }
  return React.createElement("div", { role: "presentation", className: classNames.presence, style: coinSizeWithPresenceStyle, title: presenceTitle, ref: mergedRootRef }, renderIcon && React.createElement(Icon, { className: classNames.presenceIcon, iconName: determineIcon(props.presence, props.isOutOfOffice), style: coinSizeWithPresenceIconStyle }));
});
PersonaPresenceBase.displayName = "PersonaPresenceBase";
function determineIcon(presence, isOutOfOffice) {
  if (!presence) {
    return void 0;
  }
  var oofIcon = "SkypeArrow";
  switch (PersonaPresence[presence]) {
    case "online":
      return "SkypeCheck";
    case "away":
      return isOutOfOffice ? oofIcon : "SkypeClock";
    case "dnd":
      return "SkypeMinus";
    case "offline":
      return isOutOfOffice ? oofIcon : "";
  }
  return "";
}

// node_modules/@fluentui/react/lib/components/Persona/PersonaPresence/PersonaPresence.styles.js
var GlobalClassNames = {
  presence: "ms-Persona-presence",
  presenceIcon: "ms-Persona-presenceIcon"
};
var getStyles = function(props) {
  var _a2, _b, _c, _d, _e, _f;
  var theme = props.theme, presenceColors = props.presenceColors;
  var semanticColors = theme.semanticColors, fonts = theme.fonts;
  var classNames = getGlobalClassNames(GlobalClassNames, theme);
  var size = sizeBoolean(props.size);
  var presence = presenceBoolean(props.presence);
  var presenceColorAvailable = presenceColors && presenceColors.available || "#6BB700";
  var presenceColorAway = presenceColors && presenceColors.away || "#FFAA44";
  var presenceColorBusy = presenceColors && presenceColors.busy || "#C43148";
  var presenceColorDnd = presenceColors && presenceColors.dnd || "#C50F1F";
  var presenceColorOffline = presenceColors && presenceColors.offline || "#8A8886";
  var presenceColorOof = presenceColors && presenceColors.oof || "#B4009E";
  var presenceColorBackground = presenceColors && presenceColors.background || semanticColors.bodyBackground;
  var isOpenCirclePresence = presence.isOffline || props.isOutOfOffice && (presence.isAvailable || presence.isBusy || presence.isAway || presence.isDoNotDisturb);
  var borderSizeForSmallPersonas = "1px";
  var borderSizeForLargePersonas = "2px";
  var borderSize = size.isSize72 || size.isSize100 ? borderSizeForLargePersonas : borderSizeForSmallPersonas;
  return {
    presence: [
      classNames.presence,
      __assign(__assign({ position: "absolute", height: personaPresenceSize.size12, width: personaPresenceSize.size12, borderRadius: "50%", top: "auto", right: "-2px", bottom: "-2px", border: "2px solid ".concat(presenceColorBackground), textAlign: "center", boxSizing: "content-box", backgroundClip: "border-box" }, getHighContrastNoAdjustStyle()), { selectors: (_a2 = {}, _a2[HighContrastSelector] = {
        borderColor: "Window",
        backgroundColor: "WindowText"
      }, _a2) }),
      (size.isSize8 || size.isSize10) && {
        right: "auto",
        top: "7px",
        left: 0,
        border: 0,
        selectors: (_b = {}, _b[HighContrastSelector] = {
          top: "9px",
          border: "1px solid WindowText"
        }, _b)
      },
      (size.isSize8 || size.isSize10 || size.isSize24 || size.isSize28 || size.isSize32) && makeSizeStyle(personaPresenceSize.size8),
      (size.isSize40 || size.isSize48) && makeSizeStyle(personaPresenceSize.size12),
      size.isSize16 && {
        height: personaPresenceSize.size6,
        width: personaPresenceSize.size6,
        borderWidth: "1.5px"
      },
      size.isSize56 && makeSizeStyle(personaPresenceSize.size16),
      size.isSize72 && makeSizeStyle(personaPresenceSize.size20),
      size.isSize100 && makeSizeStyle(personaPresenceSize.size28),
      size.isSize120 && makeSizeStyle(personaPresenceSize.size32),
      presence.isAvailable && {
        backgroundColor: presenceColorAvailable,
        selectors: (_c = {}, _c[HighContrastSelector] = backgroundColor("Highlight"), _c)
      },
      presence.isAway && backgroundColor(presenceColorAway),
      presence.isBlocked && [
        {
          selectors: (_d = {
            // Only show :after at larger sizes
            ":after": size.isSize40 || size.isSize48 || size.isSize72 || size.isSize100 ? {
              content: '""',
              width: "100%",
              height: borderSize,
              backgroundColor: presenceColorBusy,
              transform: "translateY(-50%) rotate(-45deg)",
              position: "absolute",
              top: "50%",
              left: 0
            } : void 0
          }, _d[HighContrastSelector] = {
            selectors: {
              ":after": {
                width: "calc(100% - 4px)",
                left: "2px",
                backgroundColor: "Window"
              }
            }
          }, _d)
        }
      ],
      presence.isBusy && backgroundColor(presenceColorBusy),
      presence.isDoNotDisturb && backgroundColor(presenceColorDnd),
      presence.isOffline && backgroundColor(presenceColorOffline),
      (isOpenCirclePresence || presence.isBlocked) && [
        {
          backgroundColor: presenceColorBackground,
          selectors: (_e = {
            ":before": {
              content: '""',
              width: "100%",
              height: "100%",
              position: "absolute",
              top: 0,
              left: 0,
              border: "".concat(borderSize, " solid ").concat(presenceColorBusy),
              borderRadius: "50%",
              boxSizing: "border-box"
            }
          }, _e[HighContrastSelector] = {
            backgroundColor: "WindowText",
            selectors: {
              ":before": {
                width: "calc(100% - 2px)",
                height: "calc(100% - 2px)",
                top: "1px",
                left: "1px",
                borderColor: "Window"
              }
            }
          }, _e)
        }
      ],
      isOpenCirclePresence && presence.isAvailable && makeBeforeBorderStyle(borderSize, presenceColorAvailable),
      isOpenCirclePresence && presence.isBusy && makeBeforeBorderStyle(borderSize, presenceColorBusy),
      isOpenCirclePresence && presence.isAway && makeBeforeBorderStyle(borderSize, presenceColorOof),
      isOpenCirclePresence && presence.isDoNotDisturb && makeBeforeBorderStyle(borderSize, presenceColorDnd),
      isOpenCirclePresence && presence.isOffline && makeBeforeBorderStyle(borderSize, presenceColorOffline),
      isOpenCirclePresence && presence.isOffline && props.isOutOfOffice && makeBeforeBorderStyle(borderSize, presenceColorOof)
    ],
    presenceIcon: [
      classNames.presenceIcon,
      {
        color: presenceColorBackground,
        fontSize: "6px",
        lineHeight: personaPresenceSize.size12,
        verticalAlign: "top",
        selectors: (_f = {}, _f[HighContrastSelector] = {
          color: "Window"
        }, _f)
      },
      size.isSize56 && {
        fontSize: "8px",
        lineHeight: personaPresenceSize.size16
      },
      size.isSize72 && {
        fontSize: fonts.small.fontSize,
        lineHeight: personaPresenceSize.size20
      },
      size.isSize100 && {
        fontSize: fonts.medium.fontSize,
        lineHeight: personaPresenceSize.size28
      },
      size.isSize120 && {
        fontSize: fonts.medium.fontSize,
        lineHeight: personaPresenceSize.size32
      },
      presence.isAway && {
        position: "relative",
        left: isOpenCirclePresence ? void 0 : "1px"
      },
      isOpenCirclePresence && presence.isAvailable && makeOpenCircleIconStyle(presenceColorAvailable),
      isOpenCirclePresence && presence.isBusy && makeOpenCircleIconStyle(presenceColorBusy),
      isOpenCirclePresence && presence.isAway && makeOpenCircleIconStyle(presenceColorOof),
      isOpenCirclePresence && presence.isDoNotDisturb && makeOpenCircleIconStyle(presenceColorDnd),
      isOpenCirclePresence && presence.isOffline && makeOpenCircleIconStyle(presenceColorOffline),
      isOpenCirclePresence && presence.isOffline && props.isOutOfOffice && makeOpenCircleIconStyle(presenceColorOof)
    ]
  };
};
function makeOpenCircleIconStyle(color) {
  return {
    color,
    borderColor: color
  };
}
function makeBeforeBorderStyle(borderSize, color) {
  return {
    selectors: {
      ":before": {
        border: "".concat(borderSize, " solid ").concat(color)
      }
    }
  };
}
function makeSizeStyle(size) {
  return {
    height: size,
    width: size
  };
}
function backgroundColor(color) {
  return { backgroundColor: color };
}

// node_modules/@fluentui/react/lib/components/Persona/PersonaPresence/PersonaPresence.js
var PersonaPresence2 = styled(PersonaPresenceBase, getStyles, void 0, { scope: "PersonaPresence" });

// node_modules/@fluentui/react/lib/components/Persona/PersonaInitialsColor.js
var COLOR_SWATCHES_LOOKUP = [
  PersonaInitialsColor.lightBlue,
  PersonaInitialsColor.blue,
  PersonaInitialsColor.darkBlue,
  PersonaInitialsColor.teal,
  PersonaInitialsColor.green,
  PersonaInitialsColor.darkGreen,
  PersonaInitialsColor.lightPink,
  PersonaInitialsColor.pink,
  PersonaInitialsColor.magenta,
  PersonaInitialsColor.purple,
  PersonaInitialsColor.orange,
  PersonaInitialsColor.lightRed,
  PersonaInitialsColor.darkRed,
  PersonaInitialsColor.violet,
  PersonaInitialsColor.gold,
  PersonaInitialsColor.burgundy,
  PersonaInitialsColor.warmGray,
  PersonaInitialsColor.cyan,
  PersonaInitialsColor.rust,
  PersonaInitialsColor.coolGray
];
var COLOR_SWATCHES_NUM_ENTRIES = COLOR_SWATCHES_LOOKUP.length;
function getInitialsColorFromName(displayName) {
  var color = PersonaInitialsColor.blue;
  if (!displayName) {
    return color;
  }
  var hashCode = 0;
  for (var iLen = displayName.length - 1; iLen >= 0; iLen--) {
    var ch = displayName.charCodeAt(iLen);
    var shift = iLen % 8;
    hashCode ^= (ch << shift) + (ch >> 8 - shift);
  }
  color = COLOR_SWATCHES_LOOKUP[hashCode % COLOR_SWATCHES_NUM_ENTRIES];
  return color;
}
function personaInitialsColorToHexCode(personaInitialsColor) {
  switch (personaInitialsColor) {
    case PersonaInitialsColor.lightBlue:
      return "#4F6BED";
    case PersonaInitialsColor.blue:
      return "#0078D4";
    case PersonaInitialsColor.darkBlue:
      return "#004E8C";
    case PersonaInitialsColor.teal:
      return "#038387";
    case PersonaInitialsColor.lightGreen:
    case PersonaInitialsColor.green:
      return "#498205";
    case PersonaInitialsColor.darkGreen:
      return "#0B6A0B";
    case PersonaInitialsColor.lightPink:
      return "#C239B3";
    case PersonaInitialsColor.pink:
      return "#E3008C";
    case PersonaInitialsColor.magenta:
      return "#881798";
    case PersonaInitialsColor.purple:
      return "#5C2E91";
    case PersonaInitialsColor.orange:
      return "#CA5010";
    case PersonaInitialsColor.red:
      return "#EE1111";
    case PersonaInitialsColor.lightRed:
      return "#D13438";
    case PersonaInitialsColor.darkRed:
      return "#A4262C";
    case PersonaInitialsColor.transparent:
      return "transparent";
    case PersonaInitialsColor.violet:
      return "#8764B8";
    case PersonaInitialsColor.gold:
      return "#986F0B";
    case PersonaInitialsColor.burgundy:
      return "#750B1C";
    case PersonaInitialsColor.warmGray:
      return "#7A7574";
    case PersonaInitialsColor.cyan:
      return "#005B70";
    case PersonaInitialsColor.rust:
      return "#8E562E";
    case PersonaInitialsColor.coolGray:
      return "#69797E";
    case PersonaInitialsColor.black:
      return "#1D1D1D";
    case PersonaInitialsColor.gray:
      return "#393939";
  }
}
function getPersonaInitialsColor(props) {
  var primaryText = props.primaryText, text = props.text;
  var initialsColor = props.initialsColor;
  var initialsColorCode;
  if (typeof initialsColor === "string") {
    initialsColorCode = initialsColor;
  } else {
    initialsColor = initialsColor !== void 0 ? initialsColor : getInitialsColorFromName(text || primaryText);
    initialsColorCode = personaInitialsColorToHexCode(initialsColor);
  }
  return initialsColorCode;
}

// node_modules/@fluentui/react/lib/components/Persona/PersonaCoin/PersonaCoin.base.js
var getClassNames2 = classNamesFunction({
  // There can be many PersonaCoin rendered with different sizes.
  // Therefore setting a larger cache size.
  cacheSize: 100
});
var getInitialsStyles = memoizeFunction(function(className, initialsColor, initialsTextColor, text, primaryText, showUnknownPersonaCoin) {
  return mergeStyles(className, !showUnknownPersonaCoin && {
    backgroundColor: getPersonaInitialsColor({ text, initialsColor, primaryText }),
    color: initialsTextColor
  });
});
var DEFAULT_PROPS = {
  size: PersonaSize.size48,
  presence: PersonaPresence.none,
  imageAlt: ""
};
function useDebugWarnings(props) {
  if (true) {
    useWarnings({
      name: "PersonaCoin",
      props,
      deprecations: { primaryText: "text" }
    });
  }
}
function useImageLoadState(_a2) {
  var onPhotoLoadingStateChange = _a2.onPhotoLoadingStateChange, imageUrl = _a2.imageUrl;
  var _b = React2.useState(ImageLoadState.notLoaded), imageLoadState = _b[0], setImageLoadstate = _b[1];
  React2.useEffect(function() {
    setImageLoadstate(ImageLoadState.notLoaded);
  }, [imageUrl]);
  var onLoadingStateChange = function(loadState) {
    setImageLoadstate(loadState);
    onPhotoLoadingStateChange === null || onPhotoLoadingStateChange === void 0 ? void 0 : onPhotoLoadingStateChange(loadState);
  };
  return [imageLoadState, onLoadingStateChange];
}
var PersonaCoinBase = React2.forwardRef(function(propsWithoutDefaults, forwardedRef) {
  var props = getPropsWithDefaults(DEFAULT_PROPS, propsWithoutDefaults);
  useDebugWarnings(props);
  var _a2 = useImageLoadState(props), imageLoadState = _a2[0], onLoadingStateChange = _a2[1];
  var renderCoin = getCoinRenderer(onLoadingStateChange);
  var className = props.className, coinProps = props.coinProps, showUnknownPersonaCoin = props.showUnknownPersonaCoin, coinSize = props.coinSize, styles = props.styles, imageUrl = props.imageUrl, initialsColor = props.initialsColor, initialsTextColor = props.initialsTextColor, isOutOfOffice = props.isOutOfOffice, _b = props.onRenderCoin, onRenderCoin = _b === void 0 ? renderCoin : _b, _c = props.onRenderPersonaCoin, onRenderPersonaCoin = _c === void 0 ? onRenderCoin : _c, _d = props.onRenderInitials, onRenderInitials = _d === void 0 ? renderPersonaCoinInitials : _d, presence = props.presence, presenceTitle = props.presenceTitle, presenceColors = props.presenceColors, primaryText = props.primaryText, showInitialsUntilImageLoads = props.showInitialsUntilImageLoads, text = props.text, theme = props.theme, size = props.size;
  var divProps = getNativeProps(props, divProperties);
  var divCoinProps = getNativeProps(coinProps || {}, divProperties);
  var coinSizeStyle = coinSize ? { width: coinSize, height: coinSize } : void 0;
  var hideImage = showUnknownPersonaCoin;
  var personaPresenceProps = {
    coinSize,
    isOutOfOffice,
    presence,
    presenceTitle,
    presenceColors,
    size,
    theme
  };
  var classNames = getClassNames2(styles, {
    theme,
    className: coinProps && coinProps.className ? coinProps.className : className,
    size,
    coinSize,
    showUnknownPersonaCoin
  });
  var shouldRenderInitials = Boolean(imageLoadState !== ImageLoadState.loaded && (showInitialsUntilImageLoads && imageUrl || !imageUrl || imageLoadState === ImageLoadState.error || hideImage));
  return React2.createElement(
    "div",
    __assign({ role: "presentation" }, divProps, { className: classNames.coin, ref: forwardedRef }),
    // Render PersonaCoin if size is not size8. size10 and tiny need to removed after a deprecation cleanup.
    // eslint-disable-next-line deprecation/deprecation
    size !== PersonaSize.size8 && size !== PersonaSize.size10 && size !== PersonaSize.tiny ? React2.createElement(
      "div",
      __assign({ role: "presentation" }, divCoinProps, { className: classNames.imageArea, style: coinSizeStyle }),
      shouldRenderInitials && React2.createElement("div", { className: getInitialsStyles(classNames.initials, initialsColor, initialsTextColor, text, primaryText, showUnknownPersonaCoin), style: coinSizeStyle, "aria-hidden": "true" }, onRenderInitials(props, renderPersonaCoinInitials)),
      !hideImage && onRenderPersonaCoin(props, renderCoin),
      React2.createElement(PersonaPresence2, __assign({}, personaPresenceProps))
    ) : (
      // Otherwise, render just PersonaPresence.
      props.presence ? React2.createElement(PersonaPresence2, __assign({}, personaPresenceProps)) : (
        // Just render Contact Icon if there isn't a Presence prop.
        React2.createElement(Icon, { iconName: "Contact", className: classNames.size10WithoutPresenceIcon })
      )
    ),
    props.children
  );
});
PersonaCoinBase.displayName = "PersonaCoinBase";
var getCoinRenderer = function(onLoadingStateChange) {
  return function(_a2) {
    var coinSize = _a2.coinSize, styles = _a2.styles, imageUrl = _a2.imageUrl, imageAlt = _a2.imageAlt, imageShouldFadeIn = _a2.imageShouldFadeIn, imageShouldStartVisible = _a2.imageShouldStartVisible, theme = _a2.theme, showUnknownPersonaCoin = _a2.showUnknownPersonaCoin, _b = _a2.size, size = _b === void 0 ? DEFAULT_PROPS.size : _b;
    if (!imageUrl) {
      return null;
    }
    var classNames = getClassNames2(styles, {
      theme,
      size,
      showUnknownPersonaCoin
    });
    var dimension = coinSize || sizeToPixels[size];
    return React2.createElement(Image, { className: classNames.image, imageFit: ImageFit.cover, src: imageUrl, width: dimension, height: dimension, alt: imageAlt, shouldFadeIn: imageShouldFadeIn, shouldStartVisible: imageShouldStartVisible, onLoadingStateChange });
  };
};
var renderPersonaCoinInitials = function(_a2) {
  var imageInitials = _a2.imageInitials, allowPhoneInitials = _a2.allowPhoneInitials, showUnknownPersonaCoin = _a2.showUnknownPersonaCoin, text = _a2.text, primaryText = _a2.primaryText, theme = _a2.theme;
  if (showUnknownPersonaCoin) {
    return React2.createElement(Icon, { iconName: "Help" });
  }
  var isRTL = getRTL(theme);
  imageInitials = imageInitials || getInitials(text || primaryText || "", isRTL, allowPhoneInitials);
  return imageInitials !== "" ? React2.createElement("span", null, imageInitials) : React2.createElement(Icon, { iconName: "Contact" });
};

// node_modules/@fluentui/react/lib/components/Persona/PersonaCoin/PersonaCoin.styles.js
var GlobalClassNames2 = {
  coin: "ms-Persona-coin",
  imageArea: "ms-Persona-imageArea",
  image: "ms-Persona-image",
  initials: "ms-Persona-initials",
  size8: "ms-Persona--size8",
  size10: "ms-Persona--size10",
  size16: "ms-Persona--size16",
  size24: "ms-Persona--size24",
  size28: "ms-Persona--size28",
  size32: "ms-Persona--size32",
  size40: "ms-Persona--size40",
  size48: "ms-Persona--size48",
  size56: "ms-Persona--size56",
  size72: "ms-Persona--size72",
  size100: "ms-Persona--size100",
  size120: "ms-Persona--size120"
};
var getStyles2 = function(props) {
  var _a2;
  var className = props.className, theme = props.theme, coinSize = props.coinSize;
  var palette = theme.palette, fonts = theme.fonts;
  var size = sizeBoolean(props.size);
  var classNames = getGlobalClassNames(GlobalClassNames2, theme);
  var unknownPersonaBackgroundColor = "rgb(234, 234, 234)";
  var unknownPersonaFontColor = "rgb(168, 0, 0)";
  var dimension = coinSize || props.size && sizeToPixels[props.size] || 48;
  return {
    coin: [
      classNames.coin,
      fonts.medium,
      size.isSize8 && classNames.size8,
      size.isSize10 && classNames.size10,
      size.isSize16 && classNames.size16,
      size.isSize24 && classNames.size24,
      size.isSize28 && classNames.size28,
      size.isSize32 && classNames.size32,
      size.isSize40 && classNames.size40,
      size.isSize48 && classNames.size48,
      size.isSize56 && classNames.size56,
      size.isSize72 && classNames.size72,
      size.isSize100 && classNames.size100,
      size.isSize120 && classNames.size120,
      className
    ],
    size10WithoutPresenceIcon: {
      fontSize: fonts.xSmall.fontSize,
      position: "absolute",
      top: "5px",
      right: "auto",
      left: 0
    },
    imageArea: [
      classNames.imageArea,
      {
        position: "relative",
        textAlign: "center",
        flex: "0 0 auto",
        height: dimension,
        width: dimension
      },
      dimension <= 10 && {
        overflow: "visible",
        background: "transparent",
        height: 0,
        width: 0
      }
    ],
    image: [
      classNames.image,
      {
        marginRight: "10px",
        position: "absolute",
        top: 0,
        left: 0,
        width: "100%",
        height: "100%",
        border: 0,
        borderRadius: "50%",
        perspective: "1px"
      },
      dimension <= 10 && {
        overflow: "visible",
        background: "transparent",
        height: 0,
        width: 0
      },
      dimension > 10 && {
        height: dimension,
        width: dimension
      }
    ],
    initials: [
      classNames.initials,
      {
        borderRadius: "50%",
        color: props.showUnknownPersonaCoin ? unknownPersonaFontColor : palette.white,
        fontSize: fonts.large.fontSize,
        fontWeight: FontWeights.semibold,
        // copying the logic for the dimensions; defaulted to 46 for size48
        lineHeight: dimension === 48 ? 46 : dimension,
        height: dimension,
        selectors: (_a2 = {}, _a2[HighContrastSelector] = __assign(__assign({ border: "1px solid WindowText" }, getHighContrastNoAdjustStyle()), { color: "WindowText", boxSizing: "border-box", backgroundColor: "Window !important" }), _a2.i = {
          fontWeight: FontWeights.semibold
        }, _a2)
      },
      props.showUnknownPersonaCoin && {
        backgroundColor: unknownPersonaBackgroundColor
      },
      dimension < 32 && {
        fontSize: fonts.xSmall.fontSize
      },
      dimension >= 32 && dimension < 40 && {
        fontSize: fonts.medium.fontSize
      },
      dimension >= 40 && dimension < 56 && {
        fontSize: fonts.mediumPlus.fontSize
      },
      dimension >= 56 && dimension < 72 && {
        fontSize: fonts.xLarge.fontSize
      },
      dimension >= 72 && dimension < 100 && {
        fontSize: fonts.xxLarge.fontSize
      },
      dimension >= 100 && {
        fontSize: fonts.superLarge.fontSize
      }
    ]
  };
};

// node_modules/@fluentui/react/lib/components/Persona/PersonaCoin/PersonaCoin.js
var PersonaCoin = styled(PersonaCoinBase, getStyles2, void 0, {
  scope: "PersonaCoin"
});

// node_modules/@fluentui/react/lib/components/Persona/Persona.base.js
var getClassNames3 = classNamesFunction();
var DEFAULT_PROPS2 = {
  size: PersonaSize.size48,
  presence: PersonaPresence.none,
  imageAlt: "",
  showOverflowTooltip: true
};
function useDebugWarnings2(props) {
  if (true) {
    useWarnings({
      name: "Persona",
      props,
      deprecations: { primaryText: "text" }
    });
  }
}
var PersonaBase = React3.forwardRef(function(propsWithoutDefaults, forwardedRef) {
  var props = getPropsWithDefaults(DEFAULT_PROPS2, propsWithoutDefaults);
  useDebugWarnings2(props);
  var rootRef = React3.useRef(null);
  var mergedRootRef = useMergedRefs(forwardedRef, rootRef);
  var getText = function() {
    return props.text || props.primaryText || "";
  };
  var renderElement = function(elementClassNames, renderFunction, defaultRenderFunction) {
    var content = renderFunction && renderFunction(props, defaultRenderFunction);
    return content ? React3.createElement("div", { dir: "auto", className: elementClassNames }, content) : void 0;
  };
  var onRenderText = function(text, tooltip) {
    if (tooltip === void 0) {
      tooltip = true;
    }
    return text ? tooltip ? function() {
      return React3.createElement(TooltipHost, { content: text, overflowMode: TooltipOverflowMode.Parent, directionalHint: DirectionalHint.topLeftEdge }, text);
    } : function() {
      return React3.createElement(React3.Fragment, null, text);
    } : void 0;
  };
  var onInternalRenderPersonaCoin = function(providedCoinProps) {
    return React3.createElement(PersonaCoin, __assign({}, providedCoinProps));
  };
  var onInternalRenderPrimaryText = onRenderText(getText(), props.showOverflowTooltip);
  var onInternalRenderSecondaryText = onRenderText(props.secondaryText, props.showOverflowTooltip);
  var onInternalRenderTertiaryText = onRenderText(props.tertiaryText, props.showOverflowTooltip);
  var onInternalRenderOptionalText = onRenderText(props.optionalText, props.showOverflowTooltip);
  var hidePersonaDetails = props.hidePersonaDetails, _a2 = props.onRenderOptionalText, onRenderOptionalText = _a2 === void 0 ? onInternalRenderOptionalText : _a2, _b = props.onRenderPrimaryText, onRenderPrimaryText = _b === void 0 ? onInternalRenderPrimaryText : _b, _c = props.onRenderSecondaryText, onRenderSecondaryText = _c === void 0 ? onInternalRenderSecondaryText : _c, _d = props.onRenderTertiaryText, onRenderTertiaryText = _d === void 0 ? onInternalRenderTertiaryText : _d, _e = props.onRenderPersonaCoin, onRenderPersonaCoin = _e === void 0 ? onInternalRenderPersonaCoin : _e;
  var size = props.size;
  var allowPhoneInitials = props.allowPhoneInitials, className = props.className, coinProps = props.coinProps, showUnknownPersonaCoin = props.showUnknownPersonaCoin, coinSize = props.coinSize, styles = props.styles, imageAlt = props.imageAlt, imageInitials = props.imageInitials, imageShouldFadeIn = props.imageShouldFadeIn, imageShouldStartVisible = props.imageShouldStartVisible, imageUrl = props.imageUrl, initialsColor = props.initialsColor, initialsTextColor = props.initialsTextColor, isOutOfOffice = props.isOutOfOffice, onPhotoLoadingStateChange = props.onPhotoLoadingStateChange, onRenderCoin = props.onRenderCoin, onRenderInitials = props.onRenderInitials, presence = props.presence, presenceTitle = props.presenceTitle, presenceColors = props.presenceColors, showInitialsUntilImageLoads = props.showInitialsUntilImageLoads, showSecondaryText = props.showSecondaryText, theme = props.theme;
  var personaCoinProps = __assign({ allowPhoneInitials, showUnknownPersonaCoin, coinSize, imageAlt, imageInitials, imageShouldFadeIn, imageShouldStartVisible, imageUrl, initialsColor, initialsTextColor, onPhotoLoadingStateChange, onRenderCoin, onRenderInitials, presence, presenceTitle, showInitialsUntilImageLoads, size, text: getText(), isOutOfOffice, presenceColors }, coinProps);
  var classNames = getClassNames3(styles, {
    theme,
    className,
    showSecondaryText,
    presence,
    size
  });
  var divProps = getNativeProps(props, divProperties);
  var personaDetails = React3.createElement(
    "div",
    { className: classNames.details },
    renderElement(classNames.primaryText, onRenderPrimaryText, onInternalRenderPrimaryText),
    renderElement(classNames.secondaryText, onRenderSecondaryText, onInternalRenderSecondaryText),
    renderElement(classNames.tertiaryText, onRenderTertiaryText, onInternalRenderTertiaryText),
    renderElement(classNames.optionalText, onRenderOptionalText, onInternalRenderOptionalText),
    props.children
  );
  return React3.createElement(
    "div",
    __assign({}, divProps, { ref: mergedRootRef, className: classNames.root, style: coinSize ? { height: coinSize, minWidth: coinSize } : void 0 }),
    onRenderPersonaCoin(personaCoinProps, onRenderPersonaCoin),
    /* eslint-disable deprecation/deprecation */
    (!hidePersonaDetails || size === PersonaSize.size8 || size === PersonaSize.size10 || size === PersonaSize.tiny) && personaDetails
    /* eslint-enable deprecation/deprecation */
  );
});
PersonaBase.displayName = "PersonaBase";

// node_modules/@fluentui/react/lib/components/Persona/Persona.styles.js
var GlobalClassNames3 = {
  root: "ms-Persona",
  size8: "ms-Persona--size8",
  size10: "ms-Persona--size10",
  size16: "ms-Persona--size16",
  size24: "ms-Persona--size24",
  size28: "ms-Persona--size28",
  size32: "ms-Persona--size32",
  size40: "ms-Persona--size40",
  size48: "ms-Persona--size48",
  size56: "ms-Persona--size56",
  size72: "ms-Persona--size72",
  size100: "ms-Persona--size100",
  size120: "ms-Persona--size120",
  available: "ms-Persona--online",
  away: "ms-Persona--away",
  blocked: "ms-Persona--blocked",
  busy: "ms-Persona--busy",
  doNotDisturb: "ms-Persona--donotdisturb",
  offline: "ms-Persona--offline",
  details: "ms-Persona-details",
  primaryText: "ms-Persona-primaryText",
  secondaryText: "ms-Persona-secondaryText",
  tertiaryText: "ms-Persona-tertiaryText",
  optionalText: "ms-Persona-optionalText",
  textContent: "ms-Persona-textContent"
};
var getStyles3 = function(props) {
  var className = props.className, showSecondaryText = props.showSecondaryText, theme = props.theme;
  var semanticColors = theme.semanticColors, fonts = theme.fonts;
  var classNames = getGlobalClassNames(GlobalClassNames3, theme);
  var size = sizeBoolean(props.size);
  var presence = presenceBoolean(props.presence);
  var showSecondaryTextDefaultHeight = "16px";
  var sharedTextStyles = {
    color: semanticColors.bodySubtext,
    fontWeight: FontWeights.regular,
    fontSize: fonts.small.fontSize
  };
  return {
    root: [
      classNames.root,
      theme.fonts.medium,
      normalize,
      {
        color: semanticColors.bodyText,
        position: "relative",
        height: personaSize.size48,
        minWidth: personaSize.size48,
        display: "flex",
        alignItems: "center",
        selectors: {
          ".contextualHost": {
            display: "none"
          }
        }
      },
      size.isSize8 && [
        classNames.size8,
        {
          height: personaSize.size8,
          minWidth: personaSize.size8
        }
      ],
      // TODO: Deprecated size and needs to be removed in a future major release.
      size.isSize10 && [
        classNames.size10,
        {
          height: personaSize.size10,
          minWidth: personaSize.size10
        }
      ],
      // TODO: Deprecated size and needs to be removed in a future major release.
      size.isSize16 && [
        classNames.size16,
        {
          height: personaSize.size16,
          minWidth: personaSize.size16
        }
      ],
      size.isSize24 && [
        classNames.size24,
        {
          height: personaSize.size24,
          minWidth: personaSize.size24
        }
      ],
      size.isSize24 && showSecondaryText && {
        height: "36px"
      },
      // TODO: Deprecated size and needs to be removed in a future major release.
      size.isSize28 && [
        classNames.size28,
        {
          height: personaSize.size28,
          minWidth: personaSize.size28
        }
      ],
      size.isSize28 && showSecondaryText && {
        height: "32px"
      },
      size.isSize32 && [
        classNames.size32,
        {
          height: personaSize.size32,
          minWidth: personaSize.size32
        }
      ],
      size.isSize40 && [
        classNames.size40,
        {
          height: personaSize.size40,
          minWidth: personaSize.size40
        }
      ],
      size.isSize48 && classNames.size48,
      size.isSize56 && [
        classNames.size56,
        {
          height: personaSize.size56,
          minWidth: personaSize.size56
        }
      ],
      size.isSize72 && [
        classNames.size72,
        {
          height: personaSize.size72,
          minWidth: personaSize.size72
        }
      ],
      size.isSize100 && [
        classNames.size100,
        {
          height: personaSize.size100,
          minWidth: personaSize.size100
        }
      ],
      size.isSize120 && [
        classNames.size120,
        {
          height: personaSize.size120,
          minWidth: personaSize.size120
        }
      ],
      /**
       * Modifiers: presence
       */
      presence.isAvailable && classNames.available,
      presence.isAway && classNames.away,
      presence.isBlocked && classNames.blocked,
      presence.isBusy && classNames.busy,
      presence.isDoNotDisturb && classNames.doNotDisturb,
      presence.isOffline && classNames.offline,
      className
    ],
    details: [
      classNames.details,
      {
        padding: "0 24px 0 16px",
        minWidth: 0,
        width: "100%",
        textAlign: "left",
        display: "flex",
        flexDirection: "column",
        justifyContent: "space-around"
      },
      (size.isSize8 || size.isSize10) && {
        paddingLeft: 17
        // increased padding because we don't render a coin at this size
      },
      (size.isSize24 || size.isSize28 || size.isSize32) && {
        padding: "0 8px"
      },
      (size.isSize40 || size.isSize48) && {
        padding: "0 12px"
      }
    ],
    primaryText: [
      classNames.primaryText,
      noWrap,
      {
        color: semanticColors.bodyText,
        fontWeight: FontWeights.regular,
        fontSize: fonts.medium.fontSize,
        selectors: {
          ":hover": {
            color: semanticColors.inputTextHovered
          }
        }
      },
      showSecondaryText && {
        height: showSecondaryTextDefaultHeight,
        lineHeight: showSecondaryTextDefaultHeight,
        overflowX: "hidden"
      },
      (size.isSize8 || size.isSize10) && {
        fontSize: fonts.small.fontSize,
        lineHeight: personaSize.size8
      },
      size.isSize16 && {
        lineHeight: personaSize.size28
      },
      (size.isSize24 || size.isSize28 || size.isSize32 || size.isSize40 || size.isSize48) && showSecondaryText && {
        height: 18
      },
      (size.isSize56 || size.isSize72 || size.isSize100 || size.isSize120) && {
        fontSize: fonts.xLarge.fontSize
      },
      (size.isSize56 || size.isSize72 || size.isSize100 || size.isSize120) && showSecondaryText && {
        height: 22
      }
    ],
    secondaryText: [
      classNames.secondaryText,
      noWrap,
      sharedTextStyles,
      (size.isSize8 || size.isSize10 || size.isSize16 || size.isSize24 || size.isSize28 || size.isSize32) && {
        display: "none"
      },
      showSecondaryText && {
        display: "block",
        height: showSecondaryTextDefaultHeight,
        lineHeight: showSecondaryTextDefaultHeight,
        overflowX: "hidden"
      },
      size.isSize24 && showSecondaryText && {
        height: 18
      },
      (size.isSize56 || size.isSize72 || size.isSize100 || size.isSize120) && {
        fontSize: fonts.medium.fontSize
      },
      (size.isSize56 || size.isSize72 || size.isSize100 || size.isSize120) && showSecondaryText && {
        height: 18
      }
    ],
    tertiaryText: [
      classNames.tertiaryText,
      noWrap,
      sharedTextStyles,
      {
        display: "none",
        fontSize: fonts.medium.fontSize
      },
      (size.isSize72 || size.isSize100 || size.isSize120) && {
        display: "block"
      }
    ],
    optionalText: [
      classNames.optionalText,
      noWrap,
      sharedTextStyles,
      {
        display: "none",
        fontSize: fonts.medium.fontSize
      },
      (size.isSize100 || size.isSize120) && {
        display: "block"
      }
    ],
    textContent: [classNames.textContent, noWrap]
  };
};

// node_modules/@fluentui/react/lib/components/Persona/Persona.js
var Persona = styled(PersonaBase, getStyles3, void 0, {
  scope: "Persona"
});

export {
  PersonaSize,
  PersonaPresence,
  PersonaInitialsColor,
  personaSize,
  personaPresenceSize,
  sizeBoolean,
  sizeToPixels,
  presenceBoolean,
  getPersonaInitialsColor,
  PersonaCoinBase,
  PersonaCoin,
  PersonaBase,
  Persona
};
//# sourceMappingURL=chunk-42CMDG6H.js.map
