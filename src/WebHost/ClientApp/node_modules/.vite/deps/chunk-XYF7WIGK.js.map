{
  "version": 3,
  "sources": ["../../@fluentui/react/lib/components/CommandBar/components/CommandBar/CommandBar.styles.ts", "../../@fluentui/react/lib/components/CommandBar/components/CommandBar/CommandBar.base.tsx", "../../@fluentui/react/lib/components/OverflowSet/components/OverflowSet/OverflowSet.base.tsx", "../../@fluentui/react/lib/components/OverflowSet/components/OverflowSet/OverflowButton.tsx", "../../@fluentui/react/lib/utilities/keytips/utilities/keytips/KeytipConstants.ts", "../../@fluentui/react/lib/utilities/keytips/utilities/keytips/KeytipManager.ts", "../../@fluentui/react/lib/components/OverflowSet/components/OverflowSet/OverflowSet.styles.ts", "../../@fluentui/react/lib/components/OverflowSet/components/OverflowSet/OverflowSet.ts", "../../@fluentui/react/lib/components/ResizeGroup/components/ResizeGroup/ResizeGroup.base.tsx", "../../@fluentui/react/lib/components/ResizeGroup/components/ResizeGroup/ResizeGroup.types.ts", "../../@fluentui/react/lib/components/ResizeGroup/components/ResizeGroup/ResizeGroup.tsx", "../../@fluentui/react/lib/components/Button/components/Button/BaseButton.tsx", "../../@fluentui/react/lib/components/ContextualMenu/components/ContextualMenu/ContextualMenu.tsx", "../../@fluentui/react/lib/components/ContextualMenu/components/ContextualMenu/ContextualMenu.base.tsx", "../../@fluentui/react/lib/components/ContextualMenu/components/ContextualMenu/ContextualMenu.types.ts", "../../@fluentui/react/lib/utilities/contextualMenu/utilities/contextualMenu/contextualMenuUtility.ts", "../../@fluentui/react/lib/components/ContextualMenu/components/ContextualMenu/ContextualMenuItem.base.tsx", "../../@fluentui/react/lib/components/Divider/components/Divider/VerticalDivider.classNames.ts", "../../@fluentui/react/lib/components/ContextualMenu/components/ContextualMenu/ContextualMenu.cnstyles.ts", "../../@fluentui/react/lib/components/ContextualMenu/components/ContextualMenu/ContextualMenu.classNames.ts", "../../@fluentui/react/lib/components/ContextualMenu/components/ContextualMenu/ContextualMenuItem.ts", "../../@fluentui/react/lib/components/ContextualMenu/ContextualMenuItemWrapper/components/ContextualMenu/ContextualMenuItemWrapper/ContextualMenuAnchor.tsx", "../../@fluentui/react/lib/components/ContextualMenu/ContextualMenuItemWrapper/components/ContextualMenu/ContextualMenuItemWrapper/ContextualMenuItemWrapper.tsx", "../../@fluentui/react/lib/utilities/keytips/utilities/keytips/IKeytipTransitionKey.ts", "../../@fluentui/react/lib/utilities/keytips/utilities/keytips/KeytipConfig.ts", "../../@fluentui/react/lib/utilities/keytips/utilities/keytips/KeytipUtils.ts", "../../@fluentui/react/lib/components/KeytipData/components/KeytipData/useKeytipData.ts", "../../@fluentui/react/lib/components/KeytipData/components/KeytipData/KeytipData.tsx", "../../@fluentui/react/lib/components/KeytipData/components/KeytipData/useKeytipRef.ts", "../../@fluentui/react/lib/components/ContextualMenu/ContextualMenuItemWrapper/components/ContextualMenu/ContextualMenuItemWrapper/ContextualMenuButton.tsx", "../../@fluentui/react/lib/components/ContextualMenu/ContextualMenuItemWrapper/components/ContextualMenu/ContextualMenuItemWrapper/ContextualMenuSplitButton.tsx", "../../@fluentui/react/lib/components/Divider/components/Divider/VerticalDivider.styles.ts", "../../@fluentui/react/lib/components/Divider/components/Divider/VerticalDivider.base.tsx", "../../@fluentui/react/lib/components/Divider/components/Divider/VerticalDivider.tsx", "../../@fluentui/react/lib/utilities/hooks/utilities/hooks/useResponsiveMode.tsx", "../../@fluentui/react/lib/utilities/decorators/utilities/decorators/withResponsiveMode.tsx", "../../@fluentui/react/lib/utilities/MenuContext/utilities/MenuContext/MenuContext.ts", "../../@fluentui/react/lib/components/ContextualMenu/components/ContextualMenu/ContextualMenu.styles.ts", "../../@fluentui/react/lib/components/Button/components/Button/BaseButton.classNames.ts", "../../@fluentui/react/lib/components/Button/SplitButton/components/Button/SplitButton/SplitButton.classNames.ts", "../../@fluentui/react/lib/components/Button/components/Button/Button.types.ts", "../../@fluentui/react/lib/components/Button/components/Button/Button.tsx", "../../@fluentui/react/lib/components/Button/DefaultButton/components/Button/DefaultButton/DefaultButton.tsx", "../../@fluentui/react/lib/components/Button/components/Button/BaseButton.styles.ts", "../../@fluentui/react/lib/components/Button/SplitButton/components/Button/SplitButton/SplitButton.styles.ts", "../../@fluentui/react/lib/components/Button/components/Button/ButtonThemes.ts", "../../@fluentui/react/lib/components/Button/DefaultButton/components/Button/DefaultButton/DefaultButton.styles.ts", "../../@fluentui/react/lib/components/Button/ActionButton/components/Button/ActionButton/ActionButton.tsx", "../../@fluentui/react/lib/components/Button/ActionButton/components/Button/ActionButton/ActionButton.styles.ts", "../../@fluentui/react/lib/components/Button/CompoundButton/components/Button/CompoundButton/CompoundButton.tsx", "../../@fluentui/react/lib/components/Button/CompoundButton/components/Button/CompoundButton/CompoundButton.styles.ts", "../../@fluentui/react/lib/components/Button/IconButton/components/Button/IconButton/IconButton.tsx", "../../@fluentui/react/lib/components/Button/IconButton/components/Button/IconButton/IconButton.styles.ts", "../../@fluentui/react/lib/components/Button/PrimaryButton/components/Button/PrimaryButton/PrimaryButton.tsx", "../../@fluentui/react/lib/components/Button/CommandBarButton/components/Button/CommandBarButton/CommandBarButton.tsx", "../../@fluentui/react/lib/components/Button/CommandBarButton/components/Button/CommandBarButton/CommandBarButton.styles.ts", "../../@fluentui/react/lib/components/Button/CommandButton/components/Button/CommandButton/CommandButton.tsx", "../../@fluentui/react/lib/components/Button/MessageBarButton/components/Button/MessageBarButton/MessageBarButton.tsx", "../../@fluentui/react/lib/components/Button/MessageBarButton/components/Button/MessageBarButton/MessageBarButton.styles.ts", "../../@fluentui/react/lib/components/CommandBar/components/CommandBar/CommandBar.tsx"],
  "sourcesContent": ["import { memoizeFunction } from '../../Utilities';\nimport type { ICommandBarStyleProps, ICommandBarStyles } from './CommandBar.types';\nimport type { IButtonStyles } from '../../Button';\nimport type { IStyle } from '../../Styling';\n\nconst COMMAND_BAR_HEIGHT = 44;\n\nexport const getStyles = (props: ICommandBarStyleProps): ICommandBarStyles => {\n  const { className, theme } = props;\n  const { semanticColors } = theme;\n\n  return {\n    root: [\n      theme.fonts.medium,\n      'ms-CommandBar',\n      {\n        display: 'flex',\n        backgroundColor: semanticColors.bodyBackground,\n        padding: '0 14px 0 24px',\n        height: COMMAND_BAR_HEIGHT,\n      },\n      className,\n    ],\n    primarySet: [\n      'ms-CommandBar-primaryCommand',\n      {\n        flexGrow: '1',\n        display: 'flex',\n        alignItems: 'stretch',\n      },\n    ],\n    secondarySet: [\n      'ms-CommandBar-secondaryCommand',\n      {\n        flexShrink: '0',\n        display: 'flex',\n        alignItems: 'stretch',\n      },\n    ],\n  };\n};\n\nexport const getCommandButtonStyles = memoizeFunction((customStyles: IButtonStyles | undefined): IButtonStyles => {\n  const rootStyles: IStyle = {\n    height: '100%',\n  };\n  const labelStyles: IStyle = {\n    whiteSpace: 'nowrap',\n  };\n\n  const { root, label, ...restCustomStyles } = customStyles || {};\n\n  return {\n    ...restCustomStyles,\n    root: root ? [rootStyles, root] : rootStyles,\n    label: label ? [labelStyles, label] : labelStyles,\n  };\n});\n", "import * as React from 'react';\nimport {\n  classNamesFunction,\n  css,\n  nullRender,\n  getNativeProps,\n  divProperties,\n  composeComponentAs,\n  initializeComponentRef,\n} from '../../Utilities';\nimport { OverflowSet } from '../../OverflowSet';\nimport { ResizeGroup } from '../../ResizeGroup';\nimport { FocusZone, FocusZoneDirection } from '../../FocusZone';\nimport { CommandBarButton } from '../../Button';\nimport { TooltipHost } from '../../Tooltip';\nimport { getCommandButtonStyles } from './CommandBar.styles';\nimport type { IComponentAs } from '../../Utilities';\nimport type {\n  ICommandBar,\n  ICommandBarItemProps,\n  ICommandBarProps,\n  ICommandBarStyleProps,\n  ICommandBarStyles,\n} from './CommandBar.types';\nimport type { IOverflowSet } from '../../OverflowSet';\nimport type { IResizeGroup } from '../../ResizeGroup';\nimport type { IButtonProps } from '../../Button';\n\nconst getClassNames = classNamesFunction<ICommandBarStyleProps, ICommandBarStyles>();\n\nexport interface ICommandBarData {\n  /**\n   * Items being rendered in the primary region\n   */\n  primaryItems: ICommandBarItemProps[];\n  /**\n   * Items being rendered in the overflow\n   */\n  overflowItems: ICommandBarItemProps[];\n  /**\n   * Items being rendered on the far side\n   */\n  farItems: ICommandBarItemProps[] | undefined;\n  /**\n   * Length of original overflowItems to ensure that they are not moved into primary region on resize\n   */\n  minimumOverflowItems: number;\n  /**\n   * Unique string used to cache the width of the command bar\n   */\n  cacheKey: string;\n}\n\nexport class CommandBarBase extends React.Component<ICommandBarProps, {}> implements ICommandBar {\n  public static defaultProps: ICommandBarProps = {\n    items: [],\n    overflowItems: [],\n  };\n\n  private _overflowSet = React.createRef<IOverflowSet>();\n  private _resizeGroup = React.createRef<IResizeGroup>();\n  private _classNames: { [key in keyof ICommandBarStyles]: string };\n\n  constructor(props: ICommandBarProps) {\n    super(props);\n\n    initializeComponentRef(this);\n  }\n\n  public render(): JSX.Element {\n    const {\n      items,\n      overflowItems,\n      farItems,\n      styles,\n      theme,\n      dataDidRender,\n      onReduceData = this._onReduceData,\n      onGrowData = this._onGrowData,\n      resizeGroupAs: ResizeGroupAs = ResizeGroup,\n    } = this.props;\n\n    const commandBarData: ICommandBarData = {\n      primaryItems: [...items],\n      overflowItems: [...overflowItems!],\n      minimumOverflowItems: [...overflowItems!].length, // for tracking\n      farItems,\n      cacheKey: this._computeCacheKey({\n        primaryItems: [...items],\n        overflow: overflowItems && overflowItems.length > 0,\n        farItems,\n      }),\n    };\n\n    this._classNames = getClassNames(styles!, { theme: theme! });\n\n    // ResizeGroup will render these attributes to the root <div>.\n    // TODO We may need to elevate classNames from <FocusZone> into <ResizeGroup> ?\n    const nativeProps = getNativeProps<React.HTMLAttributes<HTMLDivElement>>(this.props, divProperties);\n\n    return (\n      <ResizeGroupAs\n        {...nativeProps}\n        componentRef={this._resizeGroup}\n        data={commandBarData}\n        onReduceData={onReduceData}\n        onGrowData={onGrowData}\n        onRenderData={this._onRenderData}\n        dataDidRender={dataDidRender}\n      />\n    );\n  }\n\n  public focus(): void {\n    const { current: overflowSet } = this._overflowSet;\n\n    overflowSet && overflowSet.focus();\n  }\n\n  public remeasure(): void {\n    this._resizeGroup.current && this._resizeGroup.current.remeasure();\n  }\n\n  private _onRenderData = (data: ICommandBarData): JSX.Element => {\n    const { ariaLabel, primaryGroupAriaLabel, farItemsGroupAriaLabel } = this.props;\n    const hasSecondSet = data.farItems && data.farItems.length > 0;\n\n    return (\n      <FocusZone\n        className={css(this._classNames.root)}\n        direction={FocusZoneDirection.horizontal}\n        role={'menubar'}\n        aria-label={ariaLabel}\n      >\n        {/*Primary Items*/}\n        <OverflowSet\n          role={hasSecondSet ? 'group' : 'none'}\n          aria-label={hasSecondSet ? primaryGroupAriaLabel : undefined}\n          componentRef={this._overflowSet}\n          className={css(this._classNames.primarySet)}\n          items={data.primaryItems}\n          overflowItems={data.overflowItems.length ? data.overflowItems : undefined}\n          onRenderItem={this._onRenderItem}\n          onRenderOverflowButton={this._onRenderOverflowButton}\n        />\n\n        {/*Secondary Items*/}\n        {hasSecondSet && (\n          <OverflowSet\n            role=\"group\"\n            aria-label={farItemsGroupAriaLabel}\n            className={css(this._classNames.secondarySet)}\n            items={data.farItems}\n            onRenderItem={this._onRenderItem}\n            onRenderOverflowButton={nullRender}\n          />\n        )}\n      </FocusZone>\n    );\n  };\n\n  private _onRenderItem = (item: ICommandBarItemProps): JSX.Element | React.ReactNode => {\n    if (item.onRender) {\n      // These are the top level items, there is no relevant menu dismissing function to\n      // provide for the IContextualMenuItem onRender function. Pass in a no op function instead.\n      return item.onRender(item, () => undefined);\n    }\n\n    // eslint-disable-next-line deprecation/deprecation\n    const itemText = item.text || item.name;\n    const commandButtonProps: ICommandBarItemProps = {\n      allowDisabledFocus: true,\n      role: 'menuitem',\n      ...item,\n      styles: getCommandButtonStyles(item.buttonStyles),\n      className: css('ms-CommandBarItem-link', item.className),\n      text: !item.iconOnly ? itemText : undefined,\n      menuProps: item.subMenuProps,\n      onClick: this._onButtonClick(item),\n    };\n\n    if (item.iconOnly && (itemText !== undefined || item.tooltipHostProps)) {\n      return (\n        <TooltipHost role=\"none\" content={itemText} setAriaDescribedBy={false} {...item.tooltipHostProps}>\n          {this._commandButton(item, commandButtonProps)}\n        </TooltipHost>\n      );\n    }\n\n    return this._commandButton(item, commandButtonProps);\n  };\n\n  private _commandButton = (item: ICommandBarItemProps, props: ICommandBarItemProps): JSX.Element => {\n    const ButtonAs = this.props.buttonAs as IComponentAs<ICommandBarItemProps> | undefined;\n    const CommandBarButtonAs = item.commandBarButtonAs as IComponentAs<ICommandBarItemProps> | undefined;\n    const DefaultButtonAs = CommandBarButton as {} as IComponentAs<ICommandBarItemProps>;\n\n    // The prop types between these three possible implementations overlap enough that a force-cast is safe.\n    let Type = DefaultButtonAs;\n\n    if (CommandBarButtonAs) {\n      Type = composeComponentAs(CommandBarButtonAs, Type);\n    }\n\n    if (ButtonAs) {\n      Type = composeComponentAs(ButtonAs, Type);\n    }\n\n    // Always pass the default implementation to the override so it may be composed.\n    return <Type {...(props as ICommandBarItemProps)} />;\n  };\n\n  private _onButtonClick(item: ICommandBarItemProps): (ev: React.MouseEvent<HTMLButtonElement>) => void {\n    return ev => {\n      // inactive is deprecated. remove check in 7.0\n      // eslint-disable-next-line deprecation/deprecation\n      if (item.inactive) {\n        return;\n      }\n      if (item.onClick) {\n        item.onClick(ev, item);\n      }\n    };\n  }\n\n  private _onRenderOverflowButton = (overflowItems: ICommandBarItemProps[]): JSX.Element => {\n    const {\n      overflowButtonProps = {}, // assure that props is not empty\n    } = this.props;\n\n    const combinedOverflowItems: ICommandBarItemProps[] = [\n      ...(overflowButtonProps.menuProps ? overflowButtonProps.menuProps.items : []),\n      ...overflowItems,\n    ];\n\n    const overflowProps: IButtonProps = {\n      role: 'menuitem',\n      ...overflowButtonProps,\n      styles: { menuIcon: { fontSize: '17px' }, ...overflowButtonProps.styles },\n      className: css('ms-CommandBar-overflowButton', overflowButtonProps.className),\n      menuProps: { ...overflowButtonProps.menuProps, items: combinedOverflowItems },\n      menuIconProps: { iconName: 'More', ...overflowButtonProps.menuIconProps },\n    };\n\n    const OverflowButtonType = this.props.overflowButtonAs\n      ? composeComponentAs(this.props.overflowButtonAs, CommandBarButton)\n      : CommandBarButton;\n\n    return <OverflowButtonType {...(overflowProps as IButtonProps)} />;\n  };\n\n  private _computeCacheKey(data: {\n    primaryItems?: ICommandBarItemProps[];\n    overflow?: boolean;\n    farItems?: ICommandBarItemProps[];\n  }): string {\n    const { primaryItems, overflow, farItems } = data;\n    const returnKey = (acc: string, current: ICommandBarItemProps): string => {\n      const { cacheKey = current.key } = current;\n      return acc + cacheKey;\n    };\n\n    const primaryKey = primaryItems && primaryItems.reduce(returnKey, '');\n    const overflowKey = overflow ? 'overflow' : '';\n    const farKey = farItems && farItems.reduce(returnKey, '');\n\n    return [primaryKey, overflowKey, farKey].join('');\n  }\n\n  private _onReduceData = (data: ICommandBarData): ICommandBarData | undefined => {\n    const { shiftOnReduce, onDataReduced } = this.props;\n    let { primaryItems, overflowItems, cacheKey } = data;\n    const { farItems } = data;\n\n    // Use first item if shiftOnReduce, otherwise use last item\n    const movedItem = primaryItems[shiftOnReduce ? 0 : primaryItems.length - 1];\n\n    if (movedItem !== undefined) {\n      movedItem.renderedInOverflow = true;\n\n      overflowItems = [movedItem, ...overflowItems];\n      primaryItems = shiftOnReduce ? primaryItems.slice(1) : primaryItems.slice(0, -1);\n\n      const newData = { ...data, primaryItems, overflowItems };\n      cacheKey = this._computeCacheKey({ primaryItems, overflow: overflowItems.length > 0, farItems });\n\n      if (onDataReduced) {\n        onDataReduced(movedItem);\n      }\n\n      newData.cacheKey = cacheKey;\n      return newData;\n    }\n\n    return undefined;\n  };\n\n  private _onGrowData = (data: ICommandBarData): ICommandBarData | undefined => {\n    const { shiftOnReduce, onDataGrown } = this.props;\n    const { minimumOverflowItems } = data;\n    let { primaryItems, overflowItems, cacheKey } = data;\n    const { farItems } = data;\n    const movedItem = overflowItems[0];\n\n    // Make sure that moved item exists and is not one of the original overflow items\n    if (movedItem !== undefined && overflowItems.length > minimumOverflowItems) {\n      movedItem.renderedInOverflow = false;\n\n      overflowItems = overflowItems.slice(1);\n      // if shiftOnReduce, movedItem goes first, otherwise, last.\n      primaryItems = shiftOnReduce ? [movedItem, ...primaryItems] : [...primaryItems, movedItem];\n\n      const newData = { ...data, primaryItems, overflowItems };\n      cacheKey = this._computeCacheKey({ primaryItems, overflow: overflowItems.length > 0, farItems });\n\n      if (onDataGrown) {\n        onDataGrown(movedItem);\n      }\n\n      newData.cacheKey = cacheKey;\n      return newData;\n    }\n\n    return undefined;\n  };\n}\n", "import * as React from 'react';\nimport { useMergedRefs } from '@fluentui/react-hooks';\nimport { classNamesFunction, divProperties, elementContains, getNativeProps, focusFirstChild } from '../../Utilities';\nimport { OverflowButton } from './OverflowButton';\nimport type { IProcessedStyleSet } from '../../Styling';\nimport type { IOverflowSetProps, IOverflowSetStyles, IOverflowSetStyleProps, IOverflowSet } from './OverflowSet.types';\n\nconst getClassNames = classNamesFunction<IOverflowSetStyleProps, IOverflowSetStyles>();\nconst COMPONENT_NAME = 'OverflowSet';\n\nconst useComponentRef = (props: IOverflowSetProps, divContainer: React.RefObject<HTMLDivElement>) => {\n  React.useImperativeHandle(\n    props.componentRef,\n    (): IOverflowSet => ({\n      focus: (_forceIntoFirstElement?: boolean, bypassHiddenElements?: boolean): boolean => {\n        let focusSucceeded = false;\n        if (divContainer.current) {\n          focusSucceeded = focusFirstChild(divContainer.current, bypassHiddenElements);\n        }\n        return focusSucceeded;\n      },\n      focusElement: (childElement?: HTMLElement) => {\n        let focusSucceeded = false;\n        if (!childElement) {\n          return false;\n        }\n        if (divContainer.current && elementContains(divContainer.current, childElement)) {\n          childElement.focus();\n          focusSucceeded = document.activeElement === childElement;\n        }\n        return focusSucceeded;\n      },\n    }),\n    [divContainer],\n  );\n};\n\nexport const OverflowSetBase: React.FunctionComponent<IOverflowSetProps> = React.forwardRef<\n  HTMLDivElement,\n  IOverflowSetProps\n>((props, forwardedRef) => {\n  const divContainer = React.useRef<HTMLDivElement>(null);\n  const mergedRef = useMergedRefs(divContainer, forwardedRef);\n  useComponentRef(props, divContainer);\n\n  const { items, overflowItems, className, styles, vertical, role, overflowSide = 'end', onRenderItem } = props;\n\n  const classNames: IProcessedStyleSet<IOverflowSetStyles> = getClassNames(styles, { className, vertical });\n\n  const showOverflow = !!overflowItems && overflowItems.length > 0;\n\n  return (\n    <div\n      {...getNativeProps<React.HTMLAttributes<HTMLDivElement>>(props, divProperties)}\n      role={role || 'group'}\n      aria-orientation={role === 'menubar' ? (vertical === true ? 'vertical' : 'horizontal') : undefined}\n      className={classNames.root}\n      ref={mergedRef}\n    >\n      {overflowSide === 'start' && showOverflow && <OverflowButton {...props} className={classNames.overflowButton} />}\n      {items &&\n        items.map((item, i) => (\n          <div className={classNames.item} key={item.key} role=\"none\">\n            {onRenderItem(item)}\n          </div>\n        ))}\n      {overflowSide === 'end' && showOverflow && <OverflowButton {...props} className={classNames.overflowButton} />}\n    </div>\n  );\n});\nOverflowSetBase.displayName = COMPONENT_NAME;\n", "import * as React from 'react';\nimport { KeytipManager } from '../../utilities/keytips/KeytipManager';\nimport { useConst, usePrevious } from '@fluentui/react-hooks';\nimport type { IKeytipProps } from '../../Keytip';\nimport type { IOverflowSetItemProps, IOverflowSetProps } from './OverflowSet.types';\n\nconst registerPersistedKeytips = (\n  keytipsToRegister: IKeytipProps[],\n  keytipManager: KeytipManager,\n  registeredPersistedKeytips: { [uniqueID: string]: IKeytipProps },\n) => {\n  for (const keytip of keytipsToRegister) {\n    const uniqueID = keytipManager.register(keytip, true);\n    // Update map\n    registeredPersistedKeytips[uniqueID] = keytip;\n  }\n};\n\nconst unregisterPersistedKeytips = (\n  keytipManager: KeytipManager,\n  registeredPersistedKeytips: { [uniqueID: string]: IKeytipProps },\n) => {\n  for (const uniqueID of Object.keys(registeredPersistedKeytips)) {\n    keytipManager.unregister(registeredPersistedKeytips[uniqueID], uniqueID, true);\n    delete registeredPersistedKeytips[uniqueID];\n  }\n};\n\nconst useKeytipRegistrations = (\n  registeredPersistedKeytips: { [uniqueID: string]: IKeytipProps },\n  keytipsToRegister: IKeytipProps[],\n  keytipManager: KeytipManager,\n) => {\n  const prevPersistedKeytips = usePrevious(registeredPersistedKeytips);\n\n  // Update\n  React.useEffect(() => {\n    if (prevPersistedKeytips) {\n      // Unregister old keytips\n      unregisterPersistedKeytips(keytipManager, prevPersistedKeytips);\n      // Register new keytips\n      registerPersistedKeytips(keytipsToRegister, keytipManager, registeredPersistedKeytips);\n    }\n  });\n\n  // Mount/Unmount\n  React.useEffect(() => {\n    // Register on mount\n    registerPersistedKeytips(keytipsToRegister, keytipManager, registeredPersistedKeytips);\n    return () => {\n      // Unregister on unmount\n      unregisterPersistedKeytips(keytipManager, registeredPersistedKeytips);\n    };\n    // eslint-disable-next-line react-hooks/exhaustive-deps\n  }, []);\n};\n\nexport const OverflowButton = (props: IOverflowSetProps) => {\n  const keytipManager: KeytipManager = KeytipManager.getInstance();\n  const { className, overflowItems, keytipSequences, itemSubMenuProvider, onRenderOverflowButton } = props;\n\n  const persistedKeytips = useConst<{ [uniqueID: string]: IKeytipProps }>({});\n\n  // Gets the subMenu for an overflow item\n  const getSubMenuForItem = React.useCallback(\n    (item: IOverflowSetItemProps) => {\n      // Checks if itemSubMenuProvider has been defined, if not defaults to subMenuProps\n      if (itemSubMenuProvider) {\n        return itemSubMenuProvider(item);\n      }\n      if (item.subMenuProps) {\n        return item.subMenuProps.items;\n      }\n      return undefined;\n    },\n    [itemSubMenuProvider],\n  );\n\n  const { modifiedOverflowItems, keytipsToRegister } = React.useMemo(() => {\n    const newKeytipsToRegister: IKeytipProps[] = [];\n    let newOverflowItems: IOverflowSetItemProps[] | undefined = [];\n\n    if (keytipSequences) {\n      overflowItems?.forEach(overflowItem => {\n        const keytip = (overflowItem as IOverflowSetItemProps).keytipProps;\n\n        if (keytip) {\n          // Create persisted keytip\n          const persistedKeytip: IKeytipProps = {\n            content: keytip.content,\n            keySequences: keytip.keySequences,\n            disabled: keytip.disabled || !!(overflowItem.disabled || overflowItem.isDisabled),\n            hasDynamicChildren: keytip.hasDynamicChildren,\n            hasMenu: keytip.hasMenu,\n          };\n\n          if (keytip.hasDynamicChildren || getSubMenuForItem(overflowItem)) {\n            // If the keytip has a submenu or children nodes, change onExecute to persistedKeytipExecute\n            persistedKeytip.onExecute = keytipManager.menuExecute.bind(\n              keytipManager,\n              keytipSequences,\n              overflowItem?.keytipProps?.keySequences,\n            );\n            persistedKeytip.hasOverflowSubMenu = true;\n          } else {\n            // If the keytip doesn't have a submenu, just execute the original function\n            persistedKeytip.onExecute = keytip.onExecute;\n          }\n\n          newKeytipsToRegister.push(persistedKeytip);\n\n          // Add the overflow sequence to this item\n          const newOverflowItem = {\n            ...overflowItem,\n            keytipProps: {\n              ...keytip,\n              overflowSetSequence: keytipSequences,\n            },\n          };\n          newOverflowItems?.push(newOverflowItem);\n        } else {\n          // Nothing to change, add overflowItem to list\n          newOverflowItems?.push(overflowItem);\n        }\n      });\n    } else {\n      newOverflowItems = overflowItems;\n    }\n    return { modifiedOverflowItems: newOverflowItems, keytipsToRegister: newKeytipsToRegister };\n  }, [overflowItems, getSubMenuForItem, keytipManager, keytipSequences]);\n\n  useKeytipRegistrations(persistedKeytips, keytipsToRegister, keytipManager);\n\n  return <div className={className}>{onRenderOverflowButton(modifiedOverflowItems)}</div>;\n};\n", "export const KTP_PREFIX = 'ktp';\nexport const KTP_SEPARATOR = '-';\nexport const KTP_FULL_PREFIX = KTP_PREFIX + KTP_SEPARATOR;\nexport const DATAKTP_TARGET = 'data-ktp-target';\nexport const DATAKTP_EXECUTE_TARGET = 'data-ktp-execute-target';\nexport const DATAKTP_ARIA_TARGET = 'data-ktp-aria-target';\nexport const KTP_LAYER_ID = 'ktp-layer-id';\nexport const KTP_ARIA_SEPARATOR = ', ';\n\n// Events\nexport namespace KeytipEvents {\n  export const KEYTIP_ADDED = 'keytipAdded';\n  export const KEYTIP_REMOVED = 'keytipRemoved';\n  export const KEYTIP_UPDATED = 'keytipUpdated';\n  export const PERSISTED_KEYTIP_ADDED = 'persistedKeytipAdded';\n  export const PERSISTED_KEYTIP_REMOVED = 'persistedKeytipRemoved';\n  export const PERSISTED_KEYTIP_EXECUTE = 'persistedKeytipExecute';\n  export const ENTER_KEYTIP_MODE = 'enterKeytipMode';\n  export const EXIT_KEYTIP_MODE = 'exitKeytipMode';\n}\n", "import { EventGroup, getId } from '../../Utilities';\nimport { KeytipEvents } from '../../utilities/keytips/KeytipConstants';\nimport type { IKeytipProps } from '../../Keytip';\n\nexport interface IUniqueKeytip {\n  uniqueID: string;\n  keytip: IKeytipProps;\n}\n\n/**\n * This class is responsible for handling registering, updating, and unregistering of keytips\n */\nexport class KeytipManager {\n  private static _instance: KeytipManager = new KeytipManager();\n\n  public keytips: { [key: string]: IUniqueKeytip } = {};\n  public persistedKeytips: { [key: string]: IUniqueKeytip } = {};\n  public sequenceMapping: { [key: string]: IKeytipProps } = {};\n\n  // This is (and should be) updated and kept in sync\n  // with the inKeytipMode in KeytipLayer.\n  public inKeytipMode = false;\n\n  // Boolean that gets checked before entering keytip mode by the KeytipLayer\n  // Used for an override in special cases (e.g. Disable entering keytip mode when a modal is shown)\n  public shouldEnterKeytipMode = true;\n\n  // Boolean to indicate whether to delay firing an event to update subscribers of\n  // keytip data changed.\n  public delayUpdatingKeytipChange = false;\n\n  /**\n   * Static function to get singleton KeytipManager instance\n   *\n   * @returns Singleton KeytipManager instance\n   */\n  public static getInstance(): KeytipManager {\n    return this._instance;\n  }\n\n  /**\n   * Initialization code to set set parameters to define\n   * how the KeytipManager handles keytip data.\n   *\n   * @param delayUpdatingKeytipChange - T/F if we should delay notifiying keytip subscribers\n   * of keytip changes\n   */\n  public init(delayUpdatingKeytipChange: boolean) {\n    this.delayUpdatingKeytipChange = delayUpdatingKeytipChange;\n  }\n\n  /**\n   * Registers a keytip\n   *\n   * @param keytipProps - Keytip to register\n   * @param persisted - T/F if this keytip should be persisted, default is false\n   * @returns Unique ID for this keytip\n   */\n  public register(keytipProps: IKeytipProps, persisted: boolean = false): string {\n    let props: IKeytipProps = keytipProps;\n    if (!persisted) {\n      // Add the overflowSetSequence if necessary\n      props = this.addParentOverflow(keytipProps);\n      this.sequenceMapping[props.keySequences.toString()] = props;\n    }\n    // Create a unique keytip\n    const uniqueKeytip: IUniqueKeytip = this._getUniqueKtp(props);\n    // Add to dictionary\n    persisted\n      ? (this.persistedKeytips[uniqueKeytip.uniqueID] = uniqueKeytip)\n      : (this.keytips[uniqueKeytip.uniqueID] = uniqueKeytip);\n\n    // We only want to add something new if we are currently showing keytip mode\n    if (this.inKeytipMode || !this.delayUpdatingKeytipChange) {\n      const event = persisted ? KeytipEvents.PERSISTED_KEYTIP_ADDED : KeytipEvents.KEYTIP_ADDED;\n      EventGroup.raise(this, event, {\n        keytip: props,\n        uniqueID: uniqueKeytip.uniqueID,\n      });\n    }\n\n    return uniqueKeytip.uniqueID;\n  }\n\n  /**\n   * Update a keytip\n   *\n   * @param keytipProps - Keytip to update\n   * @param uniqueID - Unique ID of this keytip\n   */\n  public update(keytipProps: IKeytipProps, uniqueID: string): void {\n    const newKeytipProps = this.addParentOverflow(keytipProps);\n    const uniqueKeytip = this._getUniqueKtp(newKeytipProps, uniqueID);\n    const oldKeyTip = this.keytips[uniqueID];\n    if (oldKeyTip) {\n      // Update everything except 'visible'\n      uniqueKeytip.keytip.visible = oldKeyTip.keytip.visible;\n      // Update keytip in this.keytips\n      this.keytips[uniqueID] = uniqueKeytip;\n\n      // Update the sequence to be up to date\n      delete this.sequenceMapping[oldKeyTip.keytip.keySequences.toString()];\n      this.sequenceMapping[uniqueKeytip.keytip.keySequences.toString()] = uniqueKeytip.keytip;\n\n      // Raise event only if we are currently in keytip mode\n      if (this.inKeytipMode || !this.delayUpdatingKeytipChange) {\n        EventGroup.raise(this, KeytipEvents.KEYTIP_UPDATED, {\n          keytip: uniqueKeytip.keytip,\n          uniqueID: uniqueKeytip.uniqueID,\n        });\n      }\n    }\n  }\n\n  /**\n   * Unregisters a keytip\n   *\n   * @param keytipToRemove - IKeytipProps of the keytip to remove\n   * @param uniqueID - Unique ID of this keytip\n   * @param persisted - T/F if this keytip should be persisted, default is false\n   */\n  public unregister(keytipToRemove: IKeytipProps, uniqueID: string, persisted: boolean = false): void {\n    persisted ? delete this.persistedKeytips[uniqueID] : delete this.keytips[uniqueID];\n    !persisted && delete this.sequenceMapping[keytipToRemove.keySequences.toString()];\n\n    const event = persisted ? KeytipEvents.PERSISTED_KEYTIP_REMOVED : KeytipEvents.KEYTIP_REMOVED;\n    // Update keytips only if we're in keytip mode\n    if (this.inKeytipMode || !this.delayUpdatingKeytipChange) {\n      EventGroup.raise(this, event, {\n        keytip: keytipToRemove,\n        uniqueID,\n      });\n    }\n  }\n\n  /**\n   * Manual call to enter keytip mode\n   */\n  public enterKeytipMode(): void {\n    EventGroup.raise(this, KeytipEvents.ENTER_KEYTIP_MODE);\n  }\n\n  /**\n   * Manual call to exit keytip mode\n   */\n  public exitKeytipMode(): void {\n    EventGroup.raise(this, KeytipEvents.EXIT_KEYTIP_MODE);\n  }\n\n  /**\n   * Gets all IKeytipProps from this.keytips\n   *\n   * @returns All keytips stored in the manager\n   */\n  public getKeytips(): IKeytipProps[] {\n    return Object.keys(this.keytips).map(key => this.keytips[key].keytip);\n  }\n\n  /**\n   * Adds the overflowSetSequence to the keytipProps if its parent keytip also has it\n   *\n   * @param keytipProps - Keytip props to add overflowSetSequence to if necessary\n   * @returns - Modified keytip props, if needed to be modified\n   */\n  public addParentOverflow(keytipProps: IKeytipProps): IKeytipProps {\n    const fullSequence = [...keytipProps.keySequences];\n    fullSequence.pop();\n    if (fullSequence.length !== 0) {\n      const parentKeytip = this.sequenceMapping[fullSequence.toString()];\n      if (parentKeytip && parentKeytip.overflowSetSequence) {\n        return {\n          ...keytipProps,\n          overflowSetSequence: parentKeytip.overflowSetSequence,\n        };\n      }\n    }\n    return keytipProps;\n  }\n\n  /**\n   * Public function to bind for overflow items that have a submenu\n   */\n  public menuExecute(overflowButtonSequences: string[], keytipSequences: string[]) {\n    EventGroup.raise(this, KeytipEvents.PERSISTED_KEYTIP_EXECUTE, {\n      overflowButtonSequences,\n      keytipSequences,\n    });\n  }\n\n  /**\n   * Creates an IUniqueKeytip object\n   *\n   * @param keytipProps - IKeytipProps\n   * @param uniqueID - Unique ID, will default to the next unique ID if not passed\n   * @returns IUniqueKeytip object\n   */\n  private _getUniqueKtp(keytipProps: IKeytipProps, uniqueID: string = getId()): IUniqueKeytip {\n    return { keytip: { ...keytipProps }, uniqueID };\n  }\n}\n", "import type { IOverflowSetStyles, IOverflowSetStyleProps } from './OverflowSet.types';\nimport type { IStyleFunction } from '../../Utilities';\nimport type { IStyle } from '../../Styling';\n\nconst overflowItemStyle: IStyle = {\n  flexShrink: 0,\n  display: 'inherit',\n};\n\nexport const getStyles: IStyleFunction<IOverflowSetStyleProps, IOverflowSetStyles> = props => {\n  const { className, vertical } = props;\n  return {\n    root: [\n      'ms-OverflowSet',\n      {\n        position: 'relative',\n        display: 'flex',\n        flexWrap: 'nowrap',\n      },\n      vertical && { flexDirection: 'column' },\n      className,\n    ],\n    item: ['ms-OverflowSet-item', overflowItemStyle],\n    overflowButton: ['ms-OverflowSet-overflowButton', overflowItemStyle],\n  };\n};\n", "import * as React from 'react';\nimport { styled } from '../../Utilities';\nimport { OverflowSetBase } from './OverflowSet.base';\nimport { getStyles } from './OverflowSet.styles';\nimport type { IOverflowSetProps } from './OverflowSet.types';\n\nexport const OverflowSet: React.FunctionComponent<IOverflowSetProps> = styled(OverflowSetBase, getStyles, undefined, {\n  scope: 'OverflowSet',\n});\n", "import * as React from 'react';\nimport { Async, divProperties, getNativeProps } from '../../Utilities';\nimport { ResizeGroupDirection } from './ResizeGroup.types';\nimport { useConst, useMergedRefs, useAsync, useOnEvent, useWarnings } from '@fluentui/react-hooks';\nimport { useWindow } from '../../WindowProvider';\nimport type { IResizeGroupProps } from './ResizeGroup.types';\n\nconst RESIZE_DELAY = 16;\n\nexport interface IResizeGroupState {\n  /**\n   * Final data used to render proper sized component\n   */\n  renderedData?: any;\n\n  /**\n   * Data to render in a hidden div for measurement\n   */\n  dataToMeasure?: any;\n\n  /**\n   * Set to true when the content container might have new dimensions and should\n   * be remeasured.\n   */\n  measureContainer?: boolean;\n\n  /**\n   * Are we resizing to accommodate having more or less available space?\n   * The 'grow' direction is when the container may have more room than the last render,\n   * such as when a window resize occurs. This means we will try to fit more content in the window.\n   * The 'shrink' direction is when the contents don't fit in the container and we need\n   * to find a transformation of the data that makes everything fit.\n   */\n  resizeDirection?: 'grow' | 'shrink';\n}\n\n/**\n * Returns a simple object is able to store measurements with a given key.\n */\nexport const getMeasurementCache = () => {\n  const measurementsCache: { [key: string]: number } = {};\n\n  return {\n    /**\n     * Checks if the provided data has a cacheKey. If it has a cacheKey and there is a\n     * corresponding entry in the measurementsCache, then it will return that value.\n     * Returns undefined otherwise.\n     */\n    getCachedMeasurement: (data: any): number | undefined => {\n      if (data && data.cacheKey && measurementsCache.hasOwnProperty(data.cacheKey)) {\n        return measurementsCache[data.cacheKey];\n      }\n\n      return undefined;\n    },\n    /**\n     * Should be called whenever there is a new measurement associated with a given data object.\n     * If the data has a cacheKey, store that measurement in the measurementsCache.\n     */\n    addMeasurementToCache: (data: any, measurement: number): void => {\n      if (data.cacheKey) {\n        measurementsCache[data.cacheKey] = measurement;\n      }\n    },\n  };\n};\n\n/**\n * Returns a function that is able to compute the next state for the ResizeGroup given the current\n * state and any measurement updates.\n */\nexport const getNextResizeGroupStateProvider = (measurementCache = getMeasurementCache()) => {\n  const _measurementCache = measurementCache;\n  let _containerDimension: number | undefined;\n\n  /**\n   * Gets the width/height of the data rendered in a hidden div.\n   * @param measuredData - The data corresponding to the measurement we wish to take.\n   * @param getElementToMeasureDimension - A function that returns the measurement of the rendered data.\n   * Only called when the measurement is not in the cache.\n   */\n  function _getMeasuredDimension(measuredData: any, getElementToMeasureDimension: () => number): number {\n    const cachedDimension = _measurementCache.getCachedMeasurement(measuredData);\n    if (cachedDimension !== undefined) {\n      return cachedDimension;\n    }\n\n    const measuredDimension = getElementToMeasureDimension();\n    _measurementCache.addMeasurementToCache(measuredData, measuredDimension);\n    return measuredDimension;\n  }\n\n  /**\n   * Will get the next IResizeGroupState based on the current data while trying to shrink contents\n   * to fit in the container.\n   * @param data - The initial data point to start measuring.\n   * @param onReduceData - Function that transforms the data into something that should render with less width/height.\n   * @param getElementToMeasureDimension - A function that returns the measurement of the rendered data.\n   * Only called when the measurement is not in the cache.\n   */\n  function _shrinkContentsUntilTheyFit(\n    data: any,\n    onReduceData: (prevData: any) => any,\n    getElementToMeasureDimension: () => number,\n  ): IResizeGroupState {\n    let dataToMeasure = data;\n    let measuredDimension: number | undefined = _getMeasuredDimension(data, getElementToMeasureDimension);\n\n    while (measuredDimension > _containerDimension!) {\n      const nextMeasuredData = onReduceData(dataToMeasure);\n\n      // We don't want to get stuck in an infinite render loop when there are no more\n      // scaling steps, so implementations of onReduceData should return undefined when\n      // there are no more scaling states to apply.\n      if (nextMeasuredData === undefined) {\n        return {\n          renderedData: dataToMeasure,\n          resizeDirection: undefined,\n          dataToMeasure: undefined,\n        };\n      }\n\n      measuredDimension = _measurementCache.getCachedMeasurement(nextMeasuredData);\n\n      // If the measurement isn't in the cache, we need to re-render with some data in a hidden div\n      if (measuredDimension === undefined) {\n        return {\n          dataToMeasure: nextMeasuredData,\n          resizeDirection: 'shrink',\n        };\n      }\n\n      dataToMeasure = nextMeasuredData;\n    }\n\n    return {\n      renderedData: dataToMeasure,\n      resizeDirection: undefined,\n      dataToMeasure: undefined,\n    };\n  }\n\n  /**\n   * This function should be called when the state changes in a manner that might allow for more content to fit\n   * on the screen, such as the window width/height growing.\n   * @param data - The initial data point to start measuring.\n   * @param onGrowData - Function that transforms the data into something that may take up more space when rendering.\n   * @param getElementToMeasureDimension - A function that returns the measurement of the rendered data.\n   * Only called when the measurement is not in the cache.\n   */\n  function _growDataUntilItDoesNotFit(\n    data: any,\n    onGrowData: (prevData: any) => any,\n    getElementToMeasureDimension: () => number,\n    onReduceData: (prevData: any) => any,\n  ): IResizeGroupState {\n    let dataToMeasure = data;\n    let measuredDimension: number | undefined = _getMeasuredDimension(data, getElementToMeasureDimension);\n\n    while (measuredDimension < _containerDimension!) {\n      const nextMeasuredData = onGrowData(dataToMeasure);\n\n      // We don't want to get stuck in an infinite render loop when there are no more\n      // scaling steps, so implementations of onGrowData should return undefined when\n      // there are no more scaling states to apply.\n      if (nextMeasuredData === undefined) {\n        return {\n          renderedData: dataToMeasure,\n          resizeDirection: undefined,\n          dataToMeasure: undefined,\n        };\n      }\n\n      measuredDimension = _measurementCache.getCachedMeasurement(nextMeasuredData);\n      // If the measurement isn't in the cache, we need to re-render with some data in a hidden div\n      if (measuredDimension === undefined) {\n        return {\n          dataToMeasure: nextMeasuredData,\n        };\n      }\n\n      dataToMeasure = nextMeasuredData;\n    }\n\n    // Once the loop is done, we should now shrink until the contents fit.\n    return {\n      resizeDirection: 'shrink',\n      ..._shrinkContentsUntilTheyFit(dataToMeasure, onReduceData, getElementToMeasureDimension),\n    };\n  }\n\n  /**\n   * Handles an update to the container width/height.\n   * Should only be called when we knew the previous container width/height.\n   * @param newDimension - The new width/height of the container.\n   * @param fullDimensionData - The initial data passed in as a prop to resizeGroup.\n   * @param renderedData - The data that was rendered prior to the container size changing.\n   * @param onGrowData - Set to true if the Resize group has an onGrowData function.\n   */\n  function _updateContainerDimension(\n    newDimension: number,\n    fullDimensionData: any,\n    renderedData: any,\n    onGrowData?: (prevData: any) => any,\n  ): IResizeGroupState {\n    let nextState: IResizeGroupState;\n    if (newDimension > _containerDimension!) {\n      if (onGrowData) {\n        nextState = {\n          resizeDirection: 'grow',\n          dataToMeasure: onGrowData(renderedData),\n        };\n      } else {\n        nextState = {\n          resizeDirection: 'shrink',\n          dataToMeasure: fullDimensionData,\n        };\n      }\n    } else {\n      nextState = {\n        resizeDirection: 'shrink',\n        dataToMeasure: renderedData,\n      };\n    }\n    _containerDimension = newDimension;\n    return { ...nextState, measureContainer: false };\n  }\n\n  function getNextState(\n    props: IResizeGroupProps,\n    currentState: IResizeGroupState,\n    getElementToMeasureDimension: () => number,\n    newContainerDimension?: number,\n  ): IResizeGroupState | undefined {\n    // If there is no new container width/height or data to measure, there is no need for a new state update\n    if (newContainerDimension === undefined && currentState.dataToMeasure === undefined) {\n      return undefined;\n    }\n\n    if (newContainerDimension) {\n      // If we know the last container size and we rendered data at that width/height, we can do an optimized render\n      if (_containerDimension && currentState.renderedData && !currentState.dataToMeasure) {\n        return {\n          ...currentState,\n          ..._updateContainerDimension(newContainerDimension, props.data, currentState.renderedData, props.onGrowData),\n        };\n      }\n\n      // If we are just setting the container width/height for the first time, we can't do any optimizations\n      _containerDimension = newContainerDimension;\n    }\n\n    let nextState: IResizeGroupState = {\n      ...currentState,\n      measureContainer: false,\n    };\n\n    if (currentState.dataToMeasure) {\n      if (currentState.resizeDirection === 'grow' && props.onGrowData) {\n        nextState = {\n          ...nextState,\n          ..._growDataUntilItDoesNotFit(\n            currentState.dataToMeasure,\n            props.onGrowData,\n            getElementToMeasureDimension,\n            props.onReduceData,\n          ),\n        };\n      } else {\n        nextState = {\n          ...nextState,\n          ..._shrinkContentsUntilTheyFit(currentState.dataToMeasure, props.onReduceData, getElementToMeasureDimension),\n        };\n      }\n    }\n\n    return nextState;\n  }\n\n  /** Function that determines if we need to render content for measurement based on the measurement cache contents. */\n  function shouldRenderDataForMeasurement(dataToMeasure: any | undefined): boolean {\n    if (!dataToMeasure || _measurementCache.getCachedMeasurement(dataToMeasure) !== undefined) {\n      return false;\n    }\n\n    return true;\n  }\n\n  function getInitialResizeGroupState(data: any): IResizeGroupState {\n    return {\n      dataToMeasure: { ...data },\n      resizeDirection: 'grow',\n      measureContainer: true,\n    };\n  }\n\n  return {\n    getNextState,\n    shouldRenderDataForMeasurement,\n    getInitialResizeGroupState,\n  };\n};\n\n// Provides a context property that (if true) tells any child components that\n// they are only being used for measurement purposes and will not be visible.\nexport const MeasuredContext = React.createContext({ isMeasured: false });\n\n// Styles for the hidden div used for measurement\nconst hiddenDivStyles: React.CSSProperties = { position: 'fixed', visibility: 'hidden' };\nconst hiddenParentStyles: React.CSSProperties = { position: 'relative' };\nconst COMPONENT_NAME = 'ResizeGroup';\n\ntype ResizeDataAction = {\n  type: 'resizeData' | keyof IResizeGroupState;\n  value: IResizeGroupState[keyof IResizeGroupState] | IResizeGroupState;\n};\n\n/**\n * Use useReducer instead of userState because React is not batching the state updates\n * when state is set in callbacks of setTimeout or requestAnimationFrame.\n * See issue: https://github.com/facebook/react/issues/14259\n */\nfunction resizeDataReducer(state: IResizeGroupState, action: ResizeDataAction): IResizeGroupState {\n  switch (action.type) {\n    case 'resizeData':\n      return { ...action.value };\n    case 'dataToMeasure':\n      return { ...state, dataToMeasure: action.value, resizeDirection: 'grow', measureContainer: true };\n    default:\n      return { ...state, [action.type]: action.value };\n  }\n}\n\nfunction useResizeState(\n  props: IResizeGroupProps,\n  nextResizeGroupStateProvider: ReturnType<typeof getNextResizeGroupStateProvider>,\n  rootRef: React.RefObject<HTMLDivElement | null>,\n) {\n  const initialStateData = useConst(() => nextResizeGroupStateProvider.getInitialResizeGroupState(props.data));\n  const [resizeData, dispatchResizeDataAction] = React.useReducer(resizeDataReducer, initialStateData);\n\n  // Reset state when new data is provided\n  React.useEffect(() => {\n    dispatchResizeDataAction({\n      type: 'dataToMeasure',\n      value: props.data,\n    });\n  }, [props.data]);\n\n  // Because it's possible that we may force more than one re-render per animation frame, we\n  // want to make sure that the RAF request is using the most recent data.\n  const stateRef = React.useRef<IResizeGroupState>(initialStateData);\n  stateRef.current = { ...resizeData };\n\n  const updateResizeState = React.useCallback((nextState?: IResizeGroupState) => {\n    if (nextState) {\n      dispatchResizeDataAction({\n        type: 'resizeData',\n        value: nextState,\n      });\n    }\n  }, []);\n\n  const remeasure: () => void = React.useCallback(() => {\n    if (rootRef.current) {\n      dispatchResizeDataAction({\n        type: 'measureContainer',\n        value: true,\n      });\n    }\n  }, [rootRef]);\n\n  return [stateRef, updateResizeState, remeasure] as const;\n}\n\nfunction useResizingBehavior(props: IResizeGroupProps, rootRef: React.RefObject<HTMLDivElement | null>) {\n  const nextResizeGroupStateProvider = useConst(getNextResizeGroupStateProvider);\n\n  // A div that can be used for the initial measurement so that we can avoid mounting a second instance\n  // of the component being measured for the initial render.\n  const initialHiddenDiv = React.useRef<HTMLDivElement | null>(null);\n  // A hidden div that is used for mounting a new instance of the component for measurement in a hidden\n  // div without unmounting the currently visible content.\n  const updateHiddenDiv = React.useRef<HTMLDivElement | null>(null);\n\n  // Tracks if any content has been rendered to the user. This enables us to do some performance optimizations\n  // for the initial render.\n  const hasRenderedContent = React.useRef(false);\n\n  const async: Async = useAsync();\n\n  const [stateRef, updateResizeState, remeasure] = useResizeState(props, nextResizeGroupStateProvider, rootRef);\n\n  React.useEffect(() => {\n    if (stateRef.current.renderedData) {\n      hasRenderedContent.current = true;\n      props.dataDidRender?.(stateRef.current.renderedData);\n    }\n  });\n\n  React.useEffect((): void => {\n    async.requestAnimationFrame(() => {\n      let containerDimension = undefined;\n      if (stateRef.current.measureContainer && rootRef.current) {\n        const boundingRect = rootRef.current.getBoundingClientRect();\n        containerDimension =\n          props.direction === ResizeGroupDirection.vertical ? boundingRect.height : boundingRect.width;\n      }\n      const nextState = nextResizeGroupStateProvider.getNextState(\n        props,\n        stateRef.current,\n        () => {\n          const refToMeasure = !hasRenderedContent.current ? initialHiddenDiv : updateHiddenDiv;\n          if (!refToMeasure.current) {\n            return 0;\n          }\n          const measuredBoundingRect = refToMeasure.current.getBoundingClientRect();\n          return props.direction === ResizeGroupDirection.vertical\n            ? measuredBoundingRect.height\n            : measuredBoundingRect.width;\n        },\n        containerDimension,\n      );\n\n      updateResizeState(nextState);\n    }, rootRef.current);\n  });\n\n  const win = useWindow();\n  useOnEvent(win, 'resize', async.debounce(remeasure, RESIZE_DELAY, { leading: true }));\n\n  const dataNeedsMeasuring = nextResizeGroupStateProvider.shouldRenderDataForMeasurement(\n    stateRef.current.dataToMeasure,\n  );\n\n  const isInitialMeasure = !hasRenderedContent.current && dataNeedsMeasuring;\n\n  return [\n    stateRef.current.dataToMeasure,\n    stateRef.current.renderedData,\n    remeasure,\n    initialHiddenDiv,\n    updateHiddenDiv,\n    dataNeedsMeasuring,\n    isInitialMeasure,\n  ] as const;\n}\n\nfunction useDebugWarnings(props: IResizeGroupProps) {\n  if (process.env.NODE_ENV !== 'production') {\n    // eslint-disable-next-line react-hooks/rules-of-hooks -- build-time conditional\n    useWarnings({\n      name: COMPONENT_NAME,\n      props,\n      deprecations: { styles: 'className' },\n    });\n  }\n}\n\nconst measuredContextValue = { isMeasured: true };\n\nexport const ResizeGroupBase: React.FunctionComponent<IResizeGroupProps> = React.forwardRef<\n  HTMLDivElement,\n  IResizeGroupProps\n>((props, forwardedRef) => {\n  const rootRef = React.useRef<HTMLDivElement | null>(null);\n  // The root div which is the container inside of which we are trying to fit content.\n  const mergedRootRef = useMergedRefs(rootRef, forwardedRef);\n\n  const [\n    dataToMeasure,\n    renderedData,\n    remeasure,\n    initialHiddenDiv,\n    updateHiddenDiv,\n    dataNeedsMeasuring,\n    isInitialMeasure,\n  ] = useResizingBehavior(props, rootRef);\n\n  React.useImperativeHandle(props.componentRef, () => ({ remeasure }), [remeasure]);\n\n  useDebugWarnings(props);\n\n  const { className, onRenderData } = props;\n  const divProps = getNativeProps<React.HTMLAttributes<HTMLDivElement>>(props, divProperties, ['data']);\n\n  // We only ever render the final content to the user. All measurements are done in a hidden div.\n  // For the initial render, we want this to be as fast as possible, so we need to make sure that we only mount one\n  // version of the component for measurement and the final render. For renders that update what is on screen, we\n  // want to make sure that there are no jarring effects such as the screen flashing as we apply scaling steps for\n  // measurement. In the update case, we mount a second version of the component just for measurement purposes and\n  // leave the rendered content untouched until we know the next state to show to the user.\n  return (\n    <div {...divProps} className={className} ref={mergedRootRef}>\n      <div style={hiddenParentStyles}>\n        {dataNeedsMeasuring && !isInitialMeasure && (\n          <div style={hiddenDivStyles} ref={updateHiddenDiv}>\n            <MeasuredContext.Provider value={measuredContextValue}>\n              {onRenderData(dataToMeasure)}\n            </MeasuredContext.Provider>\n          </div>\n        )}\n\n        <div\n          ref={initialHiddenDiv}\n          style={isInitialMeasure ? hiddenDivStyles : undefined}\n          data-automation-id=\"visibleContent\"\n        >\n          {isInitialMeasure ? onRenderData(dataToMeasure) : renderedData && onRenderData(renderedData)}\n        </div>\n      </div>\n    </div>\n  );\n});\nResizeGroupBase.displayName = 'ResizeGroupBase';\n", "import * as React from 'react';\nimport type { IStyle, ITheme } from '../../Styling';\nimport type { IRefObject, IStyleFunctionOrObject } from '../../Utilities';\n\n/**\n * {@docCategory ResizeGroup}\n */\nexport enum ResizeGroupDirection {\n  horizontal = 0,\n  vertical = 1,\n}\n\n/**\n * {@docCategory ResizeGroup}\n */\nexport interface IResizeGroup {\n  /**\n   * Remeasures the available space.\n   */\n  remeasure(): void;\n}\n\n/**\n * {@docCategory ResizeGroup}\n */\nexport interface IResizeGroupProps extends React.HTMLAttributes<HTMLDivElement>, React.RefAttributes<HTMLDivElement> {\n  /**\n   * Optional callback to access the IResizeGroup interface. Use this instead of ref for accessing\n   * the public methods and properties of the component.\n   */\n  componentRef?: IRefObject<IResizeGroup>;\n\n  /**\n   * Call to provide customized styling that will layer on top of the variant rules\n   * @deprecated Removed to reduce bundle size.  Please use `className` and add css rules to `className` instead.\n   */\n  styles?: IStyleFunctionOrObject<IResizeGroupStyleProps, IResizeGroupStyles>;\n\n  /**\n   * Theme provided by HOC.\n   */\n  theme?: ITheme;\n\n  /**\n   * Additional css class to apply to the Component\n   * @defaultvalue undefined\n   */\n  className?: string;\n\n  /**\n   * Direction of this resize group, vertical or horizontal\n   * @defaultvalue ResizeGroupDirection.horizontal\n   */\n  direction?: ResizeGroupDirection;\n\n  /**\n   * Initial data to be passed to the `onRenderData` function. When there is no `onGrowData` provided, this data should\n   * represent what should be passed to the render function when the parent container of the ResizeGroup is at its\n   * maximum supported width. A `cacheKey` property may optionally be included as part of the data. Two data objects\n   * with the same `cacheKey` will be assumed to take up the same width and will prevent measurements.\n   * The type of `cacheKey` is a string.\n   */\n  data: any;\n\n  /**\n   * Function to render the data. Called when rendering the contents to the screen and when\n   * rendering in a hidden div to measure the size of the contents.\n   */\n  onRenderData: (data: any) => JSX.Element;\n\n  /**\n   * Function to be performed on the data in order to reduce its width and make it fit into the given space.\n   * If there are no more scaling steps to apply, it should return undefined to prevent\n   * an infinite render loop.\n   */\n  onReduceData: (prevData: any) => any;\n\n  /**\n   * Function to be performed on the data in order to increase its width. It is called in scenarios where the\n   * container has more room than the previous render and we may be able to fit more content. If there are no more\n   * scaling operations to perform on teh data, it should return undefined to prevent an infinite render loop.\n   */\n  onGrowData?: (prevData: any) => any;\n\n  /**\n   * Function to be called every time data is rendered. It provides the data that was actually rendered.\n   * A use case would be adding telemetry when a particular control is shown in an overflow well or\n   * dropped as a result of onReduceData or to count the number of renders that an implementation of\n   * onReduceData triggers.\n   */\n  dataDidRender?: (renderedData: any) => void;\n}\n\n/**\n * {@docCategory ResizeGroup}\n */\nexport interface IResizeGroupStyleProps {\n  /**\n   * Accept theme prop.\n   */\n  theme: ITheme;\n\n  /**\n   * Accept custom classNames\n   */\n  className?: string;\n}\n\n/**\n * {@docCategory ResizeGroup}\n */\nexport interface IResizeGroupStyles {\n  /**\n   * Style for the root element.\n   */\n  root: IStyle;\n}\n", "import * as React from 'react';\nimport { ResizeGroupBase } from './ResizeGroup.base';\nimport type { IResizeGroupProps } from './ResizeGroup.types';\n\nexport const ResizeGroup: React.FunctionComponent<IResizeGroupProps> = ResizeGroupBase;\n", "import * as React from 'react';\nimport {\n  anchorProperties,\n  assign,\n  buttonProperties,\n  createMergedRef,\n  css,\n  getId,\n  getNativeProps,\n  initializeComponentRef,\n  memoizeFunction,\n  mergeAriaAttributeValues,\n  nullRender,\n  portalContainsElement,\n  setFocusVisibility,\n  warnConditionallyRequiredProps,\n  warnDeprecations,\n  Async,\n  EventGroup,\n  FocusRects,\n  FocusRectsContext,\n  KeyCodes,\n} from '../../Utilities';\nimport { Icon, FontIcon, ImageIcon } from '../../Icon';\nimport { DirectionalHint } from '../../common/DirectionalHint';\nimport { ContextualMenu } from '../../ContextualMenu';\nimport { getBaseButtonClassNames } from './BaseButton.classNames';\nimport { getSplitButtonClassNames as getBaseSplitButtonClassNames } from './SplitButton/SplitButton.classNames';\nimport { KeytipData } from '../../KeytipData';\nimport type { IFocusRectsContext, IRenderFunction } from '../../Utilities';\nimport type { IContextualMenuProps } from '../../ContextualMenu';\nimport type { IButtonProps, IButton } from './Button.types';\nimport type { IButtonClassNames } from './BaseButton.classNames';\nimport type { ISplitButtonClassNames } from './SplitButton/SplitButton.classNames';\nimport type { IKeytipProps } from '../../Keytip';\nimport { composeComponentAs } from '../../Utilities';\n\n/**\n * {@docCategory Button}\n */\nexport interface IBaseButtonProps extends IButtonProps {\n  baseClassName?: string;\n  variantClassName?: string;\n}\n\n/**\n * {@docCategory Button}\n */\nexport interface IBaseButtonState {\n  menuHidden: boolean;\n}\n\nconst TouchIdleDelay = 500; /* ms */\nconst COMPONENT_NAME = 'BaseButton';\n\n/**\n * {@docCategory Button}\n */\nexport class BaseButton extends React.Component<IBaseButtonProps, IBaseButtonState> implements IButton {\n  private get _isSplitButton(): boolean {\n    return !!this.props.menuProps && !!this.props.onClick && this.props.split === true;\n  }\n\n  public static defaultProps: Partial<IBaseButtonProps> = {\n    baseClassName: 'ms-Button',\n    styles: {},\n    split: false,\n  };\n\n  // needed to access registeredProviders when manually setting focus visibility\n  public static contextType = FocusRectsContext;\n  public context: IFocusRectsContext;\n\n  private _async: Async;\n  private _events: EventGroup;\n  private _buttonElement = React.createRef<HTMLElement>();\n  private _splitButtonContainer = React.createRef<HTMLDivElement>();\n  private _mergedRef = createMergedRef<HTMLElement>();\n  private _labelId: string;\n  private _descriptionId: string;\n  private _ariaDescriptionId: string;\n  private _classNames: IButtonClassNames;\n  private _processingTouch: boolean;\n  private _lastTouchTimeoutId: number | undefined;\n  private _renderedVisibleMenu: boolean = false;\n\n  // These fields will be used to set corresponding props on the menu.\n  private _menuShouldFocusOnContainer: boolean | undefined;\n  private _menuShouldFocusOnMount: boolean | undefined;\n\n  private _getMemoizedMenuButtonKeytipProps = memoizeFunction((keytipProps: IKeytipProps) => {\n    return {\n      ...keytipProps,\n      hasMenu: true,\n    };\n  });\n\n  constructor(props: IBaseButtonProps) {\n    super(props);\n\n    initializeComponentRef(this);\n    this._async = new Async(this);\n    this._events = new EventGroup(this);\n\n    warnConditionallyRequiredProps(COMPONENT_NAME, props, ['menuProps', 'onClick'], 'split', this.props.split!);\n\n    warnDeprecations(COMPONENT_NAME, props, {\n      rootProps: undefined,\n      description: 'secondaryText',\n      toggled: 'checked',\n    });\n    this._labelId = getId();\n    this._descriptionId = getId();\n    this._ariaDescriptionId = getId();\n\n    this.state = {\n      menuHidden: true,\n    };\n  }\n\n  public render(): JSX.Element {\n    const {\n      ariaDescription,\n      ariaLabel,\n      ariaHidden,\n      className,\n      disabled,\n      allowDisabledFocus,\n      primaryDisabled,\n      // eslint-disable-next-line deprecation/deprecation\n      secondaryText = this.props.description,\n      href,\n      iconProps,\n      menuIconProps,\n      styles,\n      checked,\n      variantClassName,\n      theme,\n      toggle,\n      getClassNames,\n      role,\n    } = this.props;\n\n    const { menuHidden } = this.state;\n\n    // Button is disabled if the whole button (in case of splitButton is disabled) or if the primary action is disabled\n    const isPrimaryButtonDisabled = disabled || primaryDisabled;\n\n    this._classNames = getClassNames\n      ? getClassNames(\n          theme!,\n          className!,\n          variantClassName!,\n          iconProps && iconProps.className,\n          menuIconProps && menuIconProps.className,\n          isPrimaryButtonDisabled!,\n          checked!,\n          !menuHidden,\n          !!this.props.menuProps,\n          this.props.split,\n          !!allowDisabledFocus,\n        )\n      : getBaseButtonClassNames(\n          theme!,\n          styles!,\n          className!,\n          variantClassName!,\n          iconProps && iconProps.className,\n          menuIconProps && menuIconProps.className,\n          isPrimaryButtonDisabled!,\n          !!this.props.menuProps,\n          checked!,\n          !menuHidden,\n          this.props.split,\n        );\n\n    const { _ariaDescriptionId, _labelId, _descriptionId } = this;\n    // Anchor tag cannot be disabled hence in disabled state rendering\n    // anchor button as normal button\n    const renderAsAnchor: boolean = !isPrimaryButtonDisabled && !!href;\n    const tag = renderAsAnchor ? 'a' : 'button';\n\n    const nativeProps = getNativeProps(\n      // eslint-disable-next-line deprecation/deprecation\n      assign(renderAsAnchor ? {} : { type: 'button' }, this.props.rootProps, this.props),\n      renderAsAnchor ? anchorProperties : buttonProperties,\n      [\n        'disabled', // let disabled buttons be focused and styled as disabled.\n      ],\n    );\n\n    // Check for ariaLabel passed in via Button props, and fall back to aria-label passed in via native props\n    const resolvedAriaLabel = ariaLabel || (nativeProps as any)['aria-label'];\n\n    // Check for ariaDescription, secondaryText or aria-describedby in the native props to determine source of\n    // aria-describedby. Otherwise default to undefined so property does not appear in output.\n    let ariaDescribedBy = undefined;\n    if (ariaDescription) {\n      ariaDescribedBy = _ariaDescriptionId;\n    } else if (secondaryText && this.props.onRenderDescription !== nullRender) {\n      // for buttons like CompoundButton with a valid onRenderDescription, we need to set an ariaDescribedBy\n      // for buttons that do not render anything (via nullRender), we should not set an ariaDescribedBy\n      ariaDescribedBy = _descriptionId;\n    } else if ((nativeProps as any)['aria-describedby']) {\n      ariaDescribedBy = (nativeProps as any)['aria-describedby'];\n    }\n\n    // If an explicit aria-labelledby is given, use that and we're done.\n    // If any kind of description is given (which will end up as an aria-describedby attribute)\n    // and no ariaLabel is specified, set the labelledby element.\n    // Otherwise, the button is labeled implicitly by the descendent text on the button (if it exists).\n    let ariaLabelledBy = undefined;\n    if ((nativeProps as any)['aria-labelledby']) {\n      ariaLabelledBy = (nativeProps as any)['aria-labelledby'];\n    } else if (ariaDescribedBy && !resolvedAriaLabel) {\n      ariaLabelledBy = this._hasText() ? _labelId : undefined;\n    }\n\n    const dataIsFocusable =\n      (this.props as any)['data-is-focusable'] === false || (disabled && !allowDisabledFocus) || this._isSplitButton\n        ? false\n        : true;\n\n    const isCheckboxTypeRole = role === 'menuitemcheckbox' || role === 'checkbox';\n    // if isCheckboxTypeRole, always return a checked value.\n    // Otherwise only return checked value if toggle is set to true.\n    // This is because role=\"checkbox\" always needs to have an aria-checked value\n    // but our checked prop only sets aria-pressed if we mark the button as a toggle=\"true\"\n    const checkedOrPressedValue = isCheckboxTypeRole ? !!checked : toggle === true ? !!checked : undefined;\n\n    const buttonProps = assign(nativeProps, {\n      className: this._classNames.root,\n      // eslint-disable-next-line deprecation/deprecation\n      ref: this._mergedRef(this.props.elementRef, this._buttonElement),\n      disabled: isPrimaryButtonDisabled && !allowDisabledFocus,\n      onKeyDown: this._onKeyDown,\n      onKeyPress: this._onKeyPress,\n      onKeyUp: this._onKeyUp,\n      onMouseDown: this._onMouseDown,\n      onMouseUp: this._onMouseUp,\n      onClick: this._onClick,\n      'aria-label': resolvedAriaLabel,\n      'aria-labelledby': ariaLabelledBy,\n      'aria-describedby': ariaDescribedBy,\n      'aria-disabled': isPrimaryButtonDisabled,\n      'data-is-focusable': dataIsFocusable,\n      // aria-pressed attribute should only be present for toggle buttons\n      // aria-checked attribute should only be present for toggle buttons with checkbox type role\n      [isCheckboxTypeRole ? 'aria-checked' : 'aria-pressed']: checkedOrPressedValue,\n    });\n\n    if (ariaHidden) {\n      buttonProps['aria-hidden'] = true;\n    }\n\n    if (this._isSplitButton) {\n      return this._onRenderSplitButtonContent(tag, buttonProps);\n    } else if (this.props.menuProps) {\n      const { id = `${this._labelId}-menu` } = this.props.menuProps;\n      assign(buttonProps, {\n        'aria-expanded': !menuHidden,\n        'aria-controls': !menuHidden ? id : null,\n        'aria-haspopup': true,\n      });\n    }\n\n    return this._onRenderContent(tag, buttonProps);\n  }\n\n  public componentDidMount() {\n    // For split buttons, touching anywhere in the button should drop the dropdown, which should contain the\n    // primary action. This gives more hit target space for touch environments. We're setting the onpointerdown here,\n    // because React does not support Pointer events yet.\n    if (this._isSplitButton && this._splitButtonContainer.current) {\n      if ('onpointerdown' in this._splitButtonContainer.current) {\n        this._events.on(this._splitButtonContainer.current, 'pointerdown', this._onPointerDown, true);\n      }\n      if ('onpointerup' in this._splitButtonContainer.current && this.props.onPointerUp) {\n        this._events.on(this._splitButtonContainer.current, 'pointerup', this.props.onPointerUp, true);\n      }\n    }\n  }\n\n  public componentDidUpdate(prevProps: IBaseButtonProps, prevState: IBaseButtonState) {\n    // If Button's menu was closed, run onAfterMenuDismiss.\n    if (this.props.onAfterMenuDismiss && !prevState.menuHidden && this.state.menuHidden) {\n      this.props.onAfterMenuDismiss();\n    }\n  }\n\n  public componentWillUnmount(): void {\n    this._async.dispose();\n    this._events.dispose();\n  }\n\n  public focus(): void {\n    if (this._isSplitButton && this._splitButtonContainer.current) {\n      setFocusVisibility(true, undefined, this.context?.registeredProviders);\n      this._splitButtonContainer.current.focus();\n    } else if (this._buttonElement.current) {\n      setFocusVisibility(true, undefined, this.context?.registeredProviders);\n      this._buttonElement.current.focus();\n    }\n  }\n\n  public dismissMenu(): void {\n    this._dismissMenu();\n  }\n\n  public openMenu(shouldFocusOnContainer?: boolean, shouldFocusOnMount?: boolean): void {\n    this._openMenu(shouldFocusOnContainer, shouldFocusOnMount);\n  }\n\n  private _onRenderContent(tag: any, buttonProps: IButtonProps): JSX.Element {\n    const props = this.props;\n    const Tag = tag;\n    const {\n      menuIconProps,\n      menuProps,\n      onRenderIcon = this._onRenderIcon,\n      onRenderAriaDescription = this._onRenderAriaDescription,\n      onRenderChildren = this._onRenderChildren,\n      // eslint-disable-next-line deprecation/deprecation\n      onRenderMenu = this._onRenderMenu,\n      onRenderMenuIcon = this._onRenderMenuIcon,\n      disabled,\n    } = props;\n    let { keytipProps } = props;\n    if (keytipProps && menuProps) {\n      keytipProps = this._getMemoizedMenuButtonKeytipProps(keytipProps);\n    }\n\n    const Button = (keytipAttributes?: any): JSX.Element => (\n      <Tag {...buttonProps} {...keytipAttributes}>\n        <span className={this._classNames.flexContainer} data-automationid=\"splitbuttonprimary\">\n          {onRenderIcon(props, this._onRenderIcon)}\n          {this._onRenderTextContents()}\n          {onRenderAriaDescription(props, this._onRenderAriaDescription)}\n          {onRenderChildren(props, this._onRenderChildren)}\n          {!this._isSplitButton &&\n            (menuProps || menuIconProps || this.props.onRenderMenuIcon) &&\n            onRenderMenuIcon(this.props, this._onRenderMenuIcon)}\n          {menuProps &&\n            !menuProps.doNotLayer &&\n            this._shouldRenderMenu() &&\n            onRenderMenu(this._getMenuProps(menuProps), this._onRenderMenu)}\n        </span>\n      </Tag>\n    );\n\n    const Content = keytipProps ? (\n      // If we're making a split button, we won't put the keytip here\n      <KeytipData\n        keytipProps={!this._isSplitButton ? keytipProps : undefined}\n        ariaDescribedBy={(buttonProps as any)['aria-describedby']}\n        disabled={disabled}\n      >\n        {(keytipAttributes: any): JSX.Element => Button(keytipAttributes)}\n      </KeytipData>\n    ) : (\n      Button()\n    );\n\n    if (menuProps && menuProps.doNotLayer) {\n      return (\n        <>\n          {Content}\n          {this._shouldRenderMenu() && onRenderMenu(this._getMenuProps(menuProps), this._onRenderMenu)}\n        </>\n      );\n    }\n\n    return (\n      <>\n        {Content}\n        <FocusRects />\n      </>\n    );\n  }\n\n  /**\n   * Method to help determine if the menu's component tree should\n   * be rendered. It takes into account whether the menu is expanded,\n   * whether it is a persisted menu and whether it has been shown to the user.\n   */\n  private _shouldRenderMenu() {\n    const { menuHidden } = this.state;\n    // eslint-disable-next-line deprecation/deprecation\n    const { persistMenu, renderPersistedMenuHiddenOnMount } = this.props;\n\n    if (!menuHidden) {\n      // Always should render a menu when it is expanded\n      return true;\n    } else if (persistMenu && (this._renderedVisibleMenu || renderPersistedMenuHiddenOnMount)) {\n      // _renderedVisibleMenu ensures that the first rendering of\n      // the menu happens on-screen, as edge's scrollbar calculations are off if done while hidden.\n      return true;\n    }\n\n    return false;\n  }\n\n  private _onRenderIcon = (\n    buttonProps?: IButtonProps,\n    defaultRender?: IRenderFunction<IButtonProps>,\n  ): JSX.Element | null => {\n    const { iconProps } = this.props;\n\n    if (iconProps && (iconProps.iconName !== undefined || iconProps.imageProps)) {\n      const { className, imageProps, ...rest } = iconProps;\n\n      // If the styles prop is specified as part of iconProps, fall back to regular Icon as FontIcon and ImageIcon\n      // do not have this prop.\n      if (iconProps.styles) {\n        return <Icon className={css(this._classNames.icon, className)} imageProps={imageProps} {...rest} />;\n      }\n      if (iconProps.iconName) {\n        return <FontIcon className={css(this._classNames.icon, className)} {...rest} />;\n      }\n      if (imageProps) {\n        return <ImageIcon className={css(this._classNames.icon, className)} imageProps={imageProps} {...rest} />;\n      }\n    }\n    return null;\n  };\n\n  private _onRenderTextContents = (): JSX.Element | (JSX.Element | null)[] => {\n    const {\n      text,\n      children,\n      // eslint-disable-next-line deprecation/deprecation\n      secondaryText = this.props.description,\n      onRenderText = this._onRenderText,\n      onRenderDescription = this._onRenderDescription,\n    } = this.props;\n\n    if (text || typeof children === 'string' || secondaryText) {\n      return (\n        <span className={this._classNames.textContainer}>\n          {onRenderText(this.props, this._onRenderText)}\n          {onRenderDescription(this.props, this._onRenderDescription)}\n        </span>\n      );\n    }\n    return [onRenderText(this.props, this._onRenderText), onRenderDescription(this.props, this._onRenderDescription)];\n  };\n\n  private _onRenderText = (): JSX.Element | null => {\n    let { text } = this.props;\n    const { children } = this.props;\n\n    // For backwards compat, we should continue to take in the text content from children.\n    if (text === undefined && typeof children === 'string') {\n      text = children;\n    }\n\n    if (this._hasText()) {\n      return (\n        <span key={this._labelId} className={this._classNames.label} id={this._labelId}>\n          {text}\n        </span>\n      );\n    }\n\n    return null;\n  };\n\n  private _hasText(): boolean {\n    // _onRenderTextContents and _onRenderText do not perform the same checks. Below is parity with what _onRenderText\n    // used to have before the refactor that introduced this function. _onRenderTextContents does not require props.\n    // text to be undefined in order for props.children to be used as a fallback.\n    // Purely a code maintainability/reuse issue, but logged as Issue #4979.\n    return this.props.text !== null && (this.props.text !== undefined || typeof this.props.children === 'string');\n  }\n\n  private _onRenderChildren = (): JSX.Element | null => {\n    const { children } = this.props;\n\n    // If children is just a string, either it or the text will be rendered via onRenderLabel\n    // If children is another component, it will be rendered after text\n    if (typeof children === 'string') {\n      return null;\n    }\n\n    return children as any;\n  };\n\n  private _onRenderDescription = (props: IButtonProps) => {\n    // eslint-disable-next-line deprecation/deprecation\n    const { secondaryText = this.props.description } = props;\n\n    // ms-Button-description is only shown when the button type is compound.\n    // In other cases it will not be displayed.\n    return secondaryText ? (\n      <span key={this._descriptionId} className={this._classNames.description} id={this._descriptionId}>\n        {secondaryText}\n      </span>\n    ) : null;\n  };\n\n  private _onRenderAriaDescription = () => {\n    const { ariaDescription } = this.props;\n\n    // If ariaDescription is given, descriptionId will be assigned to ariaDescriptionSpan,\n    // otherwise it will be assigned to descriptionSpan.\n    return ariaDescription ? (\n      <span className={this._classNames.screenReaderText} id={this._ariaDescriptionId}>\n        {ariaDescription}\n      </span>\n    ) : null;\n  };\n\n  private _onRenderMenuIcon = (props: IButtonProps): JSX.Element | null => {\n    const { menuIconProps } = this.props;\n\n    return <FontIcon iconName=\"ChevronDown\" {...menuIconProps} className={this._classNames.menuIcon} />;\n  };\n\n  private _getMenuProps(menuProps: IContextualMenuProps): IContextualMenuProps {\n    const { persistMenu } = this.props;\n    const { menuHidden } = this.state;\n\n    // the accessible menu label (accessible name) has a relationship to the button.\n    // If the menu props do not specify an explicit value for aria-label or aria-labelledBy,\n    // AND the button has text, we'll set the menu aria-labelledBy to the text element id.\n    if (!menuProps.ariaLabel && !menuProps.labelElementId && this._hasText()) {\n      menuProps = { ...menuProps, labelElementId: this._labelId };\n    }\n\n    return {\n      id: this._labelId + '-menu',\n      directionalHint: DirectionalHint.bottomLeftEdge,\n      ...menuProps,\n      shouldFocusOnContainer: this._menuShouldFocusOnContainer,\n      shouldFocusOnMount: this._menuShouldFocusOnMount,\n      hidden: persistMenu ? menuHidden : undefined,\n      className: css('ms-BaseButton-menuhost', menuProps.className),\n      target: this._isSplitButton ? this._splitButtonContainer.current : this._buttonElement.current,\n      onDismiss: this._onDismissMenu,\n    };\n  }\n\n  private _onRenderMenu = (menuProps: IContextualMenuProps): JSX.Element => {\n    const MenuType = this.props.menuAs ? composeComponentAs(this.props.menuAs, ContextualMenu) : ContextualMenu;\n\n    return <MenuType {...menuProps} />;\n  };\n\n  private _onDismissMenu: IContextualMenuProps['onDismiss'] = ev => {\n    const { menuProps } = this.props;\n\n    if (menuProps && menuProps.onDismiss) {\n      menuProps.onDismiss(ev);\n    }\n    if (!ev || !ev.defaultPrevented) {\n      this._dismissMenu();\n    }\n  };\n\n  private _dismissMenu = (): void => {\n    this._menuShouldFocusOnMount = undefined;\n    this._menuShouldFocusOnContainer = undefined;\n    this.setState({ menuHidden: true });\n  };\n\n  private _openMenu = (shouldFocusOnContainer?: boolean, shouldFocusOnMount: boolean = true): void => {\n    if (this.props.menuProps) {\n      this._menuShouldFocusOnContainer = shouldFocusOnContainer;\n      this._menuShouldFocusOnMount = shouldFocusOnMount;\n      this._renderedVisibleMenu = true;\n      this.setState({ menuHidden: false });\n    }\n  };\n\n  private _onToggleMenu = (shouldFocusOnContainer: boolean): void => {\n    let shouldFocusOnMount = true;\n    if (this.props.menuProps && this.props.menuProps.shouldFocusOnMount === false) {\n      shouldFocusOnMount = false;\n    }\n\n    this.state.menuHidden ? this._openMenu(shouldFocusOnContainer, shouldFocusOnMount) : this._dismissMenu();\n  };\n\n  private _onRenderSplitButtonContent(tag: any, buttonProps: IButtonProps): JSX.Element {\n    const {\n      styles = {},\n      disabled,\n      allowDisabledFocus,\n      checked,\n      getSplitButtonClassNames,\n      primaryDisabled,\n      menuProps,\n      toggle,\n      role,\n      primaryActionButtonProps,\n    } = this.props;\n    let { keytipProps } = this.props;\n    const { menuHidden } = this.state;\n\n    const classNames = getSplitButtonClassNames\n      ? getSplitButtonClassNames(!!disabled, !menuHidden, !!checked, !!allowDisabledFocus)\n      : styles && getBaseSplitButtonClassNames(styles!, !!disabled, !menuHidden, !!checked, !!primaryDisabled);\n\n    assign(buttonProps, {\n      onClick: undefined,\n      onPointerDown: undefined,\n      onPointerUp: undefined,\n      tabIndex: -1,\n      'data-is-focusable': false,\n    });\n\n    if (keytipProps && menuProps) {\n      keytipProps = this._getMemoizedMenuButtonKeytipProps(keytipProps);\n    }\n\n    const containerProps = getNativeProps<React.HTMLAttributes<HTMLSpanElement>>(buttonProps, [], ['disabled']);\n\n    // Add additional props to apply on primary action button\n    if (primaryActionButtonProps) {\n      assign(buttonProps, primaryActionButtonProps);\n    }\n\n    const SplitButton = (keytipAttributes?: any): JSX.Element => (\n      <div\n        {...containerProps}\n        data-ktp-target={keytipAttributes ? keytipAttributes['data-ktp-target'] : undefined}\n        role={role ? role : 'button'}\n        aria-disabled={disabled}\n        aria-haspopup={true}\n        aria-expanded={!menuHidden}\n        aria-pressed={toggle ? !!checked : undefined} // should only be present for toggle buttons\n        aria-describedby={mergeAriaAttributeValues(\n          buttonProps['aria-describedby'],\n          keytipAttributes ? keytipAttributes['aria-describedby'] : undefined,\n        )}\n        className={classNames && classNames.splitButtonContainer}\n        onKeyDown={this._onSplitButtonContainerKeyDown}\n        onTouchStart={this._onTouchStart}\n        ref={this._splitButtonContainer}\n        data-is-focusable={true}\n        onClick={!disabled && !primaryDisabled ? this._onSplitButtonPrimaryClick : undefined}\n        tabIndex={(!disabled && !primaryDisabled) || allowDisabledFocus ? 0 : undefined}\n        aria-roledescription={buttonProps['aria-roledescription']}\n        onFocusCapture={this._onSplitContainerFocusCapture}\n      >\n        <span style={{ display: 'flex', width: '100%' }}>\n          {this._onRenderContent(tag, buttonProps)}\n          {this._onRenderSplitButtonMenuButton(classNames, keytipAttributes)}\n          {this._onRenderSplitButtonDivider(classNames)}\n        </span>\n      </div>\n    );\n\n    return keytipProps ? (\n      <KeytipData keytipProps={keytipProps} disabled={disabled}>\n        {(keytipAttributes: any): JSX.Element => SplitButton(keytipAttributes)}\n      </KeytipData>\n    ) : (\n      SplitButton()\n    );\n  }\n\n  private _onSplitContainerFocusCapture = (ev: React.FocusEvent<HTMLDivElement>) => {\n    const container = this._splitButtonContainer.current;\n\n    // If the target is coming from the portal we do not need to set focus on the container.\n    if (!container || (ev.target && portalContainsElement(ev.target, container))) {\n      return;\n    }\n\n    // We should never be able to focus the individual buttons in a split button. Focus\n    // should always remain on the container.\n    container.focus();\n  };\n\n  private _onSplitButtonPrimaryClick = (ev: React.MouseEvent<HTMLDivElement>) => {\n    if (!this.state.menuHidden) {\n      this._dismissMenu();\n    }\n\n    // toggle split buttons need two separate targets, even for touch\n    const singleTouchTarget = this._processingTouch && !this.props.toggle;\n\n    if (!singleTouchTarget && this.props.onClick) {\n      this.props.onClick(ev);\n    } else if (singleTouchTarget) {\n      this._onMenuClick(ev);\n    }\n  };\n\n  private _onRenderSplitButtonDivider(classNames: ISplitButtonClassNames | undefined): JSX.Element | null {\n    if (classNames && classNames.divider) {\n      const onClick = (ev: React.MouseEvent<HTMLSpanElement, MouseEvent>) => {\n        ev.stopPropagation();\n      };\n      return <span className={classNames.divider} aria-hidden={true} onClick={onClick} />;\n    }\n    return null;\n  }\n\n  private _onRenderSplitButtonMenuButton(\n    classNames: ISplitButtonClassNames | undefined,\n    keytipAttributes: any,\n  ): JSX.Element {\n    const { allowDisabledFocus, checked, disabled, splitButtonMenuProps, splitButtonAriaLabel, primaryDisabled } =\n      this.props;\n    const { menuHidden } = this.state;\n    let menuIconProps = this.props.menuIconProps;\n\n    if (menuIconProps === undefined) {\n      menuIconProps = {\n        iconName: 'ChevronDown',\n      };\n    }\n\n    const splitButtonProps = {\n      ...splitButtonMenuProps,\n      styles: classNames,\n      checked,\n      disabled,\n      allowDisabledFocus,\n      onClick: this._onMenuClick,\n      menuProps: undefined,\n      iconProps: { ...menuIconProps, className: this._classNames.menuIcon },\n      ariaLabel: splitButtonAriaLabel,\n      'aria-haspopup': true,\n      'aria-expanded': !menuHidden,\n      'data-is-focusable': false,\n    };\n\n    // Add data-ktp-execute-target to the split button if the keytip is defined\n    return (\n      <BaseButton\n        {...splitButtonProps}\n        data-ktp-execute-target={keytipAttributes ? keytipAttributes['data-ktp-execute-target'] : keytipAttributes}\n        onMouseDown={this._onMouseDown}\n        tabIndex={primaryDisabled && !allowDisabledFocus ? 0 : -1}\n      />\n    );\n  }\n\n  private _onKeyDown = (ev: React.KeyboardEvent<HTMLDivElement | HTMLAnchorElement | HTMLButtonElement>) => {\n    // explicity cancelling event so click won't fire after this\n    // eslint-disable-next-line deprecation/deprecation\n    if (this.props.disabled && (ev.which === KeyCodes.enter || ev.which === KeyCodes.space)) {\n      ev.preventDefault();\n      ev.stopPropagation();\n    } else if (!this.props.disabled) {\n      if (this.props.menuProps) {\n        this._onMenuKeyDown(ev);\n      } else if (this.props.onKeyDown !== undefined) {\n        this.props.onKeyDown(ev); // not cancelling event because it's not disabled\n      }\n    }\n  };\n\n  private _onKeyUp = (\n    ev: React.KeyboardEvent<HTMLDivElement | HTMLAnchorElement | HTMLButtonElement | HTMLSpanElement>,\n  ) => {\n    if (!this.props.disabled && this.props.onKeyUp !== undefined) {\n      this.props.onKeyUp(ev); // not cancelling event because it's not disabled\n    }\n  };\n\n  private _onKeyPress = (\n    ev: React.KeyboardEvent<HTMLDivElement | HTMLAnchorElement | HTMLButtonElement | HTMLSpanElement>,\n  ) => {\n    // eslint-disable-next-line deprecation/deprecation\n    if (!this.props.disabled && this.props.onKeyPress !== undefined) {\n      // eslint-disable-next-line deprecation/deprecation\n      this.props.onKeyPress(ev); // not cancelling event because it's not disabled\n    }\n  };\n\n  private _onMouseUp = (\n    ev: React.MouseEvent<HTMLDivElement | HTMLAnchorElement | HTMLButtonElement | HTMLSpanElement>,\n  ) => {\n    if (!this.props.disabled && this.props.onMouseUp !== undefined) {\n      this.props.onMouseUp(ev); // not cancelling event because it's not disabled\n    }\n  };\n\n  private _onMouseDown = (\n    ev: React.MouseEvent<HTMLDivElement | HTMLAnchorElement | HTMLButtonElement | HTMLSpanElement>,\n  ) => {\n    if (!this.props.disabled && this.props.onMouseDown !== undefined) {\n      this.props.onMouseDown(ev); // not cancelling event because it's not disabled\n    }\n  };\n\n  private _onClick = (\n    ev: React.MouseEvent<HTMLDivElement | HTMLAnchorElement | HTMLButtonElement | HTMLSpanElement>,\n  ) => {\n    if (!this.props.disabled) {\n      if (this.props.menuProps) {\n        this._onMenuClick(ev);\n      } else if (this.props.onClick !== undefined) {\n        this.props.onClick(ev); // not cancelling event because it's not disabled\n      }\n    }\n  };\n\n  private _onSplitButtonContainerKeyDown = (ev: React.KeyboardEvent<HTMLDivElement>) => {\n    // eslint-disable-next-line deprecation/deprecation\n    if (ev.which === KeyCodes.enter || ev.which === KeyCodes.space) {\n      if (this._buttonElement.current) {\n        this._buttonElement.current.click();\n        ev.preventDefault();\n        ev.stopPropagation();\n      }\n    } else {\n      this._onMenuKeyDown(ev);\n    }\n  };\n\n  private _onMenuKeyDown = (ev: React.KeyboardEvent<HTMLDivElement | HTMLAnchorElement | HTMLButtonElement>) => {\n    if (this.props.disabled) {\n      return;\n    }\n\n    if (this.props.onKeyDown) {\n      this.props.onKeyDown(ev);\n    }\n\n    // eslint-disable-next-line deprecation/deprecation\n    const isUp = ev.which === KeyCodes.up;\n    // eslint-disable-next-line deprecation/deprecation\n    const isDown = ev.which === KeyCodes.down;\n\n    if (!ev.defaultPrevented && this._isValidMenuOpenKey(ev)) {\n      const { onMenuClick } = this.props;\n      if (onMenuClick) {\n        onMenuClick(ev, this.props);\n      }\n\n      this._onToggleMenu(false);\n      ev.preventDefault();\n      ev.stopPropagation();\n    }\n\n    // eslint-disable-next-line deprecation/deprecation\n    if (ev.which === KeyCodes.enter || ev.which === KeyCodes.space) {\n      // We manually set the focus visibility to true if opening via Enter or Space to account for the scenario where\n      // a user clicks on the button, closes the menu and then opens it via keyboard. In this scenario our default logic\n      // for setting focus visibility is not triggered since there is no keyboard navigation present beforehand.\n      setFocusVisibility(true, ev.target as Element, this.context?.registeredProviders);\n    }\n\n    if (!(ev.altKey || ev.metaKey) && (isUp || isDown)) {\n      // Suppose a menu, with shouldFocusOnMount: false, is open, and user wants to keyboard to the menu items\n      // We need to re-render the menu with shouldFocusOnMount as true.\n\n      if (!this.state.menuHidden && this.props.menuProps) {\n        const currentShouldFocusOnMount =\n          this._menuShouldFocusOnMount !== undefined\n            ? this._menuShouldFocusOnMount\n            : this.props.menuProps.shouldFocusOnMount;\n        if (!currentShouldFocusOnMount) {\n          ev.preventDefault();\n          ev.stopPropagation();\n          this._menuShouldFocusOnMount = true;\n          this.forceUpdate();\n        }\n      }\n    }\n  };\n\n  private _onTouchStart: () => void = () => {\n    if (\n      this._isSplitButton &&\n      this._splitButtonContainer.current &&\n      !('onpointerdown' in this._splitButtonContainer.current)\n    ) {\n      this._handleTouchAndPointerEvent();\n    }\n  };\n\n  private _onPointerDown(\n    ev: PointerEvent &\n      React.PointerEvent<HTMLAnchorElement | HTMLButtonElement | HTMLDivElement | BaseButton | HTMLSpanElement>,\n  ) {\n    const { onPointerDown } = this.props;\n    if (onPointerDown) {\n      onPointerDown(ev);\n    }\n\n    if (ev.pointerType === 'touch') {\n      this._handleTouchAndPointerEvent();\n\n      ev.preventDefault();\n      ev.stopImmediatePropagation();\n    }\n  }\n\n  private _handleTouchAndPointerEvent() {\n    // If we already have an existing timeout from a previous touch and pointer event\n    // cancel that timeout so we can set a new one.\n    if (this._lastTouchTimeoutId !== undefined) {\n      this._async.clearTimeout(this._lastTouchTimeoutId);\n      this._lastTouchTimeoutId = undefined;\n    }\n    this._processingTouch = true;\n\n    this._lastTouchTimeoutId = this._async.setTimeout(() => {\n      this._processingTouch = false;\n      this._lastTouchTimeoutId = undefined;\n\n      // Touch and pointer events don't focus the button naturally,\n      // so adding an imperative focus call to guarantee this behavior.\n      // Only focus the button if a splitbutton menu is not open\n      if (this.state.menuHidden) {\n        this.focus();\n      }\n    }, TouchIdleDelay);\n  }\n\n  /**\n   * Returns if the user hits a valid keyboard key to open the menu\n   * @param ev - the keyboard event\n   * @returns True if user clicks on custom trigger key if enabled or alt + down arrow if not. False otherwise.\n   */\n  private _isValidMenuOpenKey(\n    ev: React.KeyboardEvent<HTMLDivElement | HTMLAnchorElement | HTMLButtonElement>,\n  ): boolean {\n    if (this.props.menuTriggerKeyCode) {\n      // eslint-disable-next-line deprecation/deprecation\n      return ev.which === this.props.menuTriggerKeyCode;\n    } else if (this.props.menuProps) {\n      // eslint-disable-next-line deprecation/deprecation\n      return ev.which === KeyCodes.down && (ev.altKey || ev.metaKey);\n    }\n\n    // Note: When enter is pressed, we will let the event continue to propagate\n    // to trigger the onClick event on the button\n    return false;\n  }\n\n  private _onMenuClick = (\n    ev: React.MouseEvent<HTMLDivElement | HTMLButtonElement | HTMLAnchorElement | HTMLSpanElement>,\n  ) => {\n    const { onMenuClick, menuProps } = this.props;\n    if (onMenuClick) {\n      onMenuClick(ev, this.props);\n    }\n\n    // focus on the container by default when the menu is opened with a click event\n    // this differentiates from a keyboard interaction triggering the click event\n    const shouldFocusOnContainer =\n      typeof menuProps?.shouldFocusOnContainer === 'boolean'\n        ? menuProps.shouldFocusOnContainer\n        : (ev.nativeEvent as PointerEvent).pointerType === 'mouse';\n\n    if (!ev.defaultPrevented) {\n      this._onToggleMenu(shouldFocusOnContainer);\n      ev.preventDefault();\n      ev.stopPropagation();\n    }\n  };\n}\n", "import * as React from 'react';\nimport { styled, composeRenderFunction } from '../../Utilities';\nimport { ContextualMenuBase } from './ContextualMenu.base';\nimport { getStyles } from './ContextualMenu.styles';\nimport type { IContextualMenuProps, IContextualMenuStyleProps, IContextualMenuStyles } from './ContextualMenu.types';\n\nfunction onRenderSubMenu(subMenuProps: IContextualMenuProps) {\n  return <LocalContextualMenu {...subMenuProps} />;\n}\n\n// This is to prevent cyclic import with ContextualMenu.base.tsx.\nconst LocalContextualMenu: React.FunctionComponent<IContextualMenuProps> = styled<\n  IContextualMenuProps,\n  IContextualMenuStyleProps,\n  IContextualMenuStyles\n>(\n  ContextualMenuBase,\n  getStyles,\n  (props: IContextualMenuProps) => ({\n    onRenderSubMenu: props.onRenderSubMenu\n      ? composeRenderFunction(props.onRenderSubMenu, onRenderSubMenu)\n      : onRenderSubMenu,\n  }),\n  { scope: 'ContextualMenu' },\n);\n\n/**\n * ContextualMenu description\n */\nexport const ContextualMenu: React.FunctionComponent<IContextualMenuProps> = LocalContextualMenu;\nContextualMenu.displayName = 'ContextualMenu';\n", "import * as React from 'react';\nimport { ContextualMenuItemType } from './ContextualMenu.types';\nimport { DirectionalHint } from '../../common/DirectionalHint';\nimport { FocusZone, FocusZoneDirection, FocusZoneTabbableElements } from '../../FocusZone';\nimport {\n  divProperties,\n  getNativeProps,\n  shallowCompare,\n  Async,\n  assign,\n  classNamesFunction,\n  css,\n  getFirstFocusable,\n  getLastFocusable,\n  getRTL,\n  KeyCodes,\n  shouldWrapFocus,\n  isIOS,\n  isMac,\n  memoizeFunction,\n  getPropsWithDefaults,\n  getDocument,\n  FocusRects,\n} from '../../Utilities';\nimport { hasSubmenu, getIsChecked, isItemDisabled } from '../../utilities/contextualMenu/index';\nimport { Callout } from '../../Callout';\nimport { ContextualMenuItem } from './ContextualMenuItem';\nimport {\n  ContextualMenuSplitButton,\n  ContextualMenuButton,\n  ContextualMenuAnchor,\n} from './ContextualMenuItemWrapper/index';\nimport { concatStyleSetsWithProps } from '../../Styling';\nimport { getItemStyles } from './ContextualMenu.classNames';\nimport {\n  useTarget,\n  usePrevious,\n  useAsync,\n  useWarnings,\n  useId,\n  Target,\n  useIsomorphicLayoutEffect,\n} from '@fluentui/react-hooks';\nimport { useResponsiveMode, ResponsiveMode } from '../../ResponsiveMode';\nimport { MenuContext } from '../../utilities/MenuContext/index';\nimport type {\n  IContextualMenuProps,\n  IContextualMenuItem,\n  IContextualMenuListProps,\n  IContextualMenuStyleProps,\n  IContextualMenuStyles,\n  IContextualMenuItemRenderProps,\n} from './ContextualMenu.types';\nimport type { IFocusZoneProps } from '../../FocusZone';\nimport type { IMenuItemClassNames, IContextualMenuClassNames } from './ContextualMenu.classNames';\nimport type { IRenderFunction, IStyleFunctionOrObject } from '../../Utilities';\nimport type { ICalloutContentStyleProps, ICalloutContentStyles } from '../../Callout';\nimport type { IProcessedStyleSet } from '../../Styling';\nimport type { IContextualMenuItemStyleProps, IContextualMenuItemStyles } from './ContextualMenuItem.types';\nimport type { IPopupRestoreFocusParams } from '../../Popup';\n\nconst getClassNames = classNamesFunction<IContextualMenuStyleProps, IContextualMenuStyles>();\nconst getContextualMenuItemClassNames = classNamesFunction<IContextualMenuItemStyleProps, IContextualMenuItemStyles>();\n\n// The default ContextualMenu properties have no items and beak, the default submenu direction is right and top.\nconst DEFAULT_PROPS: Partial<IContextualMenuProps> = {\n  items: [],\n  shouldFocusOnMount: true,\n  gapSpace: 0,\n  directionalHint: DirectionalHint.bottomAutoEdge,\n  beakWidth: 16,\n};\n\n/* return number of menu items, excluding headers and dividers */\nfunction getItemCount(items: IContextualMenuItem[]): number {\n  let totalItemCount = 0;\n  for (const item of items) {\n    if (item.itemType !== ContextualMenuItemType.Divider && item.itemType !== ContextualMenuItemType.Header) {\n      const itemCount = item.customOnRenderListLength ? item.customOnRenderListLength : 1;\n      totalItemCount += itemCount;\n    }\n  }\n  return totalItemCount;\n}\n\nexport function getSubmenuItems(\n  item: IContextualMenuItem,\n  options?: {\n    target?: Target;\n  },\n): IContextualMenuItem[] | undefined {\n  const target = options?.target;\n\n  // eslint-disable-next-line deprecation/deprecation\n  const items = item.subMenuProps ? item.subMenuProps.items : item.items;\n\n  if (items) {\n    const overrideItems: typeof items = [];\n\n    for (const subItem of items) {\n      if (subItem.preferMenuTargetAsEventTarget) {\n        // For sub-items which need an overridden target, intercept `onClick`\n        const { onClick, ...contextItem } = subItem;\n\n        overrideItems.push({\n          ...contextItem,\n          onClick: getOnClickWithOverrideTarget(onClick, target),\n        });\n      } else {\n        overrideItems.push(subItem);\n      }\n    }\n\n    return overrideItems;\n  }\n}\n\n/**\n * Returns true if a list of menu items can contain a checkbox\n */\nexport function canAnyMenuItemsCheck(items: IContextualMenuItem[]): boolean {\n  return items.some(item => {\n    if (item.canCheck) {\n      return true;\n    }\n\n    // If the item is a section, check if any of the items in the section can check.\n    if (item.sectionProps && item.sectionProps.items.some(submenuItem => submenuItem.canCheck === true)) {\n      return true;\n    }\n\n    return false;\n  });\n}\n\nconst NavigationIdleDelay = 250; /* ms */\n\nconst COMPONENT_NAME = 'ContextualMenu';\n\nconst _getMenuItemStylesFunction = memoizeFunction(\n  (\n    ...styles: (IStyleFunctionOrObject<IContextualMenuItemStyleProps, IContextualMenuItemStyles> | undefined)[]\n  ): IStyleFunctionOrObject<IContextualMenuItemStyleProps, IContextualMenuItemStyles> => {\n    return (styleProps: IContextualMenuItemStyleProps) =>\n      concatStyleSetsWithProps(styleProps, getItemStyles, ...styles);\n  },\n);\n\n//#region Custom hooks\nfunction useVisibility(props: IContextualMenuProps, targetWindow: Window | undefined) {\n  const { hidden = false, onMenuDismissed, onMenuOpened } = props;\n  const previousHidden = usePrevious(hidden);\n\n  const onMenuOpenedRef = React.useRef(onMenuOpened);\n  const onMenuClosedRef = React.useRef(onMenuDismissed);\n  const propsRef = React.useRef(props);\n\n  onMenuOpenedRef.current = onMenuOpened;\n  onMenuClosedRef.current = onMenuDismissed;\n  propsRef.current = props;\n\n  React.useEffect(() => {\n    // Don't issue dismissed callbacks on initial mount\n    if (hidden && previousHidden === false) {\n      onMenuClosedRef.current?.(propsRef.current);\n    } else if (!hidden && previousHidden !== false) {\n      onMenuOpenedRef.current?.(propsRef.current);\n    }\n  }, [hidden, previousHidden]);\n\n  // Issue onDismissedCallback on unmount\n  React.useEffect(() => () => onMenuClosedRef.current?.(propsRef.current), []);\n}\n\nfunction useSubMenuState(\n  { hidden, items, theme, className, id, target: menuTarget }: IContextualMenuProps,\n  dismiss: () => void,\n) {\n  const [expandedMenuItemKey, setExpandedMenuItemKey] = React.useState<string>();\n  const [submenuTarget, setSubmenuTarget] = React.useState<HTMLElement>();\n  /** True if the menu was expanded by mouse click OR hover (as opposed to by keyboard) */\n  const [shouldFocusOnContainer, setShouldFocusOnContainer] = React.useState<boolean>();\n  const subMenuId = useId(COMPONENT_NAME, id);\n\n  const closeSubMenu = React.useCallback(() => {\n    setShouldFocusOnContainer(undefined);\n    setExpandedMenuItemKey(undefined);\n    setSubmenuTarget(undefined);\n  }, []);\n\n  const openSubMenu = React.useCallback(\n    ({ key: submenuItemKey }: IContextualMenuItem, target: HTMLElement, focusContainer?: boolean) => {\n      if (expandedMenuItemKey === submenuItemKey) {\n        return;\n      }\n\n      target.focus();\n      setShouldFocusOnContainer(focusContainer);\n      setExpandedMenuItemKey(submenuItemKey);\n      setSubmenuTarget(target);\n    },\n    [expandedMenuItemKey],\n  );\n\n  React.useEffect(() => {\n    if (hidden) {\n      closeSubMenu();\n    }\n  }, [hidden, closeSubMenu]);\n\n  const onSubMenuDismiss = useOnSubmenuDismiss(dismiss, closeSubMenu);\n\n  const getSubmenuProps = (): IContextualMenuProps | null => {\n    const item = findItemByKeyFromItems(expandedMenuItemKey!, items);\n    let submenuProps: IContextualMenuProps | null = null;\n\n    if (item) {\n      submenuProps = {\n        items: getSubmenuItems(item, { target: menuTarget })!,\n        target: submenuTarget,\n        onDismiss: onSubMenuDismiss,\n        isSubMenu: true,\n        id: subMenuId,\n        shouldFocusOnMount: true,\n        shouldFocusOnContainer,\n        directionalHint: getRTL(theme) ? DirectionalHint.leftTopEdge : DirectionalHint.rightTopEdge,\n        className,\n        gapSpace: 0,\n        isBeakVisible: false,\n      };\n\n      if (item.subMenuProps) {\n        assign(submenuProps, item.subMenuProps);\n      }\n\n      if (item.preferMenuTargetAsEventTarget) {\n        const { onItemClick } = item;\n\n        submenuProps.onItemClick = getOnClickWithOverrideTarget(onItemClick, menuTarget);\n      }\n    }\n    return submenuProps;\n  };\n\n  return [expandedMenuItemKey, openSubMenu, getSubmenuProps, onSubMenuDismiss] as const;\n}\n\nfunction useShouldUpdateFocusOnMouseMove({ delayUpdateFocusOnHover, hidden }: IContextualMenuProps) {\n  const shouldUpdateFocusOnMouseEvent = React.useRef<boolean>(!delayUpdateFocusOnHover);\n  const gotMouseMove = React.useRef<boolean>(false);\n\n  React.useEffect(() => {\n    shouldUpdateFocusOnMouseEvent.current = !delayUpdateFocusOnHover;\n    gotMouseMove.current = hidden ? false : !delayUpdateFocusOnHover && gotMouseMove.current;\n  }, [delayUpdateFocusOnHover, hidden]);\n\n  const onMenuFocusCapture = React.useCallback(() => {\n    if (delayUpdateFocusOnHover) {\n      shouldUpdateFocusOnMouseEvent.current = false;\n    }\n  }, [delayUpdateFocusOnHover]);\n\n  return [shouldUpdateFocusOnMouseEvent, gotMouseMove, onMenuFocusCapture] as const;\n}\n\nfunction usePreviousActiveElement(\n  { hidden, onRestoreFocus }: IContextualMenuProps,\n  targetWindow: Window | undefined,\n  hostElement: any,\n) {\n  const previousActiveElement = React.useRef<undefined | HTMLElement>();\n\n  const tryFocusPreviousActiveElement = React.useCallback(\n    (options: IPopupRestoreFocusParams) => {\n      if (onRestoreFocus) {\n        onRestoreFocus(options);\n      } else if (options?.documentContainsFocus) {\n        // Make sure that the focus method actually exists\n        // In some cases the object might exist but not be a real element.\n        // This is primarily for IE 11 and should be removed once IE 11 is no longer in use.\n        previousActiveElement.current?.focus?.();\n      }\n    },\n    [onRestoreFocus],\n  );\n\n  useIsomorphicLayoutEffect(() => {\n    if (!hidden) {\n      const newElement = targetWindow?.document.activeElement as HTMLElement;\n      if (!hostElement.current?.contains(newElement) && newElement.tagName !== 'BODY') {\n        previousActiveElement.current = newElement;\n      }\n    } else if (previousActiveElement.current) {\n      tryFocusPreviousActiveElement({\n        originalElement: previousActiveElement.current,\n        containsFocus: true,\n        documentContainsFocus: getDocument()?.hasFocus() || false,\n      });\n\n      previousActiveElement.current = undefined;\n    }\n  }, [hidden, targetWindow?.document.activeElement, tryFocusPreviousActiveElement, hostElement]);\n\n  return [tryFocusPreviousActiveElement] as const;\n}\n\nfunction useKeyHandlers(\n  {\n    theme,\n    isSubMenu,\n    focusZoneProps: { checkForNoWrap, direction: focusZoneDirection = FocusZoneDirection.vertical } = {},\n  }: IContextualMenuProps,\n  dismiss: (ev?: any, dismissAll?: boolean | undefined) => void | undefined,\n  hostElement: React.RefObject<HTMLDivElement>,\n  openSubMenu: (submenuItemKey: IContextualMenuItem, target: HTMLElement) => void,\n) {\n  /** True if the most recent keydown event was for alt (option) or meta (command). */\n  const lastKeyDownWasAltOrMeta = React.useRef<boolean | undefined>();\n\n  /**\n   * Calls `shouldHandleKey` to determine whether the keyboard event should be handled;\n   * if so, stops event propagation and dismisses menu(s).\n   * @param ev - The keyboard event.\n   * @param shouldHandleKey - Returns whether we should handle this keyboard event.\n   * @param dismissAllMenus - If true, dismiss all menus. Otherwise, dismiss only the current menu.\n   * Only does anything if `shouldHandleKey` returns true.\n   * @returns Whether the event was handled.\n   */\n  const keyHandler = (\n    ev: React.KeyboardEvent<HTMLElement>,\n    shouldHandleKey: (ev: React.KeyboardEvent<HTMLElement>) => boolean,\n    dismissAllMenus?: boolean,\n  ): boolean => {\n    let handled = false;\n\n    if (shouldHandleKey(ev)) {\n      dismiss(ev, dismissAllMenus);\n      ev.preventDefault();\n      ev.stopPropagation();\n      handled = true;\n    }\n\n    return handled;\n  };\n\n  /**\n   * Checks if the submenu should be closed\n   */\n  const shouldCloseSubMenu = (ev: React.KeyboardEvent<HTMLElement>): boolean => {\n    const submenuCloseKey = getRTL(theme) ? KeyCodes.right : KeyCodes.left;\n\n    // eslint-disable-next-line deprecation/deprecation\n    if (ev.which !== submenuCloseKey || !isSubMenu) {\n      return false;\n    }\n\n    return !!(\n      focusZoneDirection === FocusZoneDirection.vertical ||\n      (checkForNoWrap && !shouldWrapFocus(ev.target as HTMLElement, 'data-no-horizontal-wrap'))\n    );\n  };\n\n  const shouldHandleKeyDown = (ev: React.KeyboardEvent<HTMLElement>) => {\n    return (\n      // eslint-disable-next-line deprecation/deprecation\n      ev.which === KeyCodes.escape ||\n      shouldCloseSubMenu(ev) ||\n      // eslint-disable-next-line deprecation/deprecation\n      (ev.which === KeyCodes.up && (ev.altKey || ev.metaKey))\n    );\n  };\n\n  const onKeyDown = (ev: React.KeyboardEvent<HTMLElement>): boolean => {\n    // Take note if we are processing an alt (option) or meta (command) keydown.\n    // See comment in shouldHandleKeyUp for reasoning.\n    lastKeyDownWasAltOrMeta.current = isAltOrMeta(ev);\n\n    // On Mac, pressing escape dismisses all levels of native context menus\n    // eslint-disable-next-line deprecation/deprecation\n    const dismissAllMenus = ev.which === KeyCodes.escape && (isMac() || isIOS());\n\n    return keyHandler(ev, shouldHandleKeyDown, dismissAllMenus);\n  };\n\n  /**\n   * We close the menu on key up only if ALL of the following are true:\n   * - Most recent key down was alt or meta (command)\n   * - The alt/meta key down was NOT followed by some other key (such as down/up arrow to\n   *   expand/collapse the menu)\n   * - We're not on a Mac (or iOS)\n   *\n   * This is because on Windows, pressing alt moves focus to the application menu bar or similar,\n   * closing any open context menus. There is not a similar behavior on Macs.\n   */\n  const shouldHandleKeyUp = (ev: React.KeyboardEvent<HTMLElement>) => {\n    const keyPressIsAltOrMetaAlone = lastKeyDownWasAltOrMeta.current && isAltOrMeta(ev);\n    lastKeyDownWasAltOrMeta.current = false;\n    return !!keyPressIsAltOrMetaAlone && !(isIOS() || isMac());\n  };\n\n  const onKeyUp = (ev: React.KeyboardEvent<HTMLElement>): boolean => {\n    return keyHandler(ev, shouldHandleKeyUp, true /* dismissAllMenus */);\n  };\n\n  const onMenuKeyDown = (ev: React.KeyboardEvent<HTMLElement>) => {\n    // Mark as handled if onKeyDown returns true (for handling collapse cases)\n    // or if we are attempting to expand a submenu\n    const handled = onKeyDown(ev);\n\n    if (handled || !hostElement.current) {\n      return;\n    }\n\n    // If we have a modifier key being pressed, we do not want to move focus.\n    // Otherwise, handle up and down keys.\n    const hasModifier = !!(ev.altKey || ev.metaKey);\n    // eslint-disable-next-line deprecation/deprecation\n    const isUp = ev.which === KeyCodes.up;\n    // eslint-disable-next-line deprecation/deprecation\n    const isDown = ev.which === KeyCodes.down;\n    if (!hasModifier && (isUp || isDown)) {\n      const elementToFocus = isUp\n        ? getLastFocusable(hostElement.current, hostElement.current.lastChild as HTMLElement, true)\n        : getFirstFocusable(hostElement.current, hostElement.current.firstChild as HTMLElement, true);\n\n      if (elementToFocus) {\n        elementToFocus.focus();\n        ev.preventDefault();\n        ev.stopPropagation();\n      }\n    }\n  };\n\n  const onItemKeyDown = (item: any, ev: React.KeyboardEvent<HTMLElement>): void => {\n    const openKey = getRTL(theme) ? KeyCodes.left : KeyCodes.right;\n\n    if (\n      !item.disabled &&\n      // eslint-disable-next-line deprecation/deprecation\n      (ev.which === openKey || ev.which === KeyCodes.enter || (ev.which === KeyCodes.down && (ev.altKey || ev.metaKey)))\n    ) {\n      openSubMenu(item, ev.currentTarget as HTMLElement);\n      ev.preventDefault();\n    }\n  };\n\n  return [onKeyDown, onKeyUp, onMenuKeyDown, onItemKeyDown] as const;\n}\n\nfunction useScrollHandler(asyncTracker: Async) {\n  const isScrollIdle = React.useRef<boolean>(true);\n  const scrollIdleTimeoutId = React.useRef<number | undefined>();\n\n  /**\n   * Scroll handler for the callout to make sure the mouse events\n   * for updating focus are not interacting during scroll\n   */\n  const onScroll = (): void => {\n    if (!isScrollIdle.current && scrollIdleTimeoutId.current !== undefined) {\n      asyncTracker.clearTimeout(scrollIdleTimeoutId.current);\n      scrollIdleTimeoutId.current = undefined;\n    } else {\n      isScrollIdle.current = false;\n    }\n\n    scrollIdleTimeoutId.current = asyncTracker.setTimeout(() => {\n      isScrollIdle.current = true;\n    }, NavigationIdleDelay);\n  };\n\n  return [onScroll, isScrollIdle] as const;\n}\n\nfunction useOnSubmenuDismiss(dismiss: (ev?: any, dismissAll?: boolean) => void, closeSubMenu: () => void) {\n  const isMountedRef = React.useRef(false);\n  React.useEffect(() => {\n    isMountedRef.current = true;\n    return () => {\n      isMountedRef.current = false;\n    };\n  }, []);\n\n  /**\n   * This function is called ASYNCHRONOUSLY, and so there is a chance it is called\n   * after the component is unmounted. The isMountedRef is added to prevent\n   * from calling setState() after unmount. Do NOT copy this pattern in synchronous\n   * code.\n   */\n  const onSubMenuDismiss = (ev?: any, dismissAll?: boolean): void => {\n    if (dismissAll) {\n      dismiss(ev, dismissAll);\n    } else if (isMountedRef.current) {\n      closeSubMenu();\n    }\n  };\n\n  return onSubMenuDismiss;\n}\n\nfunction useSubmenuEnterTimer({ subMenuHoverDelay = NavigationIdleDelay }: IContextualMenuProps, asyncTracker: Async) {\n  const enterTimerRef = React.useRef<number | undefined>(undefined);\n\n  const cancelSubMenuTimer = () => {\n    if (enterTimerRef.current !== undefined) {\n      asyncTracker.clearTimeout(enterTimerRef.current);\n      enterTimerRef.current = undefined;\n    }\n  };\n\n  const startSubmenuTimer = (onTimerExpired: () => void) => {\n    enterTimerRef.current = asyncTracker.setTimeout(() => {\n      onTimerExpired();\n      cancelSubMenuTimer();\n    }, subMenuHoverDelay);\n  };\n\n  return [cancelSubMenuTimer, startSubmenuTimer, enterTimerRef as React.RefObject<number | undefined>] as const;\n}\n\nfunction useMouseHandlers(\n  props: IContextualMenuProps,\n  isScrollIdle: React.MutableRefObject<boolean>,\n  subMenuEntryTimer: React.RefObject<number | undefined>,\n  targetWindow: Window | undefined,\n  shouldUpdateFocusOnMouseEvent: React.MutableRefObject<boolean>,\n  gotMouseMove: React.MutableRefObject<boolean>,\n  expandedMenuItemKey: string | undefined,\n  hostElement: React.RefObject<HTMLDivElement>,\n  startSubmenuTimer: (onTimerExpired: () => void) => void,\n  cancelSubMenuTimer: () => void,\n  openSubMenu: (submenuItemKey: IContextualMenuItem, target: HTMLElement, openedByMouseClick?: boolean) => void,\n  onSubMenuDismiss: (ev?: any, dismissAll?: boolean) => void,\n  dismiss: (ev?: any, dismissAll?: boolean) => void,\n) {\n  const { target: menuTarget } = props;\n\n  const onItemMouseEnterBase = (item: any, ev: React.MouseEvent<HTMLElement>, target?: HTMLElement): void => {\n    if (shouldUpdateFocusOnMouseEvent.current) {\n      gotMouseMove.current = true;\n    }\n\n    if (shouldIgnoreMouseEvent()) {\n      return;\n    }\n\n    updateFocusOnMouseEvent(item, ev, target);\n  };\n\n  const onItemMouseMoveBase = (item: any, ev: React.MouseEvent<HTMLElement>, target: HTMLElement): void => {\n    const targetElement = ev.currentTarget as HTMLElement;\n\n    // Always do this check to make sure we record a mouseMove if needed (even if we are timed out)\n    if (shouldUpdateFocusOnMouseEvent.current) {\n      gotMouseMove.current = true;\n    } else {\n      return;\n    }\n\n    if (\n      !isScrollIdle.current ||\n      subMenuEntryTimer.current !== undefined ||\n      targetElement === (targetWindow?.document.activeElement as HTMLElement)\n    ) {\n      return;\n    }\n\n    updateFocusOnMouseEvent(item, ev, target);\n  };\n\n  const shouldIgnoreMouseEvent = (): boolean => {\n    return !isScrollIdle.current || !gotMouseMove.current;\n  };\n\n  const onMouseItemLeave = (item: any, ev: React.MouseEvent<HTMLElement>): void => {\n    if (shouldIgnoreMouseEvent()) {\n      return;\n    }\n\n    cancelSubMenuTimer();\n\n    if (expandedMenuItemKey !== undefined) {\n      return;\n    }\n\n    /**\n     * IE11 focus() method forces parents to scroll to top of element.\n     * Edge and IE expose a setActive() function for focusable divs that\n     * sets the page focus but does not scroll the parent element.\n     */\n    if ((hostElement.current as any).setActive) {\n      try {\n        (hostElement.current as any).setActive();\n      } catch (e) {\n        /* no-op */\n      }\n    } else {\n      hostElement.current?.focus();\n    }\n  };\n\n  /**\n   * Handles updating focus when mouseEnter or mouseMove fire.\n   * As part of updating focus, This function will also update\n   * the expand/collapse state accordingly.\n   */\n  const updateFocusOnMouseEvent = (\n    item: IContextualMenuItem,\n    ev: React.MouseEvent<HTMLElement>,\n    target?: HTMLElement,\n  ) => {\n    const targetElement = target ? target : (ev.currentTarget as HTMLElement);\n\n    if (item.key === expandedMenuItemKey) {\n      return;\n    }\n\n    cancelSubMenuTimer();\n\n    // If the menu is not expanded we can update focus without any delay\n    if (expandedMenuItemKey === undefined) {\n      targetElement.focus();\n    }\n\n    // Delay updating expanding/dismissing the submenu\n    // and only set focus if we have not already done so\n    if (hasSubmenu(item)) {\n      ev.stopPropagation();\n      startSubmenuTimer(() => {\n        targetElement.focus();\n        openSubMenu(item, targetElement, true);\n      });\n    } else {\n      startSubmenuTimer(() => {\n        onSubMenuDismiss(ev);\n        targetElement.focus();\n      });\n    }\n  };\n\n  const onItemClick = (\n    item: IContextualMenuItem,\n    ev: React.MouseEvent<HTMLElement> | React.KeyboardEvent<HTMLElement>,\n  ): void => {\n    onItemClickBase(item, ev, ev.currentTarget as HTMLElement);\n  };\n\n  const onItemClickBase = (\n    item: IContextualMenuItem,\n    ev: React.MouseEvent<HTMLElement> | React.KeyboardEvent<HTMLElement>,\n    target: HTMLElement,\n  ): void => {\n    const items = getSubmenuItems(item, { target: menuTarget });\n\n    // Cancel an async menu item hover timeout action from being taken and instead\n    // just trigger the click event instead.\n    cancelSubMenuTimer();\n\n    if (!hasSubmenu(item) && (!items || !items.length)) {\n      // This is an item without a menu. Click it.\n      executeItemClick(item, ev);\n    } else {\n      if (item.key !== expandedMenuItemKey) {\n        // This has a collapsed sub menu. Expand it.\n\n        // focus on the container by default when the menu is opened with a click event\n        // this differentiates from a keyboard interaction triggering the click event\n        const shouldFocusOnContainer =\n          typeof props.shouldFocusOnContainer === 'boolean'\n            ? props.shouldFocusOnContainer\n            : (ev.nativeEvent as PointerEvent).pointerType === 'mouse';\n        openSubMenu(item, target, shouldFocusOnContainer);\n      }\n    }\n\n    ev.stopPropagation();\n    ev.preventDefault();\n  };\n\n  const onAnchorClick = (item: IContextualMenuItem, ev: React.MouseEvent<HTMLElement>) => {\n    executeItemClick(item, ev);\n    ev.stopPropagation();\n  };\n\n  const executeItemClick = (\n    item: IContextualMenuItem,\n    ev: React.MouseEvent<HTMLElement> | React.KeyboardEvent<HTMLElement>,\n  ): void => {\n    if (item.disabled || item.isDisabled) {\n      return;\n    }\n\n    if (item.preferMenuTargetAsEventTarget) {\n      overrideTarget(ev, menuTarget);\n    }\n\n    let shouldDismiss = false;\n    if (item.onClick) {\n      shouldDismiss = !!item.onClick(ev, item);\n    } else if (props.onItemClick) {\n      shouldDismiss = !!props.onItemClick(ev, item);\n    }\n\n    if (shouldDismiss || !ev.defaultPrevented) {\n      dismiss(ev, true);\n    }\n  };\n\n  return [\n    onItemMouseEnterBase,\n    onItemMouseMoveBase,\n    onMouseItemLeave,\n    onItemClick,\n    onAnchorClick,\n    executeItemClick,\n    onItemClickBase,\n  ] as const;\n}\n//#endregion\n\nexport const ContextualMenuBase: React.FunctionComponent<IContextualMenuProps> = React.memo(\n  React.forwardRef<HTMLDivElement, IContextualMenuProps>((propsWithoutDefaults, forwardedRef) => {\n    const { ref, ...props } = getPropsWithDefaults(DEFAULT_PROPS, propsWithoutDefaults);\n    const hostElement = React.useRef<HTMLDivElement>(null);\n    const asyncTracker = useAsync();\n    const menuId = useId(COMPONENT_NAME, props.id);\n\n    useWarnings({\n      name: COMPONENT_NAME,\n      props,\n      deprecations: {\n        getMenuClassNames: 'styles',\n      },\n    });\n\n    const dismiss = (ev?: any, dismissAll?: boolean) => props.onDismiss?.(ev, dismissAll);\n    const [targetRef, targetWindow] = useTarget(props.target, hostElement);\n    const [tryFocusPreviousActiveElement] = usePreviousActiveElement(props, targetWindow, hostElement);\n    const [expandedMenuItemKey, openSubMenu, getSubmenuProps, onSubMenuDismiss] = useSubMenuState(props, dismiss);\n    const [shouldUpdateFocusOnMouseEvent, gotMouseMove, onMenuFocusCapture] = useShouldUpdateFocusOnMouseMove(props);\n    const [onScroll, isScrollIdle] = useScrollHandler(asyncTracker);\n    const [cancelSubMenuTimer, startSubmenuTimer, subMenuEntryTimer] = useSubmenuEnterTimer(props, asyncTracker);\n\n    const responsiveMode = useResponsiveMode(hostElement, props.responsiveMode);\n\n    useVisibility(props, targetWindow);\n\n    const [onKeyDown, onKeyUp, onMenuKeyDown, onItemKeyDown] = useKeyHandlers(props, dismiss, hostElement, openSubMenu);\n    const [\n      onItemMouseEnterBase,\n      onItemMouseMoveBase,\n      onMouseItemLeave,\n      onItemClick,\n      onAnchorClick,\n      executeItemClick,\n      onItemClickBase,\n    ] = useMouseHandlers(\n      props,\n      isScrollIdle,\n      subMenuEntryTimer,\n      targetWindow,\n      shouldUpdateFocusOnMouseEvent,\n      gotMouseMove,\n      expandedMenuItemKey,\n      hostElement,\n      startSubmenuTimer,\n      cancelSubMenuTimer,\n      openSubMenu,\n      onSubMenuDismiss,\n      dismiss,\n    );\n\n    //#region Render helpers\n\n    const onDefaultRenderMenuList = (\n      menuListProps: IContextualMenuListProps,\n      // eslint-disable-next-line deprecation/deprecation\n      menuClassNames: IProcessedStyleSet<IContextualMenuStyles> | IContextualMenuClassNames,\n      defaultRender?: IRenderFunction<IContextualMenuListProps>,\n    ): JSX.Element => {\n      let indexCorrection = 0;\n      const { items, totalItemCount, hasCheckmarks, hasIcons } = menuListProps;\n\n      return (\n        <ul className={menuClassNames.list} onKeyDown={onKeyDown} onKeyUp={onKeyUp} role={'presentation'}>\n          {items.map((item, index) => {\n            const menuItem = renderMenuItem(\n              item,\n              index,\n              indexCorrection,\n              totalItemCount,\n              hasCheckmarks,\n              hasIcons,\n              menuClassNames,\n            );\n            if (item.itemType !== ContextualMenuItemType.Divider && item.itemType !== ContextualMenuItemType.Header) {\n              const indexIncrease = item.customOnRenderListLength ? item.customOnRenderListLength : 1;\n              indexCorrection += indexIncrease;\n            }\n            return menuItem;\n          })}\n        </ul>\n      );\n    };\n\n    const renderFocusZone = (children: JSX.Element | null, adjustedFocusZoneProps: IFocusZoneProps): JSX.Element => {\n      const { focusZoneAs: ChildrenRenderer = FocusZone } = props;\n      return <ChildrenRenderer {...adjustedFocusZoneProps}>{children}</ChildrenRenderer>;\n    };\n\n    /**\n     * !!!IMPORTANT!!! Avoid mutating `item: IContextualMenuItem` argument. It will\n     * cause the menu items to always re-render because the component update is based on shallow comparison.\n     */\n    const renderMenuItem = (\n      item: IContextualMenuItem,\n      index: number,\n      focusableElementIndex: number,\n      totalItemCount: number,\n      hasCheckmarks: boolean,\n      hasIcons: boolean,\n      // eslint-disable-next-line deprecation/deprecation\n      menuClassNames: IProcessedStyleSet<IContextualMenuStyles> | IContextualMenuClassNames,\n    ): JSX.Element => {\n      const renderedItems: React.ReactNode[] = [];\n      const iconProps = item.iconProps || { iconName: 'None' };\n      const {\n        getItemClassNames, // eslint-disable-line deprecation/deprecation\n        itemProps,\n      } = item;\n      const styles = itemProps ? itemProps.styles : undefined;\n\n      // We only send a dividerClassName when the item to be rendered is a divider.\n      // For all other cases, the default divider style is used.\n      const dividerClassName = item.itemType === ContextualMenuItemType.Divider ? item.className : undefined;\n      const subMenuIconClassName = item.submenuIconProps ? item.submenuIconProps.className : '';\n\n      // eslint-disable-next-line deprecation/deprecation\n      let itemClassNames: IMenuItemClassNames;\n\n      // IContextualMenuItem#getItemClassNames for backwards compatibility\n      // otherwise uses mergeStyles for class names.\n      if (getItemClassNames) {\n        itemClassNames = getItemClassNames(\n          props.theme!,\n          isItemDisabled(item),\n          expandedMenuItemKey === item.key,\n          !!getIsChecked(item),\n          !!item.href,\n          iconProps.iconName !== 'None',\n          item.className,\n          dividerClassName,\n          iconProps.className,\n          subMenuIconClassName,\n          item.primaryDisabled,\n        );\n      } else {\n        const itemStyleProps: IContextualMenuItemStyleProps = {\n          theme: props.theme!,\n          disabled: isItemDisabled(item),\n          expanded: expandedMenuItemKey === item.key,\n          checked: !!getIsChecked(item),\n          isAnchorLink: !!item.href,\n          knownIcon: iconProps.iconName !== 'None',\n          itemClassName: item.className,\n          dividerClassName,\n          iconClassName: iconProps.className,\n          subMenuClassName: subMenuIconClassName,\n          primaryDisabled: item.primaryDisabled,\n        };\n\n        // We need to generate default styles then override if styles are provided\n        // since the ContextualMenu currently handles item classNames.\n        itemClassNames = getContextualMenuItemClassNames(\n          _getMenuItemStylesFunction(menuClassNames.subComponentStyles?.menuItem, styles),\n          itemStyleProps,\n        );\n      }\n\n      // eslint-disable-next-line deprecation/deprecation\n      if (item.text === '-' || item.name === '-') {\n        item.itemType = ContextualMenuItemType.Divider;\n      }\n      switch (item.itemType) {\n        case ContextualMenuItemType.Divider:\n          renderedItems.push(renderSeparator(index, itemClassNames));\n          break;\n        case ContextualMenuItemType.Header:\n          renderedItems.push(renderSeparator(index, itemClassNames));\n          const headerItem = renderHeaderMenuItem(item, itemClassNames, menuClassNames, index, hasCheckmarks, hasIcons);\n          renderedItems.push(renderListItem(headerItem, item.key || index, itemClassNames, item.title));\n          break;\n        case ContextualMenuItemType.Section:\n          renderedItems.push(renderSectionItem(item, itemClassNames, menuClassNames, index, hasCheckmarks, hasIcons));\n          break;\n        default:\n          const defaultRenderNormalItem = () =>\n            renderNormalItem(\n              item,\n              itemClassNames,\n              index,\n              focusableElementIndex,\n              totalItemCount,\n              hasCheckmarks,\n              hasIcons,\n            ) as JSX.Element;\n\n          const menuItem = props.onRenderContextualMenuItem\n            ? props.onRenderContextualMenuItem(item, defaultRenderNormalItem)\n            : defaultRenderNormalItem();\n          renderedItems.push(renderListItem(menuItem, item.key || index, itemClassNames, item.title));\n          break;\n      }\n\n      // Since multiple nodes *could* be rendered, wrap them all in a fragment with this item's key.\n      // This ensures the reconciler handles multi-item output per-node correctly and does not re-mount content.\n      return <React.Fragment key={item.key}>{renderedItems}</React.Fragment>;\n    };\n\n    const defaultMenuItemRenderer = (\n      item: IContextualMenuItemRenderProps,\n      // eslint-disable-next-line deprecation/deprecation\n      menuClassNames: IProcessedStyleSet<IContextualMenuStyles> | IContextualMenuClassNames,\n    ): React.ReactNode => {\n      const { index, focusableElementIndex, totalItemCount, hasCheckmarks, hasIcons } = item;\n      return renderMenuItem(\n        item,\n        index,\n        focusableElementIndex,\n        totalItemCount,\n        hasCheckmarks,\n        hasIcons,\n        menuClassNames,\n      );\n    };\n\n    const renderSectionItem = (\n      sectionItem: IContextualMenuItem,\n      // eslint-disable-next-line deprecation/deprecation\n      itemClassNames: IMenuItemClassNames,\n      // eslint-disable-next-line deprecation/deprecation\n      menuClassNames: IProcessedStyleSet<IContextualMenuStyles> | IContextualMenuClassNames,\n      index: number,\n      hasCheckmarks: boolean,\n      hasIcons: boolean,\n    ) => {\n      const sectionProps = sectionItem.sectionProps;\n      if (!sectionProps) {\n        return;\n      }\n\n      let headerItem;\n      let groupProps;\n      if (sectionProps.title) {\n        let headerContextualMenuItem: IContextualMenuItem | undefined = undefined;\n        let ariaLabelledby = '';\n        if (typeof sectionProps.title === 'string') {\n          // Since title is a user-facing string, it needs to be stripped\n          // of whitespace in order to build a valid element ID\n          const id = menuId + sectionProps.title.replace(/\\s/g, '');\n          headerContextualMenuItem = {\n            key: `section-${sectionProps.title}-title`,\n            itemType: ContextualMenuItemType.Header,\n            text: sectionProps.title,\n            id,\n          };\n          ariaLabelledby = id;\n        } else {\n          const id = sectionProps.title.id || menuId + sectionProps.title.key.replace(/\\s/g, '');\n          headerContextualMenuItem = { ...sectionProps.title, id };\n          ariaLabelledby = id;\n        }\n\n        if (headerContextualMenuItem) {\n          groupProps = {\n            role: 'group',\n            'aria-labelledby': ariaLabelledby,\n          };\n          headerItem = renderHeaderMenuItem(\n            headerContextualMenuItem,\n            itemClassNames,\n            menuClassNames,\n            index,\n            hasCheckmarks,\n            hasIcons,\n          );\n        }\n      }\n\n      if (sectionProps.items && sectionProps.items.length > 0) {\n        let correctedIndex = 0;\n        return (\n          <li role=\"presentation\" key={sectionProps.key || sectionItem.key || `section-${index}`}>\n            <div {...groupProps}>\n              <ul className={menuClassNames.list} role=\"presentation\">\n                {sectionProps.topDivider && renderSeparator(index, itemClassNames, true, true)}\n                {headerItem && renderListItem(headerItem, sectionItem.key || index, itemClassNames, sectionItem.title)}\n                {sectionProps.items.map((contextualMenuItem, itemsIndex) => {\n                  const menuItem = renderMenuItem(\n                    contextualMenuItem,\n                    itemsIndex,\n                    correctedIndex,\n                    getItemCount(sectionProps.items),\n                    hasCheckmarks,\n                    hasIcons,\n                    menuClassNames,\n                  );\n                  if (\n                    contextualMenuItem.itemType !== ContextualMenuItemType.Divider &&\n                    contextualMenuItem.itemType !== ContextualMenuItemType.Header\n                  ) {\n                    const indexIncrease = contextualMenuItem.customOnRenderListLength\n                      ? contextualMenuItem.customOnRenderListLength\n                      : 1;\n                    correctedIndex += indexIncrease;\n                  }\n                  return menuItem;\n                })}\n                {sectionProps.bottomDivider && renderSeparator(index, itemClassNames, false, true)}\n              </ul>\n            </div>\n          </li>\n        );\n      }\n    };\n\n    const renderListItem = (\n      content: React.ReactNode,\n      key: string | number,\n      classNames: IMenuItemClassNames, // eslint-disable-line deprecation/deprecation\n      title?: string,\n    ) => {\n      return (\n        <li role=\"presentation\" title={title} key={key} className={classNames.item}>\n          {content}\n        </li>\n      );\n    };\n\n    const renderSeparator = (\n      index: number,\n      classNames: IMenuItemClassNames, // eslint-disable-line deprecation/deprecation\n      top?: boolean,\n      fromSection?: boolean,\n    ): React.ReactNode => {\n      if (fromSection || index > 0) {\n        return (\n          <li\n            role=\"separator\"\n            key={'separator-' + index + (top === undefined ? '' : top ? '-top' : '-bottom')}\n            className={classNames.divider}\n            aria-hidden=\"true\"\n          />\n        );\n      }\n      return null;\n    };\n\n    const renderNormalItem = (\n      item: IContextualMenuItem,\n      classNames: IMenuItemClassNames, // eslint-disable-line deprecation/deprecation\n      index: number,\n      focusableElementIndex: number,\n      totalItemCount: number,\n      hasCheckmarks: boolean,\n      hasIcons: boolean,\n    ): React.ReactNode => {\n      if (item.onRender) {\n        return item.onRender(\n          { 'aria-posinset': focusableElementIndex + 1, 'aria-setsize': totalItemCount, ...item },\n          dismiss,\n        );\n      }\n\n      const { contextualMenuItemAs } = props;\n\n      const commonProps = {\n        item,\n        classNames,\n        index,\n        focusableElementIndex,\n        totalItemCount,\n        hasCheckmarks,\n        hasIcons,\n        contextualMenuItemAs,\n        onItemMouseEnter: onItemMouseEnterBase,\n        onItemMouseLeave: onMouseItemLeave,\n        onItemMouseMove: onItemMouseMoveBase,\n        onItemMouseDown,\n        executeItemClick,\n        onItemKeyDown,\n        expandedMenuItemKey,\n        openSubMenu,\n        dismissSubMenu: onSubMenuDismiss,\n        dismissMenu: dismiss,\n      } as const;\n\n      if (item.href) {\n        return <ContextualMenuAnchor {...commonProps} onItemClick={onAnchorClick} />;\n      }\n\n      if (item.split && hasSubmenu(item)) {\n        return (\n          <ContextualMenuSplitButton\n            {...commonProps}\n            onItemClick={onItemClick}\n            onItemClickBase={onItemClickBase}\n            onTap={cancelSubMenuTimer}\n          />\n        );\n      }\n\n      return <ContextualMenuButton {...commonProps} onItemClick={onItemClick} onItemClickBase={onItemClickBase} />;\n    };\n\n    const renderHeaderMenuItem = (\n      item: IContextualMenuItem,\n      // eslint-disable-next-line deprecation/deprecation\n      itemClassNames: IMenuItemClassNames,\n      // eslint-disable-next-line deprecation/deprecation\n      menuClassNames: IProcessedStyleSet<IContextualMenuStyles> | IContextualMenuClassNames,\n      index: number,\n      hasCheckmarks: boolean,\n      hasIcons: boolean,\n    ): React.ReactNode => {\n      const { contextualMenuItemAs: ChildrenRenderer = ContextualMenuItem } = props;\n      const { itemProps, id } = item;\n      const divHtmlProperties =\n        itemProps && getNativeProps<React.HTMLAttributes<HTMLDivElement>>(itemProps, divProperties);\n      return (\n        // eslint-disable-next-line deprecation/deprecation\n        <div id={id} className={menuClassNames.header} {...divHtmlProperties} style={item.style}>\n          <ChildrenRenderer\n            item={item}\n            classNames={itemClassNames}\n            index={index}\n            onCheckmarkClick={hasCheckmarks ? onItemClick : undefined}\n            hasIcons={hasIcons}\n            {...itemProps}\n          />\n        </div>\n      );\n    };\n    //#endregion\n\n    //#region Main render\n    let { isBeakVisible } = props;\n\n    const {\n      items,\n      labelElementId,\n      id,\n      className,\n      beakWidth,\n      directionalHint,\n      directionalHintForRTL,\n      alignTargetEdge,\n      gapSpace,\n      coverTarget,\n      ariaLabel,\n      doNotLayer,\n      target,\n      bounds,\n      useTargetWidth,\n      useTargetAsMinWidth,\n      directionalHintFixed,\n      shouldFocusOnMount,\n      shouldFocusOnContainer,\n      title,\n      styles,\n      theme,\n      calloutProps,\n      onRenderSubMenu = onDefaultRenderSubMenu,\n      onRenderMenuList = (\n        menuListProps: IContextualMenuListProps,\n        defaultRender?: IRenderFunction<IContextualMenuListProps>,\n      ) => onDefaultRenderMenuList(menuListProps, classNames, defaultRender),\n      focusZoneProps,\n      // eslint-disable-next-line deprecation/deprecation\n      getMenuClassNames,\n    } = props;\n\n    const classNames = getMenuClassNames\n      ? getMenuClassNames(theme!, className)\n      : getClassNames(styles, {\n          theme: theme!,\n          className,\n        });\n\n    const hasIcons = itemsHaveIcons(items);\n\n    function itemsHaveIcons(contextualMenuItems: IContextualMenuItem[]): boolean {\n      for (const item of contextualMenuItems) {\n        if (item.iconProps) {\n          return true;\n        }\n\n        if (\n          item.itemType === ContextualMenuItemType.Section &&\n          item.sectionProps &&\n          itemsHaveIcons(item.sectionProps.items)\n        ) {\n          return true;\n        }\n      }\n\n      return false;\n    }\n\n    const adjustedFocusZoneProps = {\n      direction: FocusZoneDirection.vertical,\n      handleTabKey: FocusZoneTabbableElements.all,\n      isCircularNavigation: true,\n      ...focusZoneProps,\n      className: css(classNames.root, props.focusZoneProps?.className),\n    };\n\n    const hasCheckmarks = canAnyMenuItemsCheck(items);\n    const submenuProps = expandedMenuItemKey && props.hidden !== true ? getSubmenuProps() : null;\n\n    isBeakVisible = isBeakVisible === undefined ? responsiveMode! <= ResponsiveMode.medium : isBeakVisible;\n    /**\n     * When useTargetWidth is true, get the width of the target element and apply it for the context menu container\n     */\n    let contextMenuStyle: React.CSSProperties;\n    const targetAsHtmlElement = targetRef.current as HTMLElement;\n    if ((useTargetWidth || useTargetAsMinWidth) && targetAsHtmlElement && targetAsHtmlElement.offsetWidth) {\n      const targetBoundingRect = targetAsHtmlElement.getBoundingClientRect();\n      const targetWidth = targetBoundingRect.width - 2; /* Accounts for 1px border */\n\n      if (useTargetWidth) {\n        contextMenuStyle = {\n          width: targetWidth,\n        };\n      } else if (useTargetAsMinWidth) {\n        contextMenuStyle = {\n          minWidth: targetWidth,\n        };\n      }\n    }\n\n    // The menu should only return if items were provided, if no items were provided then it should not appear.\n    if (items && items.length > 0) {\n      const totalItemCount = getItemCount(items);\n\n      const calloutStyles = classNames.subComponentStyles\n        ? (classNames.subComponentStyles.callout as IStyleFunctionOrObject<\n            ICalloutContentStyleProps,\n            ICalloutContentStyles\n          >)\n        : undefined;\n\n      return (\n        <MenuContext.Consumer>\n          {menuContext => (\n            <Callout\n              styles={calloutStyles}\n              onRestoreFocus={tryFocusPreviousActiveElement}\n              {...calloutProps}\n              target={target || (menuContext.target as IContextualMenuProps['target'])}\n              isBeakVisible={isBeakVisible}\n              beakWidth={beakWidth}\n              directionalHint={directionalHint}\n              directionalHintForRTL={directionalHintForRTL}\n              gapSpace={gapSpace}\n              coverTarget={coverTarget}\n              doNotLayer={doNotLayer}\n              className={css('ms-ContextualMenu-Callout', calloutProps && calloutProps.className)}\n              setInitialFocus={shouldFocusOnMount}\n              onDismiss={props.onDismiss || menuContext.onDismiss}\n              onScroll={onScroll}\n              bounds={bounds}\n              directionalHintFixed={directionalHintFixed}\n              alignTargetEdge={alignTargetEdge}\n              hidden={props.hidden || menuContext.hidden}\n              ref={forwardedRef}\n            >\n              <div\n                style={contextMenuStyle}\n                ref={hostElement}\n                id={id}\n                className={classNames.container}\n                tabIndex={shouldFocusOnContainer ? 0 : -1}\n                onKeyDown={onMenuKeyDown}\n                onKeyUp={onKeyUp}\n                onFocusCapture={onMenuFocusCapture}\n                aria-label={ariaLabel}\n                aria-labelledby={labelElementId}\n                role={'menu'}\n              >\n                {title && <div className={classNames.title}> {title} </div>}\n                {items && items.length\n                  ? renderFocusZone(\n                      onRenderMenuList(\n                        {\n                          ariaLabel,\n                          items,\n                          totalItemCount,\n                          hasCheckmarks,\n                          hasIcons,\n                          defaultMenuItemRenderer: (item: IContextualMenuItemRenderProps) =>\n                            defaultMenuItemRenderer(item, classNames),\n                          labelElementId,\n                        },\n                        (\n                          menuListProps: IContextualMenuListProps,\n                          defaultRender?: IRenderFunction<IContextualMenuListProps>,\n                        ) => onDefaultRenderMenuList(menuListProps, classNames, defaultRender),\n                      ),\n                      adjustedFocusZoneProps,\n                    )\n                  : null}\n                {submenuProps && onRenderSubMenu(submenuProps, onDefaultRenderSubMenu)}\n              </div>\n              <FocusRects />\n            </Callout>\n          )}\n        </MenuContext.Consumer>\n      );\n    } else {\n      return null;\n    }\n    //#endregion\n  }),\n  (prevProps, newProps) => {\n    if (!newProps.shouldUpdateWhenHidden && prevProps.hidden && newProps.hidden) {\n      // Do not update when hidden.\n      return true;\n    }\n\n    return shallowCompare(prevProps, newProps);\n  },\n);\nContextualMenuBase.displayName = 'ContextualMenuBase';\n\n/**\n * Returns true if the key for the event is alt (Mac option) or meta (Mac command).\n */\nfunction isAltOrMeta(ev: React.KeyboardEvent<HTMLElement>): boolean {\n  // eslint-disable-next-line deprecation/deprecation\n  return ev.which === KeyCodes.alt || ev.key === 'Meta';\n}\n\nfunction onItemMouseDown(item: IContextualMenuItem, ev: React.MouseEvent<HTMLElement>): void {\n  item.onMouseDown?.(item, ev);\n}\n\nfunction onDefaultRenderSubMenu(\n  subMenuProps: IContextualMenuProps,\n  defaultRender?: IRenderFunction<IContextualMenuProps>,\n): JSX.Element {\n  throw Error(\n    'ContextualMenuBase: onRenderSubMenu callback is null or undefined. ' +\n      'Please ensure to set `onRenderSubMenu` property either manually or with `styled` helper.',\n  );\n}\n\n/**\n * Returns the item that matches a given key if any.\n * @param key - The key of the item to match\n * @param items - The items to look for the key\n */\nfunction findItemByKeyFromItems(key: string, items: IContextualMenuItem[]): IContextualMenuItem | undefined {\n  for (const item of items) {\n    if (item.itemType === ContextualMenuItemType.Section && item.sectionProps) {\n      const match = findItemByKeyFromItems(key, item.sectionProps.items);\n      if (match) {\n        return match;\n      }\n    } else if (item.key && item.key === key) {\n      return item;\n    }\n  }\n}\n\nfunction getOnClickWithOverrideTarget(\n  onClick:\n    | ((\n        ev?: React.MouseEvent<HTMLElement, MouseEvent> | React.KeyboardEvent<HTMLElement> | undefined,\n        item?: IContextualMenuItem | undefined,\n      ) => boolean | void)\n    | undefined,\n  target: Target | undefined,\n) {\n  return onClick\n    ? (\n        ev?: React.MouseEvent<HTMLElement, MouseEvent> | React.KeyboardEvent<HTMLElement> | undefined,\n        item?: IContextualMenuItem | undefined,\n      ) => {\n        overrideTarget(ev, target);\n\n        return onClick(ev, item);\n      }\n    : onClick;\n}\n\nfunction overrideTarget(\n  ev?: React.MouseEvent<HTMLElement, MouseEvent> | React.KeyboardEvent<HTMLElement> | undefined,\n  target?: Target,\n): void {\n  if (ev && target) {\n    ev.persist();\n\n    if (target instanceof Event) {\n      ev.target = target.target as HTMLElement;\n    } else if (target instanceof Element) {\n      ev.target = target;\n    }\n  }\n}\n", "import * as React from 'react';\nimport { DirectionalHint } from '../../common/DirectionalHint';\nimport type { IFocusZoneProps } from '../../FocusZone';\nimport type { IIconProps } from '../../Icon';\nimport type { ICalloutProps, ICalloutContentStyleProps } from '../../Callout';\nimport type { ITheme, IStyle } from '../../Styling';\nimport type { IButtonStyles } from '../../Button';\nimport type { IRefObject, IBaseProps, IRectangle, IRenderFunction, IStyleFunctionOrObject } from '../../Utilities';\nimport type { IWithResponsiveModeState } from '../../ResponsiveMode';\nimport type { IContextualMenuClassNames, IMenuItemClassNames } from './ContextualMenu.classNames';\nimport type { IVerticalDividerClassNames } from '../Divider/VerticalDivider.types';\nimport type {\n  IContextualMenuItemProps,\n  IContextualMenuRenderItem,\n  IContextualMenuItemStyleProps,\n  IContextualMenuItemRenderFunctions,\n} from './ContextualMenuItem.types';\nimport type { IKeytipProps } from '../../Keytip';\nimport type { Target } from '@fluentui/react-hooks';\nimport type { IPopupRestoreFocusParams } from '../../Popup';\n\nexport { DirectionalHint } from '../../common/DirectionalHint';\n\n/**\n * {@docCategory ContextualMenu}\n */\nexport enum ContextualMenuItemType {\n  Normal = 0,\n  Divider = 1,\n  Header = 2,\n  Section = 3,\n}\n\n/**\n * {@docCategory ContextualMenu}\n */\nexport interface IContextualMenu {}\n\n/**\n * {@docCategory ContextualMenu}\n */\nexport interface IContextualMenuProps\n  extends IBaseProps<IContextualMenu>,\n    React.RefAttributes<HTMLDivElement>,\n    // eslint-disable-next-line deprecation/deprecation\n    IWithResponsiveModeState {\n  /**\n   * Optional callback to access the IContextualMenu interface. Use this instead of ref for accessing\n   * the public methods and properties of the component.\n   * @deprecated ContextualMenu has no imperative methods, so componentRef no longer returns a ref\n   */\n  componentRef?: IRefObject<IContextualMenu>;\n\n  /**\n   * Call to provide customized styling that will layer on top of the variant rules.\n   */\n  styles?: IStyleFunctionOrObject<IContextualMenuStyleProps, IContextualMenuStyles>;\n\n  /**\n   * Theme provided by higher-order component.\n   */\n  theme?: ITheme;\n\n  /**\n   * Additional CSS class to apply to the ContextualMenu.\n   */\n  className?: string;\n\n  /**\n   * The target that the ContextualMenu should try to position itself based on.\n   * It can be either an element, a query selector string resolving to a valid element,\n   * or a MouseEvent. If a MouseEvent is given, the origin point of the event will be used.\n   */\n  target?: Target;\n\n  /**\n   * How the menu should be positioned\n   * @defaultvalue DirectionalHint.bottomAutoEdge\n   */\n  directionalHint?: DirectionalHint;\n\n  /**\n   * How the menu should be positioned in RTL layouts.\n   * If not specified, a mirror of `directionalHint` will be used.\n   */\n  directionalHintForRTL?: DirectionalHint;\n\n  /**\n   * The gap between the ContextualMenu and the target\n   * @defaultvalue 0\n   */\n  gapSpace?: number;\n\n  /**\n   * The width of the beak.\n   * @defaultvalue 16\n   */\n  beakWidth?: number;\n\n  /**\n   * If true the context menu will render as the same width as the target element\n   * @defaultvalue false\n   */\n  useTargetWidth?: boolean;\n\n  /**\n   * If true the context menu will have a minimum width equal to the width of the target element\n   * @defaultvalue false\n   */\n  useTargetAsMinWidth?: boolean;\n\n  /**\n   * The bounding rectangle (or callback that returns a rectangle) which the contextual menu can appear in.\n   */\n  bounds?: IRectangle | ((target?: Target, targetWindow?: Window) => IRectangle | undefined);\n\n  /**\n   * If true then the beak is visible. If false it will not be shown.\n   */\n  isBeakVisible?: boolean;\n\n  /**\n   * If true, the menu will be positioned to cover the target.\n   * If false, it will be positioned next to the target.\n   * @defaultvalue false\n   */\n  coverTarget?: boolean;\n\n  /**\n   * If true the positioning logic will prefer to flip edges rather than to nudge the rectangle to fit within bounds,\n   * thus making sure the element aligns perfectly with target's alignment edge\n   */\n  alignTargetEdge?: boolean;\n\n  /**\n   * Menu items to display.\n   */\n  items: IContextualMenuItem[];\n\n  /**\n   * Used as `aria-labelledby` for the menu element inside the callout.\n   */\n  labelElementId?: string;\n\n  /**\n   * Whether to focus on the menu when mounted.\n   * @defaultvalue true\n   */\n  shouldFocusOnMount?: boolean;\n\n  /**\n   * Whether to focus on the contextual menu container (as opposed to the first menu item).\n   *\n   * Avoid using as it breaks the default focus behaviour when using assistive technologies.\n   */\n  shouldFocusOnContainer?: boolean;\n\n  /**\n   * Callback when the ContextualMenu tries to close. If `dismissAll` is true then all\n   * submenus will be dismissed.\n   */\n  onDismiss?: (ev?: Event | React.MouseEvent | React.KeyboardEvent, dismissAll?: boolean) => void;\n\n  /**\n   * Click handler which is invoked if `onClick` is not passed for individual contextual\n   * menu item.\n   * Returning true will dismiss the menu even if `ev.preventDefault()` was called.\n   */\n  onItemClick?: (\n    ev?: React.MouseEvent<HTMLElement> | React.KeyboardEvent<HTMLElement>,\n    item?: IContextualMenuItem,\n  ) => boolean | void;\n\n  /**\n   * Whether this menu is a submenu of another menu.\n   */\n  isSubMenu?: boolean;\n\n  /**\n   * ID for the ContextualMenu's root element (inside the callout).\n   * Should be used for `aria-owns` and other such uses, rather than direct reference for programmatic purposes.\n   */\n  id?: string;\n\n  /**\n   * Accessible label for the ContextualMenu's root element (inside the callout).\n   */\n  ariaLabel?: string;\n\n  /**\n   * If true do not render on a new layer. If false render on a new layer.\n   * @defaultvalue false\n   */\n  doNotLayer?: boolean;\n\n  /**\n   * If true the position will not change sides in an attempt to fit the ContextualMenu within bounds.\n   * It will still attempt to align it to whatever bounds are given.\n   * @defaultvalue false\n   */\n  directionalHintFixed?: boolean;\n\n  /**\n   * Callback for when the menu has been opened.\n   */\n  onMenuOpened?: (contextualMenu?: IContextualMenuProps) => void;\n\n  /**\n   * Callback for when the menu is being closed (removing from the DOM).\n   */\n  onMenuDismissed?: (contextualMenu?: IContextualMenuProps) => void;\n\n  /**\n   * Additional custom props for the Callout.\n   */\n  calloutProps?: ICalloutProps;\n\n  /**\n   * Title to be displayed at the top of the menu, above the items.\n   */\n  title?: string;\n\n  /**\n   * Method to provide the classnames to style the contextual menu.\n   * @deprecated Use `styles` instead to leverage mergeStyles API.\n   */\n  // eslint-disable-next-line deprecation/deprecation\n  getMenuClassNames?: (theme: ITheme, className?: string) => IContextualMenuClassNames;\n\n  /** Custom render function for a submenu. */\n  onRenderSubMenu?: IRenderFunction<IContextualMenuProps>;\n\n  /**\n   * Method to override the render of the list of menu items.\n   */\n  onRenderMenuList?: IRenderFunction<IContextualMenuListProps>;\n\n  /**\n   * Method to wrap menu items. Gives the ability to wrap a custom\n   * tooltip to each menu item button.\n   */\n  onRenderContextualMenuItem?: IRenderFunction<IContextualMenuItem>;\n\n  /**\n   * Delay (in milliseconds) to wait before expanding / dismissing a submenu on mouseEnter or mouseLeave\n   */\n  subMenuHoverDelay?: number;\n\n  /**\n   * Custom component to use for rendering individual menu items.\n   * @defaultvalue ContextualMenuItem\n   */\n  contextualMenuItemAs?:\n    | React.ComponentClass<IContextualMenuItemProps>\n    | React.FunctionComponent<IContextualMenuItemProps>;\n\n  /**\n   * Props to pass down to the FocusZone.\n   * NOTE: the default FocusZoneDirection will be used unless a direction\n   * is specified in the focusZoneProps (even if other focusZoneProps are defined)\n   * @defaultvalue \\{ direction: FocusZoneDirection.vertical \\}\n   */\n  focusZoneProps?: IFocusZoneProps;\n\n  /**\n   * Custom component to use for rendering the focus zone (the root).\n   * @defaultValue FocusZone\n   */\n  focusZoneAs?: React.ComponentClass<IFocusZoneProps> | React.FunctionComponent<IFocusZoneProps>;\n\n  /**\n   * If true, renders the ContextualMenu in a hidden state.\n   * Use this flag, rather than rendering a ContextualMenu conditionally based on visibility,\n   * to improve rendering performance when it becomes visible.\n   * Note: When ContextualMenu is hidden its content will not be rendered. It will only render\n   * once the ContextualMenu is visible.\n   */\n  hidden?: boolean;\n\n  /**\n   * If true, the menu will be updated even when `hidden=true`. Note that this will consume\n   * resources to update even when nothing is being shown to the user. This might be helpful if\n   * your updates are small and you want the menu to display quickly when `hidden` is set to false.\n   */\n  shouldUpdateWhenHidden?: boolean;\n\n  /**\n   * If true, the contextual menu will not be updated until focus enters the menu via other means.\n   * This will only result in different behavior when `shouldFocusOnMount = false`.\n   */\n  delayUpdateFocusOnHover?: boolean;\n\n  /**\n   * Called when the component is unmounting, and focus needs to be restored. If this is provided,\n   * focus will not be restored automatically, and you'll need to call `params.originalElement.focus()`.\n   */\n  onRestoreFocus?: (params: IPopupRestoreFocusParams) => void;\n}\n\n/**\n * {@docCategory ContextualMenu}\n */\nexport interface IContextualMenuItemRenderProps extends IContextualMenuItem {\n  index: number;\n  focusableElementIndex: number;\n  totalItemCount: number;\n  hasCheckmarks: boolean;\n  hasIcons: boolean;\n}\n\n/**\n * {@docCategory ContextualMenu}\n */\nexport interface IContextualMenuListProps {\n  items: IContextualMenuItem[];\n  totalItemCount: number;\n  hasCheckmarks: boolean;\n  hasIcons: boolean;\n  defaultMenuItemRenderer: (item: IContextualMenuItemRenderProps) => React.ReactNode;\n  ariaLabel?: string;\n  labelElementId?: string;\n  role?: string;\n}\n\n/**\n * {@docCategory ContextualMenu}\n */\nexport interface IContextualMenuItem {\n  /**\n   * Optional callback to access the IContextualMenuRenderItem interface.\n   * This will get passed down to ContextualMenuItem.\n   */\n  componentRef?: IRefObject<IContextualMenuRenderItem>;\n\n  /**\n   * Unique id to identify the item\n   */\n  key: string;\n\n  /**\n   * Text of the menu item.\n   * If a standard hyphen (-) is passed in, then the item will be rendered as a divider.\n   * If a dash must appear as text, use an emdash (—), figuredash (‒), or minus symbol (−) instead.\n   */\n  text?: string;\n\n  /**\n   * Secondary description for the menu item to display\n   */\n  secondaryText?: string;\n\n  itemType?: ContextualMenuItemType;\n\n  /**\n   * Props for an icon to display next to the item.\n   */\n  iconProps?: IIconProps;\n\n  /**\n   * Custom render function for the menu item icon.\n   * iconProps must be present on at least one item for onRenderIcon to be called.\n   */\n  onRenderIcon?: IRenderFunction<IContextualMenuItemProps>;\n\n  /**\n   * Props for the Icon used for the chevron.\n   */\n  submenuIconProps?: IIconProps;\n\n  /**\n   * Whether the menu item is disabled\n   * @defaultvalue false\n   */\n  disabled?: boolean;\n\n  /**\n   * If the menu item is a split button, this prop disables purely the primary action of the button.\n   * @defaultvalue false\n   */\n  primaryDisabled?: boolean;\n\n  /**\n   * @deprecated Not used\n   */\n  shortCut?: string;\n\n  /**\n   * Whether or not this menu item can be checked\n   * @defaultvalue false\n   */\n  canCheck?: boolean;\n\n  /**\n   * Whether or not this menu item is currently checked.\n   * @defaultvalue false\n   */\n  checked?: boolean;\n\n  /**\n   * Whether or not this menu item is a splitButton.\n   * @defaultvalue false\n   */\n  split?: boolean;\n\n  /**\n   * Any custom data the developer wishes to associate with the menu item.\n   */\n  data?: any;\n\n  /**\n   * Callback for when the menu item is invoked. If `ev.preventDefault()` is called in `onClick`,\n   * the click will not close the menu.\n   *\n   * Only for ContextualMenu items, returning true will dismiss the menu even if `ev.preventDefault()`\n   * was called (does not apply for button or CommandBar sub-menu items).\n   */\n  onClick?: (\n    ev?: React.MouseEvent<HTMLElement> | React.KeyboardEvent<HTMLElement>,\n    item?: IContextualMenuItem,\n  ) => boolean | void;\n\n  /**\n   * Navigate to this URL when the menu item is clicked.\n   */\n  href?: string;\n\n  /**\n   * Target window when using `href`.\n   */\n  target?: string;\n\n  /**\n   * Link relation setting when using `href`.\n   * If `target` is `_blank`, `rel` is defaulted to a value to prevent clickjacking.\n   */\n  rel?: string;\n\n  /**\n   * Properties to apply to a submenu to this item.\n   *\n   * The ContextualMenu will provide default values for `target`, `onDismiss`, `isSubMenu`,\n   * `id`, `shouldFocusOnMount`, `directionalHint`, `className`, and `gapSpace`, all of which\n   * can be overridden.\n   */\n  subMenuProps?: IContextualMenuProps;\n\n  /**\n   * Method to provide the classnames to style the individual items inside a menu.\n   * @deprecated Use `styles` prop of `IContextualMenuItemProps` to leverage mergeStyles API.\n   */\n  getItemClassNames?: (\n    theme: ITheme,\n    disabled: boolean,\n    expanded: boolean,\n    checked: boolean,\n    isAnchorLink: boolean,\n    knownIcon: boolean,\n    itemClassName?: string,\n    dividerClassName?: string,\n    iconClassName?: string,\n    subMenuClassName?: string,\n    primaryDisabled?: boolean,\n  ) => // eslint-disable-next-line deprecation/deprecation\n  IMenuItemClassNames;\n\n  /**\n   * Optional IContextualMenuItemProps overrides to customize behaviors such as item styling via `styles`.\n   */\n  itemProps?: Partial<IContextualMenuItemProps>;\n\n  /**\n   * Method to provide the classnames to style the Vertical Divider of a split button inside a menu.\n   * Default value is the `getSplitButtonVerticalDividerClassNames` func defined in `ContextualMenu.classnames.ts`.\n   * @defaultvalue getSplitButtonVerticalDividerClassNames\n   */\n  // eslint-disable-next-line deprecation/deprecation\n  getSplitButtonVerticalDividerClassNames?: (theme: ITheme) => IVerticalDividerClassNames;\n\n  /**\n   * Properties to apply to render this item as a section.\n   * This prop is mutually exclusive with `subMenuProps`.\n   */\n  sectionProps?: IContextualMenuSection;\n\n  /**\n   * Additional CSS class to apply to the menu item.\n   */\n  className?: string;\n\n  /**\n   * Additional styles to apply to the menu item\n   * @deprecated Use `styles` instead to leverage mergeStyles API.\n   */\n  style?: React.CSSProperties;\n\n  /**\n   * Custom accessible label for the element.\n   * If no override is specified, the `aria-label` attribute will contain the item name.\n   */\n  ariaLabel?: string;\n\n  /**\n   * Title (tooltip) text displayed when hovering over an item.\n   */\n  title?: string;\n\n  /**\n   * Method to custom render this menu item.\n   * For keyboard accessibility, the top-level rendered item should be a focusable element\n   * (like an anchor or a button) or have the `data-is-focusable` property set to true.\n   *\n   * @param item - Item to render. Will typically be of type `IContextualMenuItem`.\n   * (When rendering a command bar item, will be `ICommandBarItemProps`.)\n   * @param dismissMenu - Function to dismiss the menu. Can be used to ensure that a custom menu\n   * item click dismisses the menu. (Will be undefined if rendering a command bar item.)\n   */\n  onRender?: (item: any, dismissMenu: (ev?: any, dismissAll?: boolean) => void) => React.ReactNode;\n\n  /**\n   * Method to customize sub-components rendering of this menu item.\n   *\n   * @param props - Props used to pass into render functions\n   * @param defaultRenders - Default render functions that renders default sub-components\n   */\n  onRenderContent?: (\n    props: IContextualMenuItemProps,\n    defaultRenders: IContextualMenuItemRenderFunctions,\n  ) => React.ReactNode;\n\n  /**\n   * A function to be executed on mouse down. This is executed before an `onClick` event and can\n   * be used to interrupt native on click events as well. The click event should still handle\n   * the commands. This should only be used in special cases when react and non-react are mixed.\n   */\n  onMouseDown?: (item: IContextualMenuItem, event: React.MouseEvent<HTMLElement>) => void;\n\n  /**\n   * Optional override for the menu button's role.\n   * @default `menuitem` or `menuitemcheckbox`\n   */\n  role?: string;\n\n  /**\n   * When rendering a custom menu component that is passed in, the component might also be a list of\n   * elements. We want to keep track of the correct index our menu is using based off of\n   * the length of the custom list. It is up to the user to increment the count for their list.\n   */\n  customOnRenderListLength?: number;\n\n  /**\n   * Keytip for this contextual menu item\n   */\n  keytipProps?: IKeytipProps;\n\n  /**\n   * @deprecated Use subMenuProps.items instead.\n   */\n  items?: IContextualMenuItem[];\n\n  /**\n   * Any additional properties to use when custom rendering menu items.\n   */\n  [propertyName: string]: any;\n\n  /**\n   * Detailed description of the menu item for the benefit of screen readers.\n   */\n  ariaDescription?: string;\n\n  /**\n   * ID of the element that contains additional detailed descriptive information for screen readers\n   */\n  ariaDescribedBy?: string;\n\n  /**\n   * @deprecated No longer used. All contextual menu items are now focusable when disabled.\n   */\n  inactive?: boolean;\n\n  /**\n   * Text of the menu item.\n   * @deprecated Use `text` instead.\n   */\n  name?: string;\n\n  /**\n   * Flag which indicates that, when the item is clicked, the 'target' for the click event should be\n   * overridden to reflect the launch target from the root menu.\n   * This avoids a situation where the 'target' of the event may wind up detached from the DOM\n   * when the menu is dismissed in response to the click.\n   */\n  preferMenuTargetAsEventTarget?: boolean;\n}\n\n/**\n * {@docCategory ContextualMenu}\n */\nexport interface IContextualMenuSection extends React.ClassAttributes<any> {\n  /**\n   * The items to include inside the section.\n   */\n  items: IContextualMenuItem[];\n\n  /**\n   * The optional section title.\n   */\n  title?: string | IContextualMenuItem;\n\n  /**\n   * If set to true, the section will display a divider at the top of the section.\n   */\n  topDivider?: boolean;\n\n  /**\n   * If set to true, the section will display a divider at the bottom of the section.\n   */\n  bottomDivider?: boolean;\n}\n\n/**\n * {@docCategory ContextualMenu}\n */\nexport interface IMenuItemStyles extends IButtonStyles {\n  /**\n   * Styles for a menu item that is an anchor link.\n   */\n  item?: IStyle;\n\n  /**\n   * Styles for the content inside the button/link of the menuItem.\n   */\n  linkContent?: IStyle;\n\n  /**\n   * Styles for a menu item that is an anchor link.\n   */\n  anchorLink?: IStyle;\n\n  /**\n   * Default icon color style for known icons.\n   */\n  iconColor?: IStyle;\n\n  /**\n   * Default style for checkmark icons.\n   */\n  checkmarkIcon?: IStyle;\n\n  /**\n   * Styles for the submenu icon of a menu item.\n   */\n  subMenuIcon?: IStyle;\n\n  /**\n   * Styles for a divider item of a ContextualMenu.\n   */\n  divider?: IStyle;\n}\n\n/**\n * {@docCategory ContextualMenu}\n */\nexport interface IContextualMenuStyleProps {\n  theme: ITheme;\n\n  className?: string;\n\n  // Insert ContextualMenu style props below\n}\n\n/**\n * {@docCategory ContextualMenu}\n */\nexport interface IContextualMenuStyles {\n  /**\n   * Style override for the contextual menu title.\n   */\n  title: IStyle;\n\n  /**\n   * Style for the container which parents all menu items.\n   */\n  container: IStyle;\n\n  /**\n   * Base styles for the root element of all ContextualMenus.\n   */\n  root: IStyle;\n\n  /**\n   * Styles for the header item of a ContextualMenu\n   */\n  header: IStyle;\n\n  /**\n   * Styles for the list that contains all menuItems.\n   */\n  list: IStyle;\n\n  /**\n   * SubComponent styles.\n   */\n  subComponentStyles: IContextualMenuSubComponentStyles;\n}\n\n/**\n * {@docCategory ContextualMenu}\n */\nexport interface IContextualMenuSubComponentStyles {\n  /** Styles for the callout that hosts the ContextualMenu options. */\n  callout: IStyleFunctionOrObject<ICalloutContentStyleProps, any>;\n\n  /** Styles for each menu item. */\n  menuItem: IStyleFunctionOrObject<IContextualMenuItemStyleProps, any>;\n}\n", "import type { IContextualMenuItem } from '../../index';\n\n/**\n * Determines the effective checked state of a menu item.\n *\n * @param item {IContextualMenuItem} to get the check state of.\n * @returns {true} if the item is checked.\n * @returns {false} if the item is unchecked.\n * @returns {null} if the item is not checkable.\n */\nexport function getIsChecked(item: IContextualMenuItem): boolean | null {\n  if (item.canCheck) {\n    return !!(item.isChecked || item.checked);\n  }\n\n  if (typeof item.isChecked === 'boolean') {\n    return item.isChecked;\n  }\n\n  if (typeof item.checked === 'boolean') {\n    return item.checked;\n  }\n\n  // Item is not checkable.\n  return null;\n}\n\nexport function hasSubmenu(item: IContextualMenuItem): boolean {\n  // eslint-disable-next-line deprecation/deprecation\n  return !!(item.subMenuProps || item.items);\n}\n\nexport function isItemDisabled(item: IContextualMenuItem): boolean {\n  return !!(item.isDisabled || item.disabled);\n}\n\nexport function getMenuItemAriaRole(item: IContextualMenuItem): string {\n  const isChecked = getIsChecked(item);\n  const canCheck: boolean = isChecked !== null;\n  return canCheck ? 'menuitemcheckbox' : 'menuitem';\n}\n", "import * as React from 'react';\nimport { hasSubmenu, getIsChecked } from '../../utilities/contextualMenu/index';\nimport { getRTL, initializeComponentRef } from '../../Utilities';\nimport { Icon } from '../../Icon';\nimport type { IContextualMenuItemProps, IContextualMenuItemRenderFunctions } from './ContextualMenuItem.types';\n\nconst defaultIconRenderer = (props: IContextualMenuItemProps) => {\n  const { item, classNames } = props;\n  const { iconProps } = item;\n  return <Icon {...iconProps} className={classNames.icon} />;\n};\n\nconst renderItemIcon = (props: IContextualMenuItemProps) => {\n  const { item, hasIcons } = props;\n  if (!hasIcons) {\n    return null;\n  }\n\n  if (item.onRenderIcon) {\n    return item.onRenderIcon(props, defaultIconRenderer);\n  }\n\n  return defaultIconRenderer(props);\n};\n\nconst renderCheckMarkIcon = ({ onCheckmarkClick, item, classNames }: IContextualMenuItemProps) => {\n  const isItemChecked = getIsChecked(item);\n  if (onCheckmarkClick) {\n    // Ensures that the item is passed as the first argument to the checkmark click callback.\n    const onClick = (e: React.MouseEvent<HTMLElement>) => onCheckmarkClick(item, e);\n\n    return (\n      <Icon\n        iconName={item.canCheck !== false && isItemChecked ? 'CheckMark' : ''}\n        className={classNames.checkmarkIcon}\n        // eslint-disable-next-line react/jsx-no-bind\n        onClick={onClick}\n      />\n    );\n  }\n  return null;\n};\n\nconst renderItemName = ({ item, classNames }: IContextualMenuItemProps) => {\n  /* eslint-disable deprecation/deprecation */\n  if (item.text || item.name) {\n    return <span className={classNames.label}>{item.text || item.name}</span>;\n  }\n  /* eslint-enable deprecation/deprecation */\n  return null;\n};\n\nconst renderSecondaryText = ({ item, classNames }: IContextualMenuItemProps) => {\n  if (item.secondaryText) {\n    return <span className={classNames.secondaryText}>{item.secondaryText}</span>;\n  }\n  return null;\n};\n\nconst renderSubMenuIcon = ({ item, classNames, theme }: IContextualMenuItemProps) => {\n  if (hasSubmenu(item)) {\n    return (\n      <Icon\n        iconName={getRTL(theme) ? 'ChevronLeft' : 'ChevronRight'}\n        {...item.submenuIconProps}\n        className={classNames.subMenuIcon}\n      />\n    );\n  }\n  return null;\n};\n\nexport class ContextualMenuItemBase extends React.Component<IContextualMenuItemProps, {}> {\n  constructor(props: IContextualMenuItemProps) {\n    super(props);\n\n    initializeComponentRef(this);\n  }\n\n  public render() {\n    const { item, classNames } = this.props;\n    const renderContent = item.onRenderContent || this._renderLayout;\n\n    return (\n      <div className={item.split ? classNames.linkContentMenu : classNames.linkContent}>\n        {renderContent(this.props, {\n          renderCheckMarkIcon,\n          renderItemIcon,\n          renderItemName,\n          renderSecondaryText,\n          renderSubMenuIcon,\n        })}\n      </div>\n    );\n  }\n\n  public openSubMenu = (): void => {\n    const { item, openSubMenu, getSubmenuTarget } = this.props;\n    if (getSubmenuTarget) {\n      const submenuTarget = getSubmenuTarget();\n      if (hasSubmenu(item) && openSubMenu && submenuTarget) {\n        openSubMenu(item, submenuTarget);\n      }\n    }\n  };\n\n  public dismissSubMenu = (): void => {\n    const { item, dismissSubMenu } = this.props;\n    if (hasSubmenu(item) && dismissSubMenu) {\n      dismissSubMenu();\n    }\n  };\n\n  public dismissMenu = (dismissAll?: boolean): void => {\n    const { dismissMenu } = this.props;\n    if (dismissMenu) {\n      dismissMenu(undefined /* ev */, dismissAll);\n    }\n  };\n\n  private _renderLayout(props: IContextualMenuItemProps, defaultRenders: IContextualMenuItemRenderFunctions) {\n    return (\n      <>\n        {defaultRenders.renderCheckMarkIcon(props)}\n        {defaultRenders.renderItemIcon(props)}\n        {defaultRenders.renderItemName(props)}\n        {defaultRenders.renderSecondaryText(props)}\n        {defaultRenders.renderSubMenuIcon(props)}\n      </>\n    );\n  }\n}\n", "import { memoizeFunction } from '../../Utilities';\nimport { mergeStyleSets } from '../../Styling';\nimport type { ITheme } from '../../Styling';\nimport type { IVerticalDividerClassNames } from './VerticalDivider.types';\n\n/**\n * @deprecated use getStyles exported from VerticalDivider.styles.ts\n */\nexport const getDividerClassNames = memoizeFunction(\n  // eslint-disable-next-line deprecation/deprecation\n  (theme: ITheme): IVerticalDividerClassNames => {\n    return mergeStyleSets({\n      wrapper: {\n        display: 'inline-flex',\n        height: '100%',\n        alignItems: 'center',\n      },\n      divider: {\n        width: 1,\n        height: '100%',\n        backgroundColor: theme.palette.neutralTertiaryAlt,\n      },\n    });\n  },\n);\n", "import {\n  concatStyleSets,\n  getFocusStyle,\n  HighContrastSelector,\n  getScreenSelector,\n  ScreenWidthMaxMedium,\n  IconFontSizes,\n  getHighContrastNoAdjustStyle,\n} from '../../Styling';\nimport { memoizeFunction } from '../../Utilities';\nimport type { ITheme } from '../../Styling';\nimport type { IMenuItemStyles } from './ContextualMenu.types';\n\nexport const CONTEXTUAL_MENU_ITEM_HEIGHT = 36;\n\nconst MediumScreenSelector = getScreenSelector(0, ScreenWidthMaxMedium);\n\nexport const getMenuItemStyles = memoizeFunction((theme: ITheme): IMenuItemStyles => {\n  const { semanticColors, fonts, palette } = theme;\n  const ContextualMenuItemBackgroundHoverColor = semanticColors.menuItemBackgroundHovered;\n  const ContextualMenuItemTextHoverColor = semanticColors.menuItemTextHovered;\n  const ContextualMenuItemBackgroundSelectedColor = semanticColors.menuItemBackgroundPressed;\n  const ContextualMenuItemDividerColor = semanticColors.bodyDivider;\n\n  const menuItemStyles: IMenuItemStyles = {\n    item: [\n      fonts.medium,\n      {\n        color: semanticColors.bodyText,\n        position: 'relative',\n        boxSizing: 'border-box',\n      },\n    ],\n    divider: {\n      display: 'block',\n      height: '1px',\n      backgroundColor: ContextualMenuItemDividerColor,\n      position: 'relative',\n    },\n    root: [\n      getFocusStyle(theme),\n      fonts.medium,\n      {\n        color: semanticColors.bodyText,\n        backgroundColor: 'transparent',\n        border: 'none',\n        width: '100%',\n        height: CONTEXTUAL_MENU_ITEM_HEIGHT,\n        lineHeight: CONTEXTUAL_MENU_ITEM_HEIGHT,\n        display: 'block',\n        cursor: 'pointer',\n        padding: '0px 8px 0 4px', // inner elements have a margin of 4px (4 + 4 = 8px as on right side)\n        textAlign: 'left',\n      },\n    ],\n    rootDisabled: {\n      color: semanticColors.disabledBodyText,\n      cursor: 'default',\n      pointerEvents: 'none',\n      selectors: {\n        [HighContrastSelector]: {\n          // ensure disabled text looks different than enabled\n          color: 'GrayText',\n          opacity: 1,\n        },\n      },\n    },\n    rootHovered: {\n      backgroundColor: ContextualMenuItemBackgroundHoverColor,\n      color: ContextualMenuItemTextHoverColor,\n      selectors: {\n        '.ms-ContextualMenu-icon': {\n          color: palette.themeDarkAlt,\n        },\n        '.ms-ContextualMenu-submenuIcon': {\n          color: palette.neutralPrimary,\n        },\n      },\n    },\n    rootFocused: {\n      backgroundColor: palette.white,\n    },\n    rootChecked: {\n      selectors: {\n        '.ms-ContextualMenu-checkmarkIcon': {\n          color: palette.neutralPrimary,\n        },\n      },\n    },\n    rootPressed: {\n      backgroundColor: ContextualMenuItemBackgroundSelectedColor,\n      selectors: {\n        '.ms-ContextualMenu-icon': {\n          color: palette.themeDark,\n        },\n        '.ms-ContextualMenu-submenuIcon': {\n          color: palette.neutralPrimary,\n        },\n      },\n    },\n    rootExpanded: {\n      backgroundColor: ContextualMenuItemBackgroundSelectedColor,\n      color: semanticColors.bodyTextChecked,\n      selectors: {\n        '.ms-ContextualMenu-submenuIcon': {\n          [HighContrastSelector]: {\n            // icons inside of anchor tags are not properly inheriting color in high contrast\n            color: 'inherit',\n          },\n        },\n        [HighContrastSelector]: {\n          // allow change in background/text to be visible\n          ...getHighContrastNoAdjustStyle(),\n        },\n      },\n    },\n    linkContent: {\n      whiteSpace: 'nowrap',\n      height: 'inherit',\n      display: 'flex',\n      alignItems: 'center',\n      maxWidth: '100%',\n    },\n    anchorLink: {\n      padding: '0px 8px 0 4px', // inner elements have a margin of 4px (4 + 4 = 8px as on right side)\n      textRendering: 'auto',\n      color: 'inherit',\n      letterSpacing: 'normal',\n      wordSpacing: 'normal',\n      textTransform: 'none',\n      textIndent: '0px',\n      textShadow: 'none',\n      textDecoration: 'none',\n      boxSizing: 'border-box',\n    },\n    label: {\n      margin: '0 4px',\n      verticalAlign: 'middle',\n      display: 'inline-block',\n      flexGrow: '1',\n      textOverflow: 'ellipsis',\n      whiteSpace: 'nowrap',\n      overflow: 'hidden',\n    },\n    secondaryText: {\n      color: theme.palette.neutralSecondary,\n      paddingLeft: '20px',\n      textAlign: 'right',\n    },\n    icon: {\n      display: 'inline-block',\n      minHeight: '1px',\n      maxHeight: CONTEXTUAL_MENU_ITEM_HEIGHT,\n      fontSize: IconFontSizes.medium,\n      width: IconFontSizes.medium,\n      margin: '0 4px',\n      verticalAlign: 'middle',\n      flexShrink: '0',\n      selectors: {\n        [MediumScreenSelector]: {\n          fontSize: IconFontSizes.large,\n          width: IconFontSizes.large,\n        },\n      },\n    },\n    iconColor: {\n      color: semanticColors.menuIcon,\n    },\n    iconDisabled: {\n      color: semanticColors.disabledBodyText,\n    },\n    checkmarkIcon: {\n      color: semanticColors.bodySubtext,\n    },\n    subMenuIcon: {\n      height: CONTEXTUAL_MENU_ITEM_HEIGHT,\n      lineHeight: CONTEXTUAL_MENU_ITEM_HEIGHT,\n      color: palette.neutralSecondary,\n      textAlign: 'center',\n      display: 'inline-block',\n      verticalAlign: 'middle',\n      flexShrink: '0',\n      fontSize: IconFontSizes.small, // 12px\n      selectors: {\n        ':hover': {\n          color: palette.neutralPrimary,\n        },\n        ':active': {\n          color: palette.neutralPrimary,\n        },\n        [MediumScreenSelector]: {\n          fontSize: IconFontSizes.medium, // 16px\n        },\n      },\n    },\n    splitButtonFlexContainer: [\n      getFocusStyle(theme),\n      {\n        display: 'flex',\n        height: CONTEXTUAL_MENU_ITEM_HEIGHT,\n        flexWrap: 'nowrap',\n        justifyContent: 'center',\n        alignItems: 'flex-start',\n      },\n    ],\n  };\n\n  return concatStyleSets(menuItemStyles);\n});\n", "import { getDividerClassNames } from '../Divider/VerticalDivider.classNames';\nimport { getMenuItemStyles } from './ContextualMenu.cnstyles';\nimport {\n  mergeStyleSets,\n  getGlobalClassNames,\n  getScreenSelector,\n  ScreenWidthMaxMedium,\n  hiddenContentStyle,\n} from '../../Styling';\nimport { memoizeFunction, IsFocusVisibleClassName } from '../../Utilities';\nimport type { ITheme } from '../../Styling';\nimport type { IVerticalDividerClassNames } from '../Divider/VerticalDivider.types';\nimport type { IContextualMenuItemStyles, IContextualMenuItemStyleProps } from './ContextualMenuItem.types';\nimport type { IContextualMenuSubComponentStyles } from './ContextualMenu.types';\n\n/**\n * @deprecated Deprecated in favor of mergeStyles API.\n */\nexport interface IContextualMenuClassNames {\n  container?: string;\n  root?: string;\n  list?: string;\n  header?: string;\n  title?: string;\n  subComponentStyles?: IContextualMenuSubComponentStyles;\n}\n\n/**\n * @deprecated Deprecated in favor of mergeStyles API.\n */\nexport interface IMenuItemClassNames {\n  item?: string;\n  divider?: string;\n  root?: string;\n  linkContent?: string;\n  icon?: string;\n  checkmarkIcon?: string;\n  subMenuIcon?: string;\n  label?: string;\n  secondaryText?: string;\n  splitContainer?: string;\n  splitPrimary?: string;\n  splitMenu?: string;\n  linkContentMenu?: string;\n  screenReaderText?: string;\n}\n\nconst CONTEXTUAL_SPLIT_MENU_MINWIDTH = '28px';\n\nconst MediumScreenSelector = getScreenSelector(0, ScreenWidthMaxMedium);\n\nexport const getSplitButtonVerticalDividerClassNames = memoizeFunction(\n  /* eslint-disable deprecation/deprecation */\n  (theme: ITheme): IVerticalDividerClassNames => {\n    return mergeStyleSets(getDividerClassNames(theme), {\n      /* eslint-enable deprecation/deprecation */\n      wrapper: {\n        position: 'absolute',\n        right: 28, // width of the splitMenu based on the padding plus icon fontSize\n        selectors: {\n          [MediumScreenSelector]: {\n            right: 32, // fontSize of the icon increased from 12px to 16px\n          },\n        },\n      },\n      divider: {\n        height: 16,\n        width: 1,\n      },\n    });\n  },\n);\n\nconst GlobalClassNames = {\n  item: 'ms-ContextualMenu-item',\n  divider: 'ms-ContextualMenu-divider',\n  root: 'ms-ContextualMenu-link',\n  isChecked: 'is-checked',\n  isExpanded: 'is-expanded',\n  isDisabled: 'is-disabled',\n  linkContent: 'ms-ContextualMenu-linkContent',\n  linkContentMenu: 'ms-ContextualMenu-linkContent',\n  icon: 'ms-ContextualMenu-icon',\n  iconColor: 'ms-ContextualMenu-iconColor',\n  checkmarkIcon: 'ms-ContextualMenu-checkmarkIcon',\n  subMenuIcon: 'ms-ContextualMenu-submenuIcon',\n  label: 'ms-ContextualMenu-itemText',\n  secondaryText: 'ms-ContextualMenu-secondaryText',\n  splitMenu: 'ms-ContextualMenu-splitMenu',\n  screenReaderText: 'ms-ContextualMenu-screenReaderText',\n};\n\n/**\n * @deprecated Will be removed in \\>= 7.0.\n * This is a package-internal method that has been depended on.\n * It is being kept in this form for backwards compatibility.\n * @internal\n */\n// TODO: Audit perf. impact of and potentially remove memoizeFunction.\n// https://github.com/microsoft/fluentui/issues/5534\nexport const getItemClassNames = memoizeFunction(\n  (\n    theme: ITheme,\n    disabled: boolean,\n    expanded: boolean,\n    checked: boolean,\n    isAnchorLink: boolean,\n    knownIcon: boolean,\n    itemClassName?: string,\n    dividerClassName?: string,\n    iconClassName?: string,\n    subMenuClassName?: string,\n    primaryDisabled?: boolean,\n    className?: string,\n  ): IContextualMenuItemStyles => {\n    const styles = getMenuItemStyles(theme);\n    const classNames = getGlobalClassNames(GlobalClassNames, theme);\n\n    return mergeStyleSets({\n      item: [classNames.item, styles.item, itemClassName],\n      divider: [classNames.divider, styles.divider, dividerClassName],\n      root: [\n        classNames.root,\n        styles.root,\n        checked && [classNames.isChecked, styles.rootChecked],\n        isAnchorLink && styles.anchorLink,\n        expanded && [classNames.isExpanded, styles.rootExpanded],\n        disabled && [classNames.isDisabled, styles.rootDisabled],\n        !disabled &&\n          !expanded && [\n            {\n              selectors: {\n                ':hover': styles.rootHovered,\n                ':active': styles.rootPressed,\n                [`.${IsFocusVisibleClassName} &:focus, .${IsFocusVisibleClassName} &:focus:hover`]: styles.rootFocused,\n                [`.${IsFocusVisibleClassName} &:hover`]: { background: 'inherit;' },\n              },\n            },\n          ],\n        className,\n      ],\n      splitPrimary: [\n        styles.root,\n        {\n          width: `calc(100% - ${CONTEXTUAL_SPLIT_MENU_MINWIDTH})`,\n        },\n        checked && ['is-checked', styles.rootChecked],\n        (disabled || primaryDisabled) && ['is-disabled', styles.rootDisabled],\n        !(disabled || primaryDisabled) &&\n          !checked && [\n            {\n              selectors: {\n                ':hover': styles.rootHovered,\n                // when hovering over the splitPrimary also affect the splitMenu\n                [`:hover ~ .${classNames.splitMenu}`]: styles.rootHovered,\n                ':active': styles.rootPressed,\n                [`.${IsFocusVisibleClassName} &:focus, .${IsFocusVisibleClassName} &:focus:hover`]: styles.rootFocused,\n                [`.${IsFocusVisibleClassName} &:hover`]: { background: 'inherit;' },\n              },\n            },\n          ],\n      ],\n      splitMenu: [\n        classNames.splitMenu,\n        styles.root,\n        {\n          flexBasis: '0',\n          padding: '0 8px',\n          minWidth: CONTEXTUAL_SPLIT_MENU_MINWIDTH,\n        },\n        expanded && ['is-expanded', styles.rootExpanded],\n        disabled && ['is-disabled', styles.rootDisabled],\n        !disabled &&\n          !expanded && [\n            {\n              selectors: {\n                ':hover': styles.rootHovered,\n                ':active': styles.rootPressed,\n                [`.${IsFocusVisibleClassName} &:focus, .${IsFocusVisibleClassName} &:focus:hover`]: styles.rootFocused,\n                [`.${IsFocusVisibleClassName} &:hover`]: { background: 'inherit;' },\n              },\n            },\n          ],\n      ],\n      anchorLink: styles.anchorLink,\n      linkContent: [classNames.linkContent, styles.linkContent],\n      linkContentMenu: [\n        classNames.linkContentMenu,\n        styles.linkContent,\n        {\n          justifyContent: 'center',\n        },\n      ],\n      icon: [\n        classNames.icon,\n        knownIcon && styles.iconColor,\n        styles.icon,\n        iconClassName,\n        disabled && [classNames.isDisabled, styles.iconDisabled],\n      ],\n      iconColor: styles.iconColor,\n      checkmarkIcon: [classNames.checkmarkIcon, knownIcon && styles.checkmarkIcon, styles.icon, iconClassName],\n      subMenuIcon: [\n        classNames.subMenuIcon,\n        styles.subMenuIcon,\n        subMenuClassName,\n        expanded && { color: theme.palette.neutralPrimary },\n        disabled && [styles.iconDisabled],\n      ],\n      label: [classNames.label, styles.label],\n      secondaryText: [classNames.secondaryText, styles.secondaryText],\n      splitContainer: [\n        styles.splitButtonFlexContainer,\n        !disabled &&\n          !checked && [\n            {\n              selectors: {\n                [`.${IsFocusVisibleClassName} &:focus, .${IsFocusVisibleClassName} &:focus:hover`]: styles.rootFocused,\n              },\n            },\n          ],\n      ],\n      screenReaderText: [\n        classNames.screenReaderText,\n        styles.screenReaderText,\n        hiddenContentStyle,\n        { visibility: 'hidden' },\n      ],\n    });\n  },\n);\n\n/**\n * Wrapper function for generating ContextualMenuItem classNames which adheres to\n * the getStyles API, but invokes memoized className generator function with\n * primitive values.\n *\n * @param props - the ContextualMenuItem style props used to generate its styles.\n */\nexport const getItemStyles = (props: IContextualMenuItemStyleProps): IContextualMenuItemStyles => {\n  const {\n    theme,\n    disabled,\n    expanded,\n    checked,\n    isAnchorLink,\n    knownIcon,\n    itemClassName,\n    dividerClassName,\n    iconClassName,\n    subMenuClassName,\n    primaryDisabled,\n    className,\n  } = props;\n\n  // eslint-disable-next-line deprecation/deprecation\n  return getItemClassNames(\n    theme,\n    disabled,\n    expanded,\n    checked,\n    isAnchorLink,\n    knownIcon,\n    itemClassName,\n    dividerClassName,\n    iconClassName,\n    subMenuClassName,\n    primaryDisabled,\n    className,\n  );\n};\n", "import * as React from 'react';\nimport { styled } from '../../Utilities';\nimport { ContextualMenuItemBase } from './ContextualMenuItem.base';\nimport { getItemStyles } from './ContextualMenu.classNames';\nimport type {\n  IContextualMenuItemProps,\n  IContextualMenuItemStyleProps,\n  IContextualMenuItemStyles,\n} from './ContextualMenuItem.types';\n\n/**\n * ContextualMenuItem description\n */\nexport const ContextualMenuItem: React.FunctionComponent<IContextualMenuItemProps> = styled<\n  IContextualMenuItemProps,\n  IContextualMenuItemStyleProps,\n  IContextualMenuItemStyles\n>(ContextualMenuItemBase, getItemStyles, undefined, { scope: 'ContextualMenuItem' });\n", "import * as React from 'react';\nimport { anchorProperties, getNativeProps, memoizeFunction, getId, mergeAriaAttributeValues } from '../../../Utilities';\nimport { ContextualMenuItemWrapper } from './ContextualMenuItemWrapper';\nimport { KeytipData } from '../../../KeytipData';\nimport { isItemDisabled, hasSubmenu } from '../../../utilities/contextualMenu/index';\nimport { ContextualMenuItem } from '../ContextualMenuItem';\nimport type { IKeytipDataProps } from '../../../KeytipData';\nimport type { IKeytipProps } from '../../../Keytip';\n\nexport class ContextualMenuAnchor extends ContextualMenuItemWrapper {\n  private _anchor = React.createRef<HTMLAnchorElement>();\n  private _ariaDescriptionId: string;\n\n  private _getMemoizedMenuButtonKeytipProps = memoizeFunction((keytipProps: IKeytipProps) => {\n    return {\n      ...keytipProps,\n      hasMenu: true,\n    };\n  });\n\n  public render() {\n    const {\n      item,\n      classNames,\n      index,\n      focusableElementIndex,\n      totalItemCount,\n      hasCheckmarks,\n      hasIcons,\n      contextualMenuItemAs: ChildrenRenderer = ContextualMenuItem,\n      expandedMenuItemKey,\n      onItemClick,\n      openSubMenu,\n      dismissSubMenu,\n      dismissMenu,\n    } = this.props;\n\n    let anchorRel = item.rel;\n    if (item.target && item.target.toLowerCase() === '_blank') {\n      anchorRel = anchorRel ? anchorRel : 'nofollow noopener noreferrer'; // Safe default to prevent tabjacking\n    }\n\n    const itemHasSubmenu = hasSubmenu(item);\n    const nativeProps = getNativeProps<React.HTMLAttributes<HTMLAnchorElement>>(item, anchorProperties);\n    const disabled = isItemDisabled(item);\n    const { itemProps, ariaDescription } = item;\n\n    let { keytipProps } = item;\n    if (keytipProps && itemHasSubmenu) {\n      keytipProps = this._getMemoizedMenuButtonKeytipProps(keytipProps);\n    }\n\n    // Check for ariaDescription to set the _ariaDescriptionId and render a hidden span with\n    // the description in it to be added to ariaDescribedBy\n    if (ariaDescription) {\n      this._ariaDescriptionId = getId();\n    }\n    const ariaDescribedByIds = mergeAriaAttributeValues(\n      item.ariaDescribedBy,\n      ariaDescription ? this._ariaDescriptionId : undefined,\n      nativeProps['aria-describedby'],\n    );\n\n    const additionalItemProperties = {\n      'aria-describedby': ariaDescribedByIds,\n    };\n\n    return (\n      <div>\n        <KeytipData keytipProps={item.keytipProps} ariaDescribedBy={ariaDescribedByIds} disabled={disabled}>\n          {(keytipAttributes: IKeytipDataProps): JSX.Element => (\n            <a\n              {...additionalItemProperties}\n              {...nativeProps}\n              {...keytipAttributes}\n              ref={this._anchor}\n              href={item.href}\n              target={item.target}\n              rel={anchorRel}\n              className={classNames.root}\n              role=\"menuitem\"\n              aria-haspopup={itemHasSubmenu || undefined}\n              aria-expanded={itemHasSubmenu ? item.key === expandedMenuItemKey : undefined}\n              aria-posinset={focusableElementIndex + 1}\n              aria-setsize={totalItemCount}\n              aria-disabled={isItemDisabled(item)}\n              // eslint-disable-next-line deprecation/deprecation\n              style={item.style}\n              onClick={this._onItemClick}\n              onMouseEnter={this._onItemMouseEnter}\n              onMouseLeave={this._onItemMouseLeave}\n              onMouseMove={this._onItemMouseMove}\n              onKeyDown={itemHasSubmenu ? this._onItemKeyDown : undefined}\n            >\n              <ChildrenRenderer\n                componentRef={item.componentRef}\n                item={item}\n                classNames={classNames}\n                index={index}\n                onCheckmarkClick={hasCheckmarks && onItemClick ? onItemClick : undefined}\n                hasIcons={hasIcons}\n                openSubMenu={openSubMenu}\n                dismissSubMenu={dismissSubMenu}\n                dismissMenu={dismissMenu}\n                getSubmenuTarget={this._getSubmenuTarget}\n                {...itemProps}\n              />\n              {this._renderAriaDescription(ariaDescription, classNames.screenReaderText)}\n            </a>\n          )}\n        </KeytipData>\n      </div>\n    );\n  }\n\n  protected _getSubmenuTarget = (): HTMLElement | undefined => {\n    return this._anchor.current ? this._anchor.current : undefined;\n  };\n\n  protected _onItemClick = (ev: React.MouseEvent<HTMLElement>): void => {\n    const { item, onItemClick } = this.props;\n    if (onItemClick) {\n      onItemClick(item, ev);\n    }\n  };\n\n  protected _renderAriaDescription = (ariaDescription?: string, className?: string) => {\n    // If ariaDescription is given, descriptionId will be assigned to ariaDescriptionSpan\n    return ariaDescription ? (\n      <span id={this._ariaDescriptionId} className={className}>\n        {ariaDescription}\n      </span>\n    ) : null;\n  };\n}\n", "import * as React from 'react';\nimport { initializeComponentRef, shallowCompare } from '../../../Utilities';\nimport type { IContextualMenuItemWrapperProps } from './ContextualMenuItemWrapper.types';\n\nexport class ContextualMenuItemWrapper extends React.Component<IContextualMenuItemWrapperProps> {\n  constructor(props: IContextualMenuItemWrapperProps) {\n    super(props);\n    initializeComponentRef(this);\n  }\n\n  public shouldComponentUpdate(newProps: IContextualMenuItemWrapperProps): boolean {\n    return !shallowCompare(newProps, this.props);\n  }\n\n  protected _onItemMouseEnter = (ev: React.MouseEvent<HTMLElement>): void => {\n    const { item, onItemMouseEnter } = this.props;\n    if (onItemMouseEnter) {\n      onItemMouseEnter(item, ev, ev.currentTarget as HTMLElement);\n    }\n  };\n\n  protected _onItemClick = (ev: React.MouseEvent<HTMLElement>): void => {\n    const { item, onItemClickBase } = this.props;\n    if (onItemClickBase) {\n      onItemClickBase(item, ev, ev.currentTarget as HTMLElement);\n    }\n  };\n\n  protected _onItemMouseLeave = (ev: React.MouseEvent<HTMLElement>): void => {\n    const { item, onItemMouseLeave } = this.props;\n    if (onItemMouseLeave) {\n      onItemMouseLeave(item, ev);\n    }\n  };\n\n  protected _onItemKeyDown = (ev: React.KeyboardEvent<HTMLElement>): void => {\n    const { item, onItemKeyDown } = this.props;\n    if (onItemKeyDown) {\n      onItemKeyDown(item, ev);\n    }\n  };\n\n  protected _onItemMouseMove = (ev: React.MouseEvent<HTMLElement>): void => {\n    const { item, onItemMouseMove } = this.props;\n    if (onItemMouseMove) {\n      onItemMouseMove(item, ev, ev.currentTarget as HTMLElement);\n    }\n  };\n\n  protected _getSubmenuTarget = (): HTMLElement | undefined => {\n    return undefined;\n  };\n}\n", "import { find, KeyCodes } from '../../Utilities';\n\nexport type KeytipTransitionModifier =\n  | typeof KeyCodes.shift\n  | typeof KeyCodes.ctrl\n  | typeof KeyCodes.alt\n  | typeof KeyCodes.leftWindow;\n\nexport interface IKeytipTransitionKey {\n  key: string;\n  modifierKeys?: KeytipTransitionModifier[];\n}\n\n/**\n * Tests for equality between two IKeytipTransitionKeys.\n *\n * @param key1 - First IKeytipTransitionKey.\n * @param key2 - Second IKeytipTransitionKey.\n * @returns T/F if the transition keys are equal.\n */\nexport function transitionKeysAreEqual(key1: IKeytipTransitionKey, key2: IKeytipTransitionKey): boolean {\n  if (key1.key !== key2.key) {\n    return false;\n  }\n\n  let mod1 = key1.modifierKeys;\n  let mod2 = key2.modifierKeys;\n\n  if ((!mod1 && mod2) || (mod1 && !mod2)) {\n    // Not equal if one modifier is defined and the other isn't\n    return false;\n  }\n\n  if (mod1 && mod2) {\n    if (mod1.length !== mod2.length) {\n      return false;\n    }\n\n    // Sort both arrays\n    mod1 = mod1.sort();\n    mod2 = mod2.sort();\n    for (let i = 0; i < mod1.length; i++) {\n      if (mod1[i] !== mod2[i]) {\n        return false;\n      }\n    }\n  }\n\n  return true;\n}\n\n/**\n * Tests if 'key' is present in 'keys'.\n *\n * @param keys - Array of IKeytipTransitionKey.\n * @param key - IKeytipTransitionKey to find in 'keys'.\n * @returns T/F if 'keys' contains 'key'.\n */\nexport function transitionKeysContain(keys: IKeytipTransitionKey[], key: IKeytipTransitionKey): boolean {\n  return !!find(keys, (transitionKey: IKeytipTransitionKey) => {\n    return transitionKeysAreEqual(transitionKey, key);\n  });\n}\n", "import type { IKeytipProps } from '../../Keytip';\n\nexport interface IKeytipConfig {\n  keytips: IKeytipConfigItem[];\n}\n\nexport interface IKeytipConfigItem {\n  /**\n   * Key Sequence for this keytip only\n   * If sequence is not defined it will be derived from the content string\n   */\n  sequence?: string;\n\n  /**\n   * Content for the keytip\n   */\n  content: string;\n\n  /**\n   * Identifier for the keytip, to be used to access in the configMap\n   */\n  id: string;\n\n  /**\n   * Optional props in IKeytipProps\n   */\n  optionalProps?: Partial<IKeytipProps>;\n\n  /**\n   * Children keytips of this keytip\n   */\n  children?: IKeytipConfigItem[];\n}\n\nexport interface IKeytipConfigMap {\n  [id: string]: IKeytipProps;\n}\n\n/**\n * Builds a map of ID to IKeytipProps\n *\n * @param config - IKeytipConfig object\n * @returns Config map\n */\nexport function buildKeytipConfigMap(config: IKeytipConfig): IKeytipConfigMap {\n  const configMap: IKeytipConfigMap = {};\n\n  for (const keytip of config.keytips) {\n    constructKeytip(configMap, [], keytip);\n  }\n\n  return configMap;\n}\n\n/**\n * Constructs a keytip from an IKeytipConfigItem and puts it in the configMap\n *\n * @param configMap - IKeytipConfigMap to store the keytip in\n * @param parentSequence - string of the parent keytip\n * @param keytip - IKeytipConfigItem data\n */\nexport function constructKeytip(\n  configMap: IKeytipConfigMap,\n  parentSequence: string[],\n  keytip: IKeytipConfigItem,\n): void {\n  // Compute full key sequence\n  const sequence = keytip.sequence ? keytip.sequence : keytip.content.toLocaleLowerCase();\n  const keytipSequence = parentSequence.concat(sequence);\n\n  // Save props in configMap\n  const keytipProps: IKeytipProps = { ...keytip.optionalProps, keySequences: keytipSequence, content: keytip.content };\n  configMap[keytip.id] = keytipProps;\n\n  if (keytip.children) {\n    for (const child of keytip.children) {\n      // Create keytips for all children\n      constructKeytip(configMap, keytipSequence, child);\n    }\n  }\n}\n", "import { KTP_SEPARATOR, KTP_PREFIX, DATAKTP_TARGET, DATAKTP_EXECUTE_TARGET, KTP_LAYER_ID } from './KeytipConstants';\nimport { addElementAtIndex } from '../../Utilities';\n\n/**\n * Converts a whole set of KeySequences into one keytip ID, which will be the ID for the last keytip sequence specified\n * keySequences should not include the initial keytip 'start' sequence.\n *\n * @param keySequences - Full path of IKeySequences for one keytip.\n * @returns String to use for the keytip ID.\n */\nexport function sequencesToID(keySequences: string[]): string {\n  return keySequences.reduce((prevValue: string, keySequence: string): string => {\n    return prevValue + KTP_SEPARATOR + keySequence.split('').join(KTP_SEPARATOR);\n  }, KTP_PREFIX);\n}\n\n/**\n * Merges an overflow sequence with a key sequence.\n *\n * @param keySequences - Full sequence for one keytip.\n * @param overflowKeySequences - Full overflow keytip sequence.\n * @returns Sequence that will be used by the keytip when in the overflow.\n */\nexport function mergeOverflows(keySequences: string[], overflowKeySequences: string[]): string[] {\n  const overflowSequenceLen = overflowKeySequences.length;\n  const overflowSequence = [...overflowKeySequences].pop();\n  const newKeySequences = [...keySequences];\n  return addElementAtIndex(newKeySequences, overflowSequenceLen - 1, overflowSequence!);\n}\n\n/**\n * Constructs the data-ktp-target attribute selector from a full key sequence.\n *\n * @param keySequences - Full string[] for a Keytip.\n * @returns String selector to use to query for the keytip target.\n */\nexport function ktpTargetFromSequences(keySequences: string[]): string {\n  return '[' + DATAKTP_TARGET + '=\"' + sequencesToID(keySequences) + '\"]';\n}\n\n/**\n * Constructs the data-ktp-execute-target attribute selector from a keytip ID.\n *\n * @param keytipId - ID of the Keytip.\n * @returns String selector to use to query for the keytip execute target.\n */\nexport function ktpTargetFromId(keytipId: string): string {\n  return '[' + DATAKTP_EXECUTE_TARGET + '=\"' + keytipId + '\"]';\n}\n\n/**\n * Gets the aria-describedby value to put on the component with this keytip.\n *\n * @param keySequences - KeySequences of the keytip.\n * @returns The aria-describedby value to set on the component with this keytip.\n */\nexport function getAriaDescribedBy(keySequences: string[]): string {\n  const describedby = ' ' + KTP_LAYER_ID;\n  if (!keySequences.length) {\n    // Return just the layer ID\n    return describedby;\n  }\n\n  return describedby + ' ' + sequencesToID(keySequences);\n}\n", "import * as React from 'react';\nimport { useConst, useIsomorphicLayoutEffect, usePrevious } from '@fluentui/react-hooks';\nimport { mergeAriaAttributeValues } from '../../Utilities';\nimport { KeytipManager, mergeOverflows, sequencesToID, getAriaDescribedBy } from '../../utilities/keytips/index';\nimport type { KeytipDataOptions } from './KeytipData.types';\nimport type { IKeytipProps } from '../../Keytip';\n\nexport interface IKeytipData {\n  ariaDescribedBy: string | undefined;\n  keytipId: string | undefined;\n}\n\n/**\n * Hook that creates attributes for components which are enabled with Keytip.\n */\nexport function useKeytipData(options: KeytipDataOptions): IKeytipData {\n  const uniqueId = React.useRef<string>();\n  const keytipProps: IKeytipProps | undefined = options.keytipProps\n    ? {\n        disabled: options.disabled,\n        ...options.keytipProps,\n      }\n    : undefined;\n\n  const keytipManager = useConst<KeytipManager>(KeytipManager.getInstance());\n  const prevOptions = usePrevious(options);\n\n  // useLayoutEffect used to strictly emulate didUpdate/didMount behavior\n  useIsomorphicLayoutEffect(() => {\n    if (\n      uniqueId.current &&\n      keytipProps &&\n      (prevOptions?.keytipProps !== options.keytipProps || prevOptions?.disabled !== options.disabled)\n    ) {\n      keytipManager.update(keytipProps, uniqueId.current);\n    }\n  });\n\n  useIsomorphicLayoutEffect(() => {\n    // Register Keytip in KeytipManager\n    if (keytipProps) {\n      uniqueId.current = keytipManager.register(keytipProps);\n    }\n\n    return () => {\n      // Unregister Keytip in KeytipManager\n      keytipProps && keytipManager.unregister(keytipProps, uniqueId.current!);\n    };\n    // this is meant to run only at mount, and updates are handled separately\n    // eslint-disable-next-line react-hooks/exhaustive-deps\n  }, []);\n\n  let nativeKeytipProps: IKeytipData = {\n    ariaDescribedBy: undefined,\n    keytipId: undefined,\n  };\n\n  if (keytipProps) {\n    nativeKeytipProps = getKeytipData(keytipManager, keytipProps, options.ariaDescribedBy);\n  }\n\n  return nativeKeytipProps;\n}\n\n/**\n * Gets the aria- and data- attributes to attach to the component\n * @param keytipProps - options for Keytip\n * @param describedByPrepend - ariaDescribedBy value to prepend\n */\nfunction getKeytipData(\n  keytipManager: KeytipManager,\n  keytipProps: IKeytipProps,\n  describedByPrepend?: string,\n): IKeytipData {\n  // Add the parent overflow sequence if necessary\n  const newKeytipProps = keytipManager.addParentOverflow(keytipProps);\n\n  // Construct aria-describedby and data-ktp-id attributes\n  const ariaDescribedBy = mergeAriaAttributeValues(\n    describedByPrepend,\n    getAriaDescribedBy(newKeytipProps.keySequences),\n  )!;\n\n  let keySequences = [...newKeytipProps.keySequences];\n  if (newKeytipProps.overflowSetSequence) {\n    keySequences = mergeOverflows(keySequences, newKeytipProps.overflowSetSequence);\n  }\n  const keytipId = sequencesToID(keySequences);\n\n  return {\n    ariaDescribedBy,\n    keytipId,\n  };\n}\n", "import * as React from 'react';\nimport { DATAKTP_TARGET, DATAKTP_EXECUTE_TARGET } from '../../utilities/keytips/index';\nimport { useKeytipData } from './useKeytipData';\nimport type { IRenderComponent } from '../../Utilities';\nimport type { IKeytipDataProps } from './KeytipData.types';\n\n/**\n * A small element to help the target component correctly read out its aria-describedby for its Keytip\n * {@docCategory Keytips}\n */\nexport const KeytipData: React.FunctionComponent<IKeytipDataProps & IRenderComponent<{}>> = props => {\n  const { children, ...keytipDataProps } = props;\n  const { keytipId, ariaDescribedBy } = useKeytipData(keytipDataProps);\n\n  return children({\n    [DATAKTP_TARGET]: keytipId,\n    [DATAKTP_EXECUTE_TARGET]: keytipId,\n    'aria-describedby': ariaDescribedBy,\n  });\n};\n", "import * as React from 'react';\nimport { DATAKTP_TARGET, DATAKTP_EXECUTE_TARGET, DATAKTP_ARIA_TARGET } from '../../utilities/keytips/index';\nimport { useKeytipData } from './useKeytipData';\nimport type { KeytipDataOptions } from './KeytipData.types';\n\n/**\n * Hook that creates a ref which is used for passing to Keytip target element.\n * The ref will handle setting the attributes needed for Keytip to work.\n */\nexport function useKeytipRef<TElement extends HTMLElement = HTMLElement>(\n  options: KeytipDataOptions,\n): React.Ref<TElement> {\n  const { keytipId, ariaDescribedBy } = useKeytipData(options);\n\n  const contentRef: React.Ref<TElement> = React.useCallback(\n    (contentElement: TElement | null): void => {\n      if (!contentElement) {\n        return;\n      }\n\n      const targetElement = findFirstElement(contentElement, DATAKTP_TARGET) || contentElement;\n      const executeElement = findFirstElement(contentElement, DATAKTP_EXECUTE_TARGET) || targetElement;\n      const ariaElement = findFirstElement(contentElement, DATAKTP_ARIA_TARGET) || executeElement;\n\n      setAttribute(targetElement, DATAKTP_TARGET, keytipId);\n      setAttribute(executeElement, DATAKTP_EXECUTE_TARGET, keytipId);\n      setAttribute(ariaElement, 'aria-describedby', ariaDescribedBy, true);\n    },\n    [keytipId, ariaDescribedBy],\n  );\n\n  return contentRef;\n}\n\nexport function setAttribute(\n  element: HTMLElement | null,\n  attributeName: string,\n  attributeValue: string | undefined,\n  append: boolean = false,\n): void {\n  if (element && attributeValue) {\n    let value = attributeValue;\n    if (append) {\n      const currentValue = element.getAttribute(attributeName);\n      if (currentValue && currentValue.indexOf(attributeValue) === -1) {\n        value = `${currentValue} ${attributeValue}`;\n      }\n    }\n\n    element.setAttribute(attributeName, value);\n  }\n}\n\nfunction findFirstElement(rootElement: HTMLElement, dataAttribute: string): HTMLElement | null {\n  return rootElement.querySelector(`[${dataAttribute}]`);\n}\n", "import * as React from 'react';\nimport { buttonProperties, getNativeProps, memoizeFunction, getId, mergeAriaAttributeValues } from '../../../Utilities';\nimport { ContextualMenuItemWrapper } from './ContextualMenuItemWrapper';\nimport { KeytipData } from '../../../KeytipData';\nimport { getIsChecked, isItemDisabled, hasSubmenu, getMenuItemAriaRole } from '../../../utilities/contextualMenu/index';\nimport { ContextualMenuItem } from '../ContextualMenuItem';\nimport type { IKeytipDataProps } from '../../../KeytipData';\nimport type { IKeytipProps } from '../../../Keytip';\n\nexport class ContextualMenuButton extends ContextualMenuItemWrapper {\n  private _btn = React.createRef<HTMLButtonElement>();\n  private _ariaDescriptionId: string;\n\n  private _getMemoizedMenuButtonKeytipProps = memoizeFunction((keytipProps: IKeytipProps) => {\n    return {\n      ...keytipProps,\n      hasMenu: true,\n    };\n  });\n\n  public render() {\n    const {\n      item,\n      classNames,\n      index,\n      focusableElementIndex,\n      totalItemCount,\n      hasCheckmarks,\n      hasIcons,\n      contextualMenuItemAs: ChildrenRenderer = ContextualMenuItem,\n      expandedMenuItemKey,\n      onItemMouseDown,\n      onItemClick,\n      openSubMenu,\n      dismissSubMenu,\n      dismissMenu,\n    } = this.props;\n\n    const isChecked: boolean | null | undefined = getIsChecked(item);\n    const canCheck: boolean = isChecked !== null;\n    const defaultRole = getMenuItemAriaRole(item);\n    const itemHasSubmenu = hasSubmenu(item);\n    const { itemProps, ariaLabel, ariaDescription } = item;\n\n    const buttonNativeProperties = getNativeProps<React.ButtonHTMLAttributes<HTMLButtonElement>>(\n      item,\n      buttonProperties,\n    );\n    // Do not add the disabled attribute to the button so that it is focusable\n    delete buttonNativeProperties.disabled;\n\n    const itemRole = item.role || defaultRole;\n\n    // Check for ariaDescription to set the _ariaDescriptionId and render a hidden span with\n    // the description in it to be added to ariaDescribedBy\n    if (ariaDescription) {\n      this._ariaDescriptionId = getId();\n    }\n    const ariaDescribedByIds = mergeAriaAttributeValues(\n      item.ariaDescribedBy,\n      ariaDescription ? this._ariaDescriptionId : undefined,\n      buttonNativeProperties['aria-describedby'],\n    );\n\n    const itemButtonProperties = {\n      className: classNames.root,\n      onClick: this._onItemClick,\n      onKeyDown: itemHasSubmenu ? this._onItemKeyDown : undefined,\n      onMouseEnter: this._onItemMouseEnter,\n      onMouseLeave: this._onItemMouseLeave,\n      onMouseDown: (ev: React.MouseEvent<HTMLButtonElement>) =>\n        onItemMouseDown ? onItemMouseDown(item, ev) : undefined,\n      onMouseMove: this._onItemMouseMove,\n      href: item.href,\n      title: item.title,\n      'aria-label': ariaLabel,\n      'aria-describedby': ariaDescribedByIds,\n      'aria-haspopup': itemHasSubmenu || undefined,\n      'aria-expanded': itemHasSubmenu ? item.key === expandedMenuItemKey : undefined,\n      'aria-posinset': focusableElementIndex + 1,\n      'aria-setsize': totalItemCount,\n      'aria-disabled': isItemDisabled(item),\n      'aria-checked':\n        (itemRole === 'menuitemcheckbox' || itemRole === 'menuitemradio') && canCheck ? !!isChecked : undefined,\n      'aria-selected': itemRole === 'menuitem' && canCheck ? !!isChecked : undefined,\n      role: itemRole,\n      // eslint-disable-next-line deprecation/deprecation\n      style: item.style,\n    };\n\n    let { keytipProps } = item;\n    if (keytipProps && itemHasSubmenu) {\n      keytipProps = this._getMemoizedMenuButtonKeytipProps(keytipProps);\n    }\n\n    return (\n      <KeytipData keytipProps={keytipProps} ariaDescribedBy={ariaDescribedByIds} disabled={isItemDisabled(item)}>\n        {(keytipAttributes: IKeytipDataProps): JSX.Element => (\n          <button ref={this._btn} {...buttonNativeProperties} {...itemButtonProperties} {...keytipAttributes}>\n            <ChildrenRenderer\n              componentRef={item.componentRef}\n              item={item}\n              classNames={classNames}\n              index={index}\n              onCheckmarkClick={hasCheckmarks && onItemClick ? onItemClick : undefined}\n              hasIcons={hasIcons}\n              openSubMenu={openSubMenu}\n              dismissSubMenu={dismissSubMenu}\n              dismissMenu={dismissMenu}\n              getSubmenuTarget={this._getSubmenuTarget}\n              {...itemProps}\n            />\n            {this._renderAriaDescription(ariaDescription, classNames.screenReaderText)}\n          </button>\n        )}\n      </KeytipData>\n    );\n  }\n\n  protected _renderAriaDescription = (ariaDescription?: string, className?: string) => {\n    // If ariaDescription is given, descriptionId will be assigned to ariaDescriptionSpan\n    return ariaDescription ? (\n      <span id={this._ariaDescriptionId} className={className}>\n        {ariaDescription}\n      </span>\n    ) : null;\n  };\n\n  protected _getSubmenuTarget = (): HTMLElement | undefined => {\n    return this._btn.current ? this._btn.current : undefined;\n  };\n}\n", "import * as React from 'react';\nimport {\n  buttonProperties,\n  getNativeProps,\n  KeyCodes,\n  mergeAriaAttributeValues,\n  memoizeFunction,\n  Async,\n  EventGroup,\n  getId,\n} from '../../../Utilities';\nimport { ContextualMenuItem } from '../ContextualMenuItem';\nimport { getSplitButtonVerticalDividerClassNames } from '../ContextualMenu.classNames';\nimport { KeytipData } from '../../../KeytipData';\nimport { getIsChecked, getMenuItemAriaRole, hasSubmenu, isItemDisabled } from '../../../utilities/contextualMenu/index';\nimport { VerticalDivider } from '../../../Divider';\nimport { ContextualMenuItemWrapper } from './ContextualMenuItemWrapper';\nimport type { IContextualMenuItem } from '../ContextualMenu.types';\nimport type { IMenuItemClassNames } from '../ContextualMenu.classNames';\nimport type { IKeytipProps } from '../../../Keytip';\nimport type { IContextualMenuItemWrapperProps } from './ContextualMenuItemWrapper.types';\n\nexport interface IContextualMenuSplitButtonState {}\n\nconst TouchIdleDelay = 500; /* ms */\n\nexport class ContextualMenuSplitButton extends ContextualMenuItemWrapper {\n  private _splitButton: HTMLDivElement;\n  private _lastTouchTimeoutId: number | undefined;\n  private _processingTouch: boolean;\n  private _ariaDescriptionId: string;\n  private _dismissLabelId: string;\n\n  private _async: Async;\n  private _events: EventGroup;\n\n  private _getMemoizedMenuButtonKeytipProps = memoizeFunction((keytipProps: IKeytipProps) => {\n    return {\n      ...keytipProps,\n      hasMenu: true,\n    };\n  });\n\n  constructor(props: IContextualMenuItemWrapperProps) {\n    super(props);\n\n    this._async = new Async(this);\n    this._events = new EventGroup(this);\n    this._dismissLabelId = getId();\n  }\n\n  public componentDidMount() {\n    if (this._splitButton && 'onpointerdown' in this._splitButton) {\n      this._events.on(this._splitButton, 'pointerdown', this._onPointerDown, true);\n    }\n  }\n\n  public componentWillUnmount(): void {\n    this._async.dispose();\n    this._events.dispose();\n  }\n\n  public render(): JSX.Element | null {\n    const {\n      item,\n      classNames,\n      index,\n      focusableElementIndex,\n      totalItemCount,\n      hasCheckmarks,\n      hasIcons,\n      onItemMouseLeave,\n      expandedMenuItemKey,\n    } = this.props;\n\n    const itemHasSubmenu = hasSubmenu(item);\n\n    let { keytipProps } = item;\n    if (keytipProps) {\n      keytipProps = this._getMemoizedMenuButtonKeytipProps(keytipProps);\n    }\n\n    // Check for ariaDescription to set the _ariaDescriptionId and render a hidden span with\n    // the description in it to be added to ariaDescribedBy\n    const { ariaDescription } = item;\n    if (ariaDescription) {\n      this._ariaDescriptionId = getId();\n    }\n\n    const ariaChecked = getIsChecked(item) ?? undefined;\n\n    return (\n      <KeytipData keytipProps={keytipProps} disabled={isItemDisabled(item)}>\n        {(keytipAttributes: any): JSX.Element => (\n          <div\n            data-ktp-target={keytipAttributes['data-ktp-target']}\n            ref={(splitButton: HTMLDivElement) => (this._splitButton = splitButton)}\n            role={getMenuItemAriaRole(item)}\n            aria-label={item.ariaLabel}\n            className={classNames.splitContainer}\n            aria-disabled={isItemDisabled(item)}\n            aria-expanded={itemHasSubmenu ? item.key === expandedMenuItemKey : undefined}\n            aria-haspopup={true}\n            aria-describedby={mergeAriaAttributeValues(\n              item.ariaDescribedBy,\n              ariaDescription ? this._ariaDescriptionId : undefined,\n              keytipAttributes['aria-describedby'],\n            )}\n            aria-checked={ariaChecked}\n            aria-posinset={focusableElementIndex + 1}\n            aria-setsize={totalItemCount}\n            onMouseEnter={this._onItemMouseEnterPrimary}\n            onMouseLeave={\n              onItemMouseLeave ? onItemMouseLeave.bind(this, { ...item, subMenuProps: null, items: null }) : undefined\n            }\n            onMouseMove={this._onItemMouseMovePrimary}\n            onKeyDown={this._onItemKeyDown}\n            onClick={this._executeItemClick}\n            onTouchStart={this._onTouchStart}\n            tabIndex={0}\n            data-is-focusable={true}\n            aria-roledescription={item['aria-roledescription']}\n          >\n            {this._renderSplitPrimaryButton(item, classNames, index, hasCheckmarks!, hasIcons!)}\n            {this._renderSplitDivider(item)}\n            {this._renderSplitIconButton(item, classNames, index, keytipAttributes)}\n            {this._renderAriaDescription(ariaDescription, classNames.screenReaderText)}\n          </div>\n        )}\n      </KeytipData>\n    );\n  }\n\n  protected _onItemKeyDown = (ev: React.KeyboardEvent<HTMLElement>): void => {\n    const { item, onItemKeyDown } = this.props;\n    // eslint-disable-next-line deprecation/deprecation\n    if (ev.which === KeyCodes.enter) {\n      this._executeItemClick(ev);\n      ev.preventDefault();\n      ev.stopPropagation();\n    } else if (onItemKeyDown) {\n      onItemKeyDown(item, ev);\n    }\n  };\n\n  protected _getSubmenuTarget = (): HTMLElement | undefined => {\n    return this._splitButton;\n  };\n\n  protected _renderAriaDescription = (ariaDescription?: string, className?: string) => {\n    // If ariaDescription is given, descriptionId will be assigned to ariaDescriptionSpan\n    return ariaDescription ? (\n      <span id={this._ariaDescriptionId} className={className}>\n        {ariaDescription}\n      </span>\n    ) : null;\n  };\n\n  private _renderSplitPrimaryButton(\n    item: IContextualMenuItem,\n    // eslint-disable-next-line deprecation/deprecation\n    classNames: IMenuItemClassNames,\n    index: number,\n    hasCheckmarks: boolean,\n    hasIcons: boolean,\n  ) {\n    const { contextualMenuItemAs: ChildrenRenderer = ContextualMenuItem, onItemClick } = this.props;\n\n    const itemProps: IContextualMenuItem = {\n      key: item.key,\n      disabled: isItemDisabled(item) || item.primaryDisabled,\n      /* eslint-disable deprecation/deprecation */\n      name: item.name,\n      text: item.text || item.name,\n      secondaryText: item.secondaryText,\n      /* eslint-enable deprecation/deprecation */\n      className: classNames.splitPrimary,\n      canCheck: item.canCheck,\n      isChecked: item.isChecked,\n      checked: item.checked,\n      iconProps: item.iconProps,\n      id: this._dismissLabelId,\n      onRenderIcon: item.onRenderIcon,\n      data: item.data,\n      'data-is-focusable': false,\n    };\n\n    const { itemProps: itemComponentProps } = item;\n\n    return (\n      <button {...getNativeProps(itemProps, buttonProperties)}>\n        <ChildrenRenderer\n          data-is-focusable={false}\n          item={itemProps}\n          classNames={classNames}\n          index={index}\n          onCheckmarkClick={hasCheckmarks && onItemClick ? onItemClick : undefined}\n          hasIcons={hasIcons}\n          {...itemComponentProps}\n        />\n      </button>\n    );\n  }\n\n  private _renderSplitDivider(item: IContextualMenuItem) {\n    const getDividerClassNames =\n      item.getSplitButtonVerticalDividerClassNames || getSplitButtonVerticalDividerClassNames;\n    return <VerticalDivider getClassNames={getDividerClassNames} />;\n  }\n\n  private _renderSplitIconButton(\n    item: IContextualMenuItem,\n    classNames: IMenuItemClassNames, // eslint-disable-line deprecation/deprecation\n    index: number,\n    keytipAttributes: any,\n  ) {\n    const {\n      contextualMenuItemAs: ChildrenRenderer = ContextualMenuItem,\n      onItemMouseLeave,\n      onItemMouseDown,\n      openSubMenu,\n      dismissSubMenu,\n      dismissMenu,\n    } = this.props;\n\n    const itemProps: IContextualMenuItem = {\n      onClick: this._onIconItemClick,\n      disabled: isItemDisabled(item),\n      className: classNames.splitMenu,\n      subMenuProps: item.subMenuProps,\n      submenuIconProps: item.submenuIconProps,\n      split: true,\n      key: item.key,\n      'aria-labelledby': this._dismissLabelId,\n    };\n\n    const buttonProps = {\n      ...getNativeProps<React.ButtonHTMLAttributes<HTMLButtonElement>>(itemProps, buttonProperties),\n      ...{\n        onMouseEnter: this._onItemMouseEnterIcon,\n        onMouseLeave: onItemMouseLeave ? onItemMouseLeave.bind(this, item) : undefined,\n        onMouseDown: (ev: React.MouseEvent<HTMLButtonElement>) =>\n          onItemMouseDown ? onItemMouseDown(item, ev) : undefined,\n        onMouseMove: this._onItemMouseMoveIcon,\n        'data-is-focusable': false,\n        'data-ktp-execute-target': keytipAttributes['data-ktp-execute-target'],\n        'aria-haspopup': true,\n      },\n    };\n\n    const { itemProps: itemComponentProps } = item;\n\n    return (\n      <button {...buttonProps}>\n        <ChildrenRenderer\n          componentRef={item.componentRef}\n          item={itemProps}\n          classNames={classNames}\n          index={index}\n          hasIcons={false}\n          openSubMenu={openSubMenu}\n          dismissSubMenu={dismissSubMenu}\n          dismissMenu={dismissMenu}\n          getSubmenuTarget={this._getSubmenuTarget}\n          {...itemComponentProps}\n        />\n      </button>\n    );\n  }\n\n  private _onItemMouseEnterPrimary = (ev: React.MouseEvent<HTMLElement>): void => {\n    const { item, onItemMouseEnter } = this.props;\n    if (onItemMouseEnter) {\n      onItemMouseEnter({ ...item, subMenuProps: undefined, items: undefined }, ev, this._splitButton);\n    }\n  };\n\n  private _onItemMouseEnterIcon = (ev: React.MouseEvent<HTMLElement>): void => {\n    const { item, onItemMouseEnter } = this.props;\n    if (onItemMouseEnter) {\n      onItemMouseEnter(item, ev, this._splitButton);\n    }\n  };\n\n  private _onItemMouseMovePrimary = (ev: React.MouseEvent<HTMLElement>): void => {\n    const { item, onItemMouseMove } = this.props;\n    if (onItemMouseMove) {\n      onItemMouseMove({ ...item, subMenuProps: undefined, items: undefined }, ev, this._splitButton);\n    }\n  };\n\n  private _onItemMouseMoveIcon = (ev: React.MouseEvent<HTMLElement>): void => {\n    const { item, onItemMouseMove } = this.props;\n    if (onItemMouseMove) {\n      onItemMouseMove(item, ev, this._splitButton);\n    }\n  };\n\n  private _onIconItemClick = (ev: React.MouseEvent<HTMLElement>): void => {\n    const { item, onItemClickBase } = this.props;\n    if (onItemClickBase) {\n      onItemClickBase(item, ev, (this._splitButton ? this._splitButton : ev.currentTarget) as HTMLElement);\n    }\n  };\n\n  private _executeItemClick = (ev: React.MouseEvent<HTMLElement> | React.KeyboardEvent<HTMLElement>): void => {\n    const { item, executeItemClick, onItemClick } = this.props;\n\n    if (item.disabled || item.isDisabled) {\n      return;\n    }\n\n    if (this._processingTouch && !item.canCheck && onItemClick) {\n      return onItemClick(item, ev);\n    }\n\n    if (executeItemClick) {\n      executeItemClick(item, ev);\n    }\n  };\n\n  private _onTouchStart = (ev: React.TouchEvent<HTMLElement>): void => {\n    if (this._splitButton && !('onpointerdown' in this._splitButton)) {\n      this._handleTouchAndPointerEvent(ev);\n    }\n  };\n\n  private _onPointerDown = (ev: PointerEvent): void => {\n    if (ev.pointerType === 'touch') {\n      this._handleTouchAndPointerEvent(ev);\n      ev.preventDefault();\n      ev.stopImmediatePropagation();\n    }\n  };\n\n  private _handleTouchAndPointerEvent(ev: React.TouchEvent<HTMLElement> | PointerEvent) {\n    const { onTap } = this.props;\n\n    if (onTap) {\n      onTap(ev);\n    }\n    // If we already have an existing timeout from a previous touch/pointer event\n    // cancel that timeout so we can set a new one.\n    if (this._lastTouchTimeoutId) {\n      this._async.clearTimeout(this._lastTouchTimeoutId);\n      this._lastTouchTimeoutId = undefined;\n    }\n    this._processingTouch = true;\n    this._lastTouchTimeoutId = this._async.setTimeout(() => {\n      this._processingTouch = false;\n      this._lastTouchTimeoutId = undefined;\n    }, TouchIdleDelay);\n  }\n}\n", "import type { IVerticalDividerPropsStyles, IVerticalDividerStyles } from './VerticalDivider.types';\nimport type { IStyleFunction } from '../../Utilities';\n\nexport const getStyles: IStyleFunction<IVerticalDividerPropsStyles, IVerticalDividerStyles> = (\n  props: IVerticalDividerPropsStyles,\n): IVerticalDividerStyles => {\n  // eslint-disable-next-line deprecation/deprecation\n  const { theme, getClassNames, className } = props;\n\n  if (!theme) {\n    throw new Error('Theme is undefined or null.');\n  }\n\n  if (getClassNames) {\n    const names = getClassNames(theme);\n    return {\n      wrapper: [names.wrapper],\n      divider: [names.divider],\n    };\n  }\n\n  return {\n    wrapper: [\n      {\n        display: 'inline-flex',\n        height: '100%',\n        alignItems: 'center',\n      },\n      className,\n    ],\n    divider: [\n      {\n        width: 1,\n        height: '100%',\n        backgroundColor: theme.palette.neutralTertiaryAlt,\n      },\n    ],\n  };\n};\n", "import * as React from 'react';\nimport { classNamesFunction } from '../../Utilities';\nimport type {\n  IVerticalDividerProps,\n  IVerticalDividerPropsStyles,\n  IVerticalDividerStyles,\n} from './VerticalDivider.types';\n\nconst getClassNames = classNamesFunction<IVerticalDividerPropsStyles, IVerticalDividerStyles>();\n\nexport const VerticalDividerBase: React.FunctionComponent<IVerticalDividerProps> = React.forwardRef<\n  HTMLDivElement,\n  IVerticalDividerProps\n>((props, ref) => {\n  // eslint-disable-next-line deprecation/deprecation\n  const { styles, theme, getClassNames: deprecatedGetClassNames, className } = props;\n  const classNames = getClassNames(styles, { theme, getClassNames: deprecatedGetClassNames, className });\n  return (\n    <span className={classNames.wrapper} ref={ref}>\n      <span className={classNames.divider} />\n    </span>\n  );\n});\nVerticalDividerBase.displayName = 'VerticalDividerBase';\n", "import * as React from 'react';\nimport { getStyles } from './VerticalDivider.styles';\nimport { VerticalDividerBase } from './VerticalDivider.base';\nimport { styled } from '../../Utilities';\nimport type {\n  IVerticalDividerProps,\n  IVerticalDividerStyles,\n  IVerticalDividerPropsStyles,\n} from './VerticalDivider.types';\n\nexport const VerticalDivider: React.FunctionComponent<IVerticalDividerProps> = styled<\n  IVerticalDividerProps,\n  IVerticalDividerPropsStyles,\n  IVerticalDividerStyles\n>(VerticalDividerBase, getStyles, undefined, {\n  scope: 'VerticalDivider',\n});\n", "import * as React from 'react';\nimport { getWindow } from '@fluentui/utilities';\nimport { useOnEvent } from '@fluentui/react-hooks';\nimport { ResponsiveMode, getResponsiveMode, getInitialResponsiveMode } from '../decorators/withResponsiveMode';\nimport { useWindow } from '../../WindowProvider';\n\n/**\n * Hook to get the current responsive mode (window size category).\n * @param elementRef - Use this element's parent window when determining the responsive mode.\n * @param overrideResponsiveMode - Override the responsive mode. If this param is present, it's always returned.\n */\nexport const useResponsiveMode = (\n  elementRef: React.RefObject<HTMLElement | null>,\n  overrideResponsiveMode?: ResponsiveMode,\n) => {\n  const [lastResponsiveMode, setLastResponsiveMode] = React.useState<ResponsiveMode>(getInitialResponsiveMode());\n\n  const onResize = React.useCallback(() => {\n    const newResponsiveMode = getResponsiveMode(getWindow(elementRef.current));\n\n    // Setting the same value should not cause a re-render.\n    if (lastResponsiveMode !== newResponsiveMode) {\n      setLastResponsiveMode(newResponsiveMode);\n    }\n  }, [elementRef, lastResponsiveMode]);\n\n  const win = useWindow();\n  useOnEvent(win, 'resize', onResize);\n\n  // Call resize function initially on mount, or if the override changes from defined to undefined\n  // (the effect will run on all override changes, but onResize will only be called if it changed to undefined)\n  React.useEffect(() => {\n    if (overrideResponsiveMode === undefined) {\n      onResize();\n    }\n    // eslint-disable-next-line react-hooks/exhaustive-deps -- only meant to run on mount or when override changes\n  }, [overrideResponsiveMode]);\n\n  return overrideResponsiveMode ?? lastResponsiveMode;\n};\n", "import * as React from 'react';\nimport { BaseDecorator } from './BaseDecorator';\nimport { getWindow, hoistStatics, EventGroup } from '../../Utilities';\nimport { WindowContext } from '../../WindowProvider';\n\n/**\n * @deprecated Decorator usage is deprecated. Either call `getResponsiveMode` manually, or\n * use the `useResponsiveMode` hook within a function component.\n */\nexport interface IWithResponsiveModeState {\n  responsiveMode?: ResponsiveMode;\n}\n\nexport enum ResponsiveMode {\n  /** Width \\<= 479px */\n  small = 0,\n  /** Width \\> 479px and \\<= 639px */\n  medium = 1,\n  /** Width \\> 639px and \\<= 1023px */\n  large = 2,\n  /** Width \\> 1023px and \\<= 1365px */\n  xLarge = 3,\n  /** Width \\> 1365px and \\<= 1919px */\n  xxLarge = 4,\n  /** Width \\> 1919px */\n  xxxLarge = 5,\n  unknown = 999,\n}\n\nconst RESPONSIVE_MAX_CONSTRAINT = [479, 639, 1023, 1365, 1919, 99999999];\n\n/**\n * User specified mode to default to, useful for server side rendering scenarios.\n */\nlet _defaultMode: ResponsiveMode | undefined;\n\n/**\n * Tracking the last mode we successfully rendered, which allows us to\n * paint initial renders with the correct size.\n */\nlet _lastMode: ResponsiveMode | undefined;\n\n/**\n * Allows a server rendered scenario to provide a **default** responsive mode.\n * This WILL NOT trigger any updates to components that have already consumed the responsive mode!\n */\nexport function setResponsiveMode(responsiveMode: ResponsiveMode | undefined): void {\n  _defaultMode = responsiveMode;\n}\n\n/**\n * Initializes the responsive mode to the current window size. This can be used to avoid\n * a re-render during first component mount since the window would otherwise not be measured\n * until after mounting.\n *\n * This WILL NOT trigger any updates to components that have already consumed the responsive mode!\n */\nexport function initializeResponsiveMode(element?: HTMLElement): void {\n  const currentWindow = getWindow(element);\n\n  if (currentWindow) {\n    getResponsiveMode(currentWindow);\n  }\n}\n\nexport function getInitialResponsiveMode(): ResponsiveMode {\n  return _defaultMode ?? _lastMode ?? ResponsiveMode.large;\n}\n\n/**\n * @deprecated Decorator usage is deprecated. Either call `getResponsiveMode` manually, or\n * use the `useResponsiveMode` hook within a function component.\n */\nexport function withResponsiveMode<TProps extends { responsiveMode?: ResponsiveMode }, TState>(\n  ComposedComponent: new (props: TProps, ...args: any[]) => React.Component<TProps, TState>,\n): any {\n  // eslint-disable-next-line deprecation/deprecation\n  const resultClass = class WithResponsiveMode extends BaseDecorator<TProps, IWithResponsiveModeState> {\n    public static contextType = WindowContext;\n    public context: React.ContextType<typeof WindowContext>;\n\n    private _events: EventGroup;\n\n    constructor(props: TProps) {\n      super(props);\n      this._events = new EventGroup(this);\n      this._updateComposedComponentRef = this._updateComposedComponentRef.bind(this);\n\n      this.state = {\n        responsiveMode: getInitialResponsiveMode(),\n      };\n    }\n\n    public componentDidMount(): void {\n      this._events.on(this.context.window, 'resize', this._onResize);\n      this._onResize();\n    }\n\n    public componentWillUnmount(): void {\n      this._events.dispose();\n    }\n\n    public render(): JSX.Element | null {\n      const { responsiveMode } = this.state;\n\n      return responsiveMode === ResponsiveMode.unknown ? null : (\n        <ComposedComponent\n          ref={this._updateComposedComponentRef}\n          responsiveMode={responsiveMode}\n          {...(this.props as any)}\n        />\n      );\n    }\n\n    private _onResize = () => {\n      const responsiveMode = getResponsiveMode(this.context.window);\n\n      if (responsiveMode !== this.state.responsiveMode) {\n        this.setState({\n          responsiveMode,\n        });\n      }\n    };\n  };\n  return hoistStatics(ComposedComponent, resultClass);\n}\n\nfunction getWidthOfCurrentWindow(currentWindow: Window): number {\n  try {\n    return currentWindow.document.documentElement.clientWidth;\n  } catch (e) {\n    return currentWindow.innerWidth;\n  }\n}\n\n/**\n * Hook to get the current responsive mode (window size category).\n * @param currentWindow - Use this window when determining the responsive mode.\n */\nexport function getResponsiveMode(currentWindow: Window | undefined): ResponsiveMode {\n  let responsiveMode = ResponsiveMode.small;\n\n  if (currentWindow) {\n    try {\n      while (getWidthOfCurrentWindow(currentWindow) > RESPONSIVE_MAX_CONSTRAINT[responsiveMode]) {\n        responsiveMode++;\n      }\n    } catch (e) {\n      // Return a best effort result in cases where we're in the browser but it throws on getting innerWidth.\n      responsiveMode = getInitialResponsiveMode();\n    }\n\n    // Tracking last mode just gives us a better default in future renders,\n    // which avoids starting with the wrong value if we've measured once.\n    _lastMode = responsiveMode;\n  } else {\n    if (_defaultMode !== undefined) {\n      responsiveMode = _defaultMode;\n    } else {\n      throw new Error(\n        'Content was rendered in a server environment without providing a default responsive mode. ' +\n          'Call setResponsiveMode to define what the responsive mode is.',\n      );\n    }\n  }\n\n  return responsiveMode;\n}\n", "import * as React from 'react';\nimport type { MinimalMenuProps } from './types';\n\nexport const MenuContext = React.createContext<MinimalMenuProps>({});\n\nexport const useMenuContext = () => {\n  return React.useContext(MenuContext);\n};\n", "import { getGlobalClassNames, FontWeights } from '../../Styling';\nimport { CONTEXTUAL_MENU_ITEM_HEIGHT } from './ContextualMenu.cnstyles';\nimport type { IContextualMenuStyleProps, IContextualMenuStyles } from './ContextualMenu.types';\n\nconst GlobalClassNames = {\n  root: 'ms-ContextualMenu',\n  container: 'ms-ContextualMenu-container',\n  list: 'ms-ContextualMenu-list',\n  header: 'ms-ContextualMenu-header',\n  title: 'ms-ContextualMenu-title',\n  isopen: 'is-open',\n};\n\nexport const getStyles = (props: IContextualMenuStyleProps): IContextualMenuStyles => {\n  const { className, theme } = props;\n  const classNames = getGlobalClassNames(GlobalClassNames, theme);\n\n  const { fonts, semanticColors, effects } = theme;\n\n  return {\n    root: [\n      theme.fonts.medium,\n      classNames.root,\n      classNames.isopen,\n      {\n        backgroundColor: semanticColors.menuBackground,\n        minWidth: '180px',\n      },\n      className,\n    ],\n    container: [\n      classNames.container,\n      {\n        selectors: {\n          ':focus': { outline: 0 },\n        },\n      },\n    ],\n    list: [\n      classNames.list,\n      classNames.isopen,\n      {\n        listStyleType: 'none',\n        margin: '0',\n        padding: '0',\n      },\n    ],\n    header: [\n      classNames.header,\n      fonts.small,\n      {\n        fontWeight: FontWeights.semibold,\n        color: semanticColors.menuHeader,\n        background: 'none',\n        backgroundColor: 'transparent',\n        border: 'none',\n        height: CONTEXTUAL_MENU_ITEM_HEIGHT,\n        lineHeight: CONTEXTUAL_MENU_ITEM_HEIGHT,\n        cursor: 'default',\n        padding: '0px 6px',\n        userSelect: 'none',\n        textAlign: 'left',\n      },\n    ],\n    title: [\n      classNames.title,\n      {\n        fontSize: fonts.mediumPlus.fontSize,\n        paddingRight: '14px',\n        paddingLeft: '14px',\n        paddingBottom: '5px',\n        paddingTop: '5px',\n        backgroundColor: semanticColors.menuItemBackgroundPressed,\n      },\n    ],\n    subComponentStyles: {\n      callout: {\n        root: {\n          boxShadow: effects.elevation8,\n        },\n      },\n      menuItem: {},\n    },\n  };\n};\n", "import { memoizeFunction } from '../../Utilities';\nimport { getGlobalClassNames, mergeStyleSets } from '../../Styling';\nimport type { ITheme } from '../../Styling';\nimport type { IButtonStyles } from './Button.types';\n\nexport interface IButtonClassNames {\n  root?: string;\n  flexContainer?: string;\n  textContainer?: string;\n  icon?: string;\n  label?: string;\n  menuIcon?: string;\n  description?: string;\n  screenReaderText?: string;\n}\n\nexport const ButtonGlobalClassNames = {\n  msButton: 'ms-Button',\n  msButtonHasMenu: 'ms-Button--hasMenu',\n  msButtonIcon: 'ms-Button-icon',\n  msButtonMenuIcon: 'ms-Button-menuIcon',\n  msButtonLabel: 'ms-Button-label',\n  msButtonDescription: 'ms-Button-description',\n  msButtonScreenReaderText: 'ms-Button-screenReaderText',\n  msButtonFlexContainer: 'ms-Button-flexContainer',\n  msButtonTextContainer: 'ms-Button-textContainer',\n};\n\nexport const getBaseButtonClassNames = memoizeFunction(\n  (\n    theme: ITheme,\n    styles: IButtonStyles,\n    className: string,\n    variantClassName: string,\n    iconClassName: string | undefined,\n    menuIconClassName: string | undefined,\n    disabled: boolean,\n    hasMenu: boolean,\n    checked: boolean,\n    expanded: boolean,\n    isSplit: boolean | undefined,\n  ): IButtonClassNames => {\n    const classNames = getGlobalClassNames(ButtonGlobalClassNames, theme || {});\n\n    const isExpanded = expanded && !isSplit;\n    return mergeStyleSets({\n      root: [\n        classNames.msButton,\n        styles.root,\n        variantClassName,\n        checked && ['is-checked', styles.rootChecked],\n        isExpanded && [\n          'is-expanded',\n          styles.rootExpanded,\n          {\n            selectors: {\n              [`:hover .${classNames.msButtonIcon}`]: styles.iconExpandedHovered,\n              // menuIcon falls back to rootExpandedHovered to support original behavior\n              [`:hover .${classNames.msButtonMenuIcon}`]: styles.menuIconExpandedHovered || styles.rootExpandedHovered,\n              ':hover': styles.rootExpandedHovered,\n            },\n          },\n        ],\n        hasMenu && [ButtonGlobalClassNames.msButtonHasMenu, styles.rootHasMenu],\n        disabled && ['is-disabled', styles.rootDisabled],\n        !disabled &&\n          !isExpanded &&\n          !checked && {\n            selectors: {\n              ':hover': styles.rootHovered,\n              [`:hover .${classNames.msButtonLabel}`]: styles.labelHovered,\n              [`:hover .${classNames.msButtonIcon}`]: styles.iconHovered,\n              [`:hover .${classNames.msButtonDescription}`]: styles.descriptionHovered,\n              [`:hover .${classNames.msButtonMenuIcon}`]: styles.menuIconHovered,\n              ':focus': styles.rootFocused,\n              ':active': styles.rootPressed,\n              [`:active .${classNames.msButtonIcon}`]: styles.iconPressed,\n              [`:active .${classNames.msButtonDescription}`]: styles.descriptionPressed,\n              [`:active .${classNames.msButtonMenuIcon}`]: styles.menuIconPressed,\n            },\n          },\n        disabled && checked && [styles.rootCheckedDisabled],\n        !disabled &&\n          checked && {\n            selectors: {\n              ':hover': styles.rootCheckedHovered,\n              ':active': styles.rootCheckedPressed,\n            },\n          },\n        className,\n      ],\n      flexContainer: [classNames.msButtonFlexContainer, styles.flexContainer],\n      textContainer: [classNames.msButtonTextContainer, styles.textContainer],\n      icon: [\n        classNames.msButtonIcon,\n        iconClassName,\n        styles.icon,\n        isExpanded && styles.iconExpanded,\n        checked && styles.iconChecked,\n        disabled && styles.iconDisabled,\n      ],\n      label: [classNames.msButtonLabel, styles.label, checked && styles.labelChecked, disabled && styles.labelDisabled],\n      menuIcon: [\n        classNames.msButtonMenuIcon,\n        menuIconClassName,\n        styles.menuIcon,\n        checked && styles.menuIconChecked,\n        disabled && !isSplit && styles.menuIconDisabled,\n        !disabled &&\n          !isExpanded &&\n          !checked && {\n            selectors: {\n              ':hover': styles.menuIconHovered,\n              ':active': styles.menuIconPressed,\n            },\n          },\n        isExpanded && ['is-expanded', styles.menuIconExpanded],\n      ],\n      description: [\n        classNames.msButtonDescription,\n        styles.description,\n        checked && styles.descriptionChecked,\n        disabled && styles.descriptionDisabled,\n      ],\n      screenReaderText: [classNames.msButtonScreenReaderText, styles.screenReaderText],\n    });\n  },\n);\n", "import { memoizeFunction } from '../../../Utilities';\nimport { mergeStyles } from '../../../Styling';\nimport type { IButtonStyles } from '../Button.types';\n\nexport interface ISplitButtonClassNames {\n  root?: string;\n  icon?: string;\n  splitButtonContainer?: string;\n  flexContainer?: string;\n  divider?: string;\n}\n\nexport const getSplitButtonClassNames = memoizeFunction(\n  (\n    styles: IButtonStyles,\n    disabled: boolean,\n    expanded: boolean,\n    checked: boolean,\n    primaryDisabled?: boolean,\n  ): ISplitButtonClassNames => {\n    return {\n      root: mergeStyles(\n        styles.splitButtonMenuButton,\n        expanded && [styles.splitButtonMenuButtonExpanded],\n        disabled && [styles.splitButtonMenuButtonDisabled],\n        checked && !disabled && [styles.splitButtonMenuButtonChecked],\n        primaryDisabled &&\n          !disabled && [\n            {\n              selectors: {\n                ':focus': styles.splitButtonMenuFocused,\n              },\n            },\n          ],\n      ),\n\n      splitButtonContainer: mergeStyles(\n        styles.splitButtonContainer,\n        !disabled &&\n          checked && [\n            styles.splitButtonContainerChecked,\n            {\n              selectors: {\n                ':hover': styles.splitButtonContainerCheckedHovered,\n              },\n            },\n          ],\n        !disabled &&\n          !checked && [\n            {\n              selectors: {\n                ':hover': styles.splitButtonContainerHovered,\n                ':focus': styles.splitButtonContainerFocused,\n              },\n            },\n          ],\n        disabled && styles.splitButtonContainerDisabled,\n      ),\n\n      icon: mergeStyles(\n        styles.splitButtonMenuIcon,\n        disabled && styles.splitButtonMenuIconDisabled,\n        !disabled && primaryDisabled && styles.splitButtonMenuIcon,\n      ),\n\n      flexContainer: mergeStyles(styles.splitButtonFlexContainer),\n\n      divider: mergeStyles(\n        styles.splitButtonDivider,\n        (primaryDisabled || disabled) && styles.splitButtonDividerDisabled,\n      ),\n    };\n  },\n);\n", "import * as React from 'react';\nimport { BaseButton } from './BaseButton';\nimport { Button } from './Button';\nimport { KeyCodes } from '../../Utilities';\nimport type { IButtonClassNames } from './BaseButton.classNames';\nimport type { ISplitButtonClassNames } from './SplitButton/SplitButton.classNames';\nimport type { IRefObject, IRenderFunction, IComponentAs } from '../../Utilities';\nimport type { IContextualMenuProps } from '../../ContextualMenu';\nimport type { IIconProps } from '../../Icon';\nimport type { IStyle, ITheme } from '../../Styling';\nimport type { IKeytipProps } from '../../Keytip';\n\n/**\n * {@docCategory Button}\n */\nexport interface IButton {\n  /**\n   * Sets focus to the button.\n   */\n  focus: () => void;\n\n  /**\n   * If there is a menu associated with this button and it is visible, this will dismiss the menu\n   */\n  dismissMenu: () => void;\n\n  /**\n   * If there is a menu associated with this button and it is visible, this will open the menu.\n   * Params are optional overrides to the ones defined in `menuProps` to apply to just this instance of\n   * opening the menu.\n   *\n   * @param shouldFocusOnContainer - override to the ContextualMenu `shouldFocusOnContainer` prop.\n   * BaseButton implementation defaults to `undefined`.\n   * Avoid using `shouldFocusOnContainer` as it breaks the default focus behaviour when using\n   * assistive technologies.\n   * @param shouldFocusOnMount - override to the ContextualMenu `shouldFocusOnMount` prop.\n   * BaseButton implementation defaults to `true`.\n   */\n  openMenu: (shouldFocusOnContainer?: boolean, shouldFocusOnMount?: boolean) => void;\n}\n\n/**\n * {@docCategory Button}\n */\n/* eslint-disable deprecation/deprecation */\nexport interface IButtonProps\n  extends React.AllHTMLAttributes<\n    HTMLAnchorElement | HTMLButtonElement | HTMLDivElement | BaseButton | Button | HTMLSpanElement\n  > {\n  /* eslint-enable deprecation/deprecation */\n  /**\n   * Optional callback to access the `IButton` interface. Use this instead of `ref` for accessing\n   * the public methods and properties of the component.\n   */\n  componentRef?: IRefObject<IButton>;\n\n  /**\n   * Optional callback to access the root DOM element.\n   * @deprecated Temporary solution which will be replaced with ref in the V8 release.\n   */\n  elementRef?: React.Ref<HTMLElement>;\n\n  /**\n   * If provided, this component will be rendered as an anchor.\n   * @defaultvalue ElementType.anchor\n   */\n  href?: string;\n\n  /**\n   * Changes the visual presentation of the button to be emphasized.\n   * @defaultvalue false\n   */\n  primary?: boolean;\n\n  /**\n   * Unique ID to identify the item. Typically a duplicate of key value.\n   */\n  uniqueId?: string | number;\n\n  /**\n   * Whether the button is disabled\n   */\n  disabled?: boolean;\n\n  /**\n   * Whether the button can have focus in disabled mode\n   */\n  allowDisabledFocus?: boolean;\n\n  /**\n   * If set to true and this is a split button (`split` is true), the split button's primary action is disabled.\n   */\n  primaryDisabled?: boolean;\n\n  /**\n   * Custom styling for individual elements within the button DOM.\n   */\n  styles?: IButtonStyles;\n\n  /**\n   * Theme provided by HOC.\n   */\n  theme?: ITheme;\n\n  /**\n   * Whether the button is checked. Should be used with the `toggle` attribute when creating a standalone on/off button.\n   */\n  checked?: boolean;\n\n  /**\n   * Whether button is a toggle button with distinct on and off states. This should be true for buttons that permanently\n   * change state when a press event finishes, such as a volume mute button.\n   */\n  toggle?: boolean;\n\n  /**\n   * If provided, additional class name to provide on the root element.\n   */\n  className?: string;\n\n  /**\n   * The aria label of the button for the benefit of screen readers.\n   */\n  ariaLabel?: string;\n\n  /**\n   * Detailed description of the button for the benefit of screen readers.\n   *\n   * Besides the compound button, other button types will need more information provided to screen reader.\n   */\n  ariaDescription?: string;\n\n  /**\n   * If true, add an `aria-hidden` attribute instructing screen readers to ignore the element.\n   */\n  ariaHidden?: boolean;\n\n  /**\n   * Text to render button label. If text is supplied, it will override any string in button children.\n   * Other children components will be passed through after the text.\n   */\n  text?: string;\n\n  /**\n   * The props for the icon shown in the button.\n   */\n  iconProps?: IIconProps;\n\n  /**\n   * Props for button menu. Providing this will default to showing the menu icon. See `menuIconProps` for overriding\n   * how the default icon looks. Providing this in addition to `onClick` and setting the `split` property to `true`\n   * will render a SplitButton.\n   */\n  menuProps?: IContextualMenuProps;\n\n  /**\n   * Callback that runs after Button's contextual menu was closed (removed from the DOM)\n   */\n  onAfterMenuDismiss?: () => void;\n\n  /**\n   * If set to true, and if `menuProps` and `onClick` are provided, the button will render as a SplitButton.\n   * @default false\n   */\n  split?: boolean;\n\n  /**\n   * The props for the icon shown when providing a menu dropdown.\n   */\n  menuIconProps?: IIconProps;\n\n  /**\n   * Accessible label for the dropdown chevron button if this button is split.\n   */\n  splitButtonAriaLabel?: string;\n\n  /**\n   * Optional callback when menu is clicked.\n   */\n  onMenuClick?: (ev?: React.MouseEvent<HTMLElement> | React.KeyboardEvent<HTMLElement>, button?: IButtonProps) => void;\n\n  /**\n   * Custom render function for the icon\n   */\n  onRenderIcon?: IRenderFunction<IButtonProps>;\n\n  /**\n   * Custom render function for the label text.\n   */\n  onRenderText?: IRenderFunction<IButtonProps>;\n\n  /**\n   * Custom render function for the description text.\n   */\n  onRenderDescription?: IRenderFunction<IButtonProps>;\n\n  /**\n   * Custom render function for the aria description element.\n   */\n  onRenderAriaDescription?: IRenderFunction<IButtonProps>;\n\n  /**\n   * Custom render function for rendering the button children.\n   */\n  onRenderChildren?: IRenderFunction<IButtonProps>;\n\n  /**\n   * Custom render function for button menu icon\n   */\n  onRenderMenuIcon?: IRenderFunction<IButtonProps>;\n\n  /**\n   * @deprecated Deprecated at v6.3.2, to be removed at \\>= v7.0.0.\n   * Use `menuAs` instead.\n   */\n  onRenderMenu?: IRenderFunction<IContextualMenuProps>;\n\n  /**\n   * Render a custom menu in place of the normal one.\n   */\n  menuAs?: IComponentAs<IContextualMenuProps>;\n\n  /**\n   * Description of the action this button takes.\n   * Only used for compound buttons.\n   */\n  secondaryText?: string;\n\n  /**\n   * @defaultvalue ButtonType.default\n   * @deprecated Deprecated at v1.2.3, to be removed at \\>= v2.0.0.\n   * Use specific button component instead.\n   */\n\n  buttonType?: ButtonType;\n\n  /**\n   * @deprecated Deprecated at v0.56.2, to be removed at \\>= v1.0.0.\n   * Use native props on the Button itself instead.\n   * They will be mixed into the button/anchor element rendered by the component.\n   */\n  rootProps?: React.ButtonHTMLAttributes<HTMLButtonElement> | React.AnchorHTMLAttributes<HTMLAnchorElement>;\n\n  /**\n   * @deprecated No longer used. Use `checked` if setting state.\n   */\n  toggled?: boolean;\n\n  /**\n   * Any custom data the developer wishes to associate with the button.\n   */\n  data?: any;\n\n  /**\n   * Method to provide the classnames to style a button.\n   * The default value for this prop is the `getClassnames` func defined in `BaseButton.classnames.ts`.\n   * @defaultvalue getBaseButtonClassNames\n   */\n  getClassNames?: (\n    theme: ITheme,\n    className: string,\n    variantClassName: string,\n    iconClassName: string | undefined,\n    menuIconClassName: string | undefined,\n    disabled: boolean,\n    checked: boolean,\n    expanded: boolean,\n    hasMenu: boolean,\n    isSplit: boolean | undefined,\n    allowDisabledFocus: boolean,\n  ) => IButtonClassNames;\n\n  /**\n   * Method to provide the classnames to style a button.\n   * The default value for this prop is the `getClassnames` func defined in `BaseButton.classnames.ts`.\n   * @defaultvalue getBaseSplitButtonClassNames\n   */\n  getSplitButtonClassNames?: (\n    disabled: boolean,\n    expanded: boolean,\n    checked: boolean,\n    allowDisabledFocus: boolean,\n  ) => ISplitButtonClassNames;\n\n  /**\n   * Provides a custom KeyCode that can be used to open the button menu.\n   * A value of `null` can be provided to disable opening the button menu with a key press.\n   * @default KeyCodes.down\n   */\n  menuTriggerKeyCode?: KeyCodes | null;\n\n  /**\n   * Optional keytip for this button\n   */\n  keytipProps?: IKeytipProps;\n\n  /**\n   * Menu will not be created or destroyed when opened or closed, instead it\n   * will be hidden. This will improve perf of the menu opening but could potentially\n   * impact overall perf by having more elements in the dom. Should only be used\n   * when menu perf is important.\n   *\n   * Note: This may increase the amount of time it takes for the button itself to mount.\n   */\n  persistMenu?: boolean;\n\n  /**\n   * If true, the persisted menu is rendered hidden when the button initially mounts.\n   * Non-persisted menus will not be in the component tree unless they are being shown.\n   *\n   * Note: This increases the time the button will take to mount, but\n   * can improve perceived menu open perf. when the user opens the menu.\n   *\n   * @defaultvalue `undefined`, equivalent to false\n   *\n   * @deprecated There is known bug in Edge when this prop is true where scrollbars\n   * overlap with the content when a menu is first rendered hidden.\n   * Please do not start using this. If you are already using this,\n   * please make sure that you are doing so only in non-Edge browsers.\n   * See: https://github.com/microsoft/fluentui/issues/9034\n   */\n  renderPersistedMenuHiddenOnMount?: boolean;\n\n  /**\n   * Experimental prop that get passed into the menuButton that's rendered as part of\n   * split button. Anything passed in will likely need to have accompanying\n   * style changes.\n   */\n  splitButtonMenuProps?: IButtonProps;\n\n  /**\n   * Style for the description text if applicable (for compound buttons).\n   * @deprecated Use `secondaryText` instead.\n   */\n  description?: string;\n\n  /**\n   * yet unknown docs\n   */\n  defaultRender?: any;\n\n  /**\n   * Optional props to be applied only to the primary action button of SplitButton and not to the\n   * overall SplitButton container\n   */\n  primaryActionButtonProps?: IButtonProps;\n}\n\n/**\n * {@docCategory Button}\n */\nexport enum ElementType {\n  /** `button` element. */\n  button = 0,\n  /** `a` element. */\n  anchor = 1,\n}\n\n/**\n * {@docCategory Button}\n */\nexport enum ButtonType {\n  normal = 0,\n  primary = 1,\n  hero = 2,\n  compound = 3,\n  command = 4,\n  icon = 5,\n  default = 6,\n}\n\n/**\n * {@docCategory Button}\n */\nexport interface IButtonStyles {\n  /**\n   * Style for the root element in the default enabled, non-toggled state.\n   */\n  root?: IStyle;\n\n  /**\n   * Style override for the root element in a checked state, layered on top of the root style.\n   */\n  rootChecked?: IStyle;\n\n  /**\n   * Style override for the root element in a disabled state, layered on top of the root style.\n   */\n  rootDisabled?: IStyle;\n\n  /**\n   * Style override applied to the root on hover in the default, enabled, non-toggled state.\n   */\n  rootHovered?: IStyle;\n\n  /**\n   * Style override applied to the root on focus in the default, enabled, non-toggled state.\n   */\n  rootFocused?: IStyle;\n\n  /**\n   * Style override applied to the root on pressed in the default, enabled, non-toggled state.\n   */\n  rootPressed?: IStyle;\n\n  /**\n   * Style override applied to the root on when menu is expanded in the default, enabled, non-toggled state.\n   */\n  rootExpanded?: IStyle;\n\n  /**\n   * Style override applied to the root on hover in a checked, enabled state\n   */\n  rootCheckedHovered?: IStyle;\n\n  /**\n   * Style override applied to the root on pressed in a checked, enabled state\n   */\n  rootCheckedPressed?: IStyle;\n\n  /**\n   * Style override applied to the root on hover in a checked, disabled state\n   */\n  rootCheckedDisabled?: IStyle;\n\n  /**\n   * Style override applied to the root on hover in a expanded state on hover\n   */\n  rootExpandedHovered?: IStyle;\n\n  /**\n   * Style override for the root element when it has a menu button, layered on top of the root style.\n   */\n  rootHasMenu?: IStyle;\n\n  /**\n   * Style for the flexbox container within the root element.\n   */\n  flexContainer?: IStyle;\n\n  /**\n   * Style for the text container within the flexbox container element (and contains the text and description).\n   */\n  textContainer?: IStyle;\n\n  /**\n   * Style for the icon on the near side of the label.\n   */\n  icon?: IStyle;\n\n  /**\n   * Style for the icon on the near side of the label on hover.\n   */\n  iconHovered?: IStyle;\n\n  /**\n   * Style for the icon on the near side of the label when pressed.\n   */\n  iconPressed?: IStyle;\n\n  /**\n   * Style for the icon on the near side of the label when expanded.\n   */\n  iconExpanded?: IStyle;\n\n  /**\n   * Style for the icon on the near side of the label when expanded and hovered.\n   */\n  iconExpandedHovered?: IStyle;\n\n  /**\n   * Style override for the icon when the button is disabled.\n   */\n  iconDisabled?: IStyle;\n\n  /**\n   * Style override for the icon when the button is checked.\n   */\n  iconChecked?: IStyle;\n\n  /**\n   * Style for the text content of the button.\n   */\n  label?: IStyle;\n\n  /**\n   * Style override for the text content when the button is hovered.\n   */\n  labelHovered?: IStyle;\n\n  /**\n   * Style override for the text content when the button is disabled.\n   */\n  labelDisabled?: IStyle;\n\n  /**\n   * Style override for the text content when the button is checked.\n   */\n  labelChecked?: IStyle;\n\n  /**\n   * Style for the menu chevron.\n   */\n  menuIcon?: IStyle;\n\n  /**\n   * Style for the menu chevron on hover.\n   */\n  menuIconHovered?: IStyle;\n\n  /**\n   * Style for the menu chevron when pressed.\n   */\n  menuIconPressed?: IStyle;\n\n  /**\n   * Style for the menu chevron when expanded.\n   */\n  menuIconExpanded?: IStyle;\n\n  /**\n   * Style for the menu chevron when expanded and hovered.\n   */\n  menuIconExpandedHovered?: IStyle;\n\n  /**\n   * Style override for the menu chevron when the button is disabled.\n   */\n  menuIconDisabled?: IStyle;\n\n  /**\n   * Style override for the menu chevron when the button is checked.\n   */\n  menuIconChecked?: IStyle;\n\n  /**\n   * Style for the description text if applicable (for compound buttons).\n   */\n  description?: IStyle;\n\n  /**\n   * Style for the description text if applicable (for compound buttons).\n   */\n  secondaryText?: IStyle;\n\n  /**\n   * Style override for the description text when the button is hovered.\n   */\n  descriptionHovered?: IStyle;\n\n  /**\n   * Style for the description text when the button is pressed.\n   */\n  descriptionPressed?: IStyle;\n\n  /**\n   * Style override for the description text when the button is disabled.\n   */\n  descriptionDisabled?: IStyle;\n\n  /**\n   * Style override for the description text when the button is checked.\n   */\n  descriptionChecked?: IStyle;\n\n  /**\n   * Style override for the screen reader text.\n   */\n  screenReaderText?: IStyle;\n\n  /**\n   * Style override for the container div around a SplitButton element\n   */\n  splitButtonContainer?: IStyle;\n\n  /**\n   * Style for container div around a SplitButton element when the button is hovered.\n   */\n  splitButtonContainerHovered?: IStyle;\n\n  /**\n   * Style for container div around a SplitButton element when the button is focused.\n   */\n  splitButtonContainerFocused?: IStyle;\n\n  /**\n   * Style for container div around a SplitButton element when the button is checked.\n   */\n  splitButtonContainerChecked?: IStyle;\n\n  /**\n   * Style for container div around a SplitButton element when the button is checked and hovered.\n   */\n  splitButtonContainerCheckedHovered?: IStyle;\n\n  /**\n   * Style override for the container div around a SplitButton element in a disabled state\n   */\n  splitButtonContainerDisabled?: IStyle;\n\n  /**\n   * Style override for the divider element that appears between the button and menu button\n   * for a split button.\n   */\n  splitButtonDivider?: IStyle;\n\n  /**\n   * Style override for the divider element that appears between the button and menu button\n   * for a split button in a disabled state.\n   */\n  splitButtonDividerDisabled?: IStyle;\n\n  /**\n   * Style override for the SplitButton menu button\n   */\n  splitButtonMenuButton?: IStyle;\n\n  /**\n   * Style override for the SplitButton menu button element in a disabled state.\n   */\n  splitButtonMenuButtonDisabled?: IStyle;\n\n  /**\n   * Style override for the SplitButton menu button element in a checked state\n   */\n  splitButtonMenuButtonChecked?: IStyle;\n\n  /**\n   * Style override for the SplitButton menu button element in an expanded state\n   */\n  splitButtonMenuButtonExpanded?: IStyle;\n\n  /**\n   * Style override for the SplitButton menu icon element\n   */\n  splitButtonMenuIcon?: IStyle;\n\n  /**\n   * Style override for the SplitButton menu icon element in a disabled state\n   */\n  splitButtonMenuIconDisabled?: IStyle;\n\n  /**\n   * Style override for the SplitButton FlexContainer.\n   */\n  splitButtonFlexContainer?: IStyle;\n\n  /**\n   * Style override for the SplitButton when only primaryButton is in a disabled state\n   */\n  splitButtonMenuFocused?: IStyle;\n}\n", "import * as React from 'react';\n\nimport { warn } from '../../Utilities';\nimport { ButtonType } from './Button.types';\nimport { DefaultButton } from './DefaultButton/DefaultButton';\nimport { ActionButton } from './ActionButton/ActionButton';\nimport { CompoundButton } from './CompoundButton/CompoundButton';\nimport { IconButton } from './IconButton/IconButton';\nimport { PrimaryButton } from './PrimaryButton/PrimaryButton';\nimport type { IButtonProps } from './Button.types';\n\n/**\n * This class is deprecated. Use the individual *Button components instead.\n * @deprecated Use the individual *Button components instead.\n * {@docCategory Button}\n */\nexport class Button extends React.Component<IButtonProps, {}> {\n  constructor(props: IButtonProps) {\n    super(props);\n\n    warn(\n      `The Button component has been deprecated. Use specific variants instead. ` +\n        `(PrimaryButton, DefaultButton, IconButton, ActionButton, etc.)`,\n    );\n  }\n\n  public render(): JSX.Element {\n    const props = this.props;\n\n    // eslint-disable-next-line deprecation/deprecation\n    switch (props.buttonType) {\n      case ButtonType.command:\n        return <ActionButton {...props} />;\n\n      case ButtonType.compound:\n        return <CompoundButton {...props} />;\n\n      case ButtonType.icon:\n        return <IconButton {...props} />;\n\n      case ButtonType.primary:\n        return <PrimaryButton {...props} />;\n\n      default:\n        return <DefaultButton {...props} />;\n    }\n  }\n}\n", "import * as React from 'react';\nimport { BaseButton } from '../BaseButton';\nimport { customizable, nullRender } from '../../../Utilities';\nimport { getStyles } from './DefaultButton.styles';\nimport type { IButtonProps } from '../Button.types';\n\n/**\n * {@docCategory Button}\n */\n@customizable('DefaultButton', ['theme', 'styles'], true)\nexport class DefaultButton extends React.Component<IButtonProps, {}> {\n  public render(): JSX.Element {\n    const { primary = false, styles, theme } = this.props;\n\n    return (\n      <BaseButton\n        {...this.props}\n        variantClassName={primary ? 'ms-Button--primary' : 'ms-Button--default'}\n        styles={getStyles(theme!, styles, primary)}\n        onRenderDescription={nullRender}\n      />\n    );\n  }\n}\n", "import { memoizeFunction } from '../../Utilities';\nimport { HighContrastSelector, getFocusStyle, hiddenContentStyle } from '../../Styling';\nimport type { IButtonStyles } from './Button.types';\nimport type { ITheme, IRawStyle } from '../../Styling';\n\nconst noOutline: IRawStyle = {\n  outline: 0,\n};\n\nconst iconStyle = (fontSize?: string | number): IRawStyle => {\n  return {\n    fontSize,\n    margin: '0 4px',\n    height: '16px',\n    lineHeight: '16px',\n    textAlign: 'center',\n    flexShrink: 0,\n  };\n};\n\n/**\n * Gets the base button styles. Note: because it is a base class to be used with the `mergeRules`\n * helper, it should have values for all class names in the interface. This let `mergeRules` optimize\n * mixing class names together.\n */\nexport const getStyles = memoizeFunction((theme: ITheme): IButtonStyles => {\n  const { semanticColors, effects, fonts } = theme;\n\n  const border = semanticColors.buttonBorder;\n  const disabledBackground = semanticColors.disabledBackground;\n  const disabledText = semanticColors.disabledText;\n  const buttonHighContrastFocus = {\n    left: -2,\n    top: -2,\n    bottom: -2,\n    right: -2,\n    outlineColor: 'ButtonText',\n  };\n\n  return {\n    root: [\n      getFocusStyle(theme, { inset: 1, highContrastStyle: buttonHighContrastFocus, borderColor: 'transparent' }),\n      theme.fonts.medium,\n      {\n        border: '1px solid ' + border,\n        borderRadius: effects.roundedCorner2,\n        boxSizing: 'border-box',\n        cursor: 'pointer',\n        display: 'inline-block',\n        padding: '0 16px',\n        textDecoration: 'none',\n        textAlign: 'center',\n        userSelect: 'none',\n\n        selectors: {\n          // IE11 workaround for preventing shift of child elements of a button when active.\n          ':active > span': {\n            position: 'relative',\n            left: 0,\n            top: 0,\n          },\n        },\n      },\n    ],\n\n    rootDisabled: [\n      getFocusStyle(theme, { inset: 1, highContrastStyle: buttonHighContrastFocus, borderColor: 'transparent' }),\n      {\n        backgroundColor: disabledBackground,\n        borderColor: disabledBackground,\n        color: disabledText,\n        cursor: 'default',\n        selectors: {\n          ':hover': noOutline,\n          ':focus': noOutline,\n        },\n      },\n    ],\n\n    iconDisabled: {\n      color: disabledText,\n      selectors: {\n        [HighContrastSelector]: {\n          color: 'GrayText',\n        },\n      },\n    },\n\n    menuIconDisabled: {\n      color: disabledText,\n      selectors: {\n        [HighContrastSelector]: {\n          color: 'GrayText',\n        },\n      },\n    },\n\n    flexContainer: {\n      display: 'flex',\n      height: '100%',\n      flexWrap: 'nowrap',\n      justifyContent: 'center',\n      alignItems: 'center',\n    },\n    description: {\n      display: 'block',\n    },\n\n    textContainer: {\n      flexGrow: 1,\n      display: 'block',\n    },\n\n    icon: iconStyle(fonts.mediumPlus.fontSize),\n\n    menuIcon: iconStyle(fonts.small.fontSize),\n\n    label: {\n      margin: '0 4px',\n      lineHeight: '100%',\n      display: 'block',\n    },\n\n    screenReaderText: hiddenContentStyle,\n  };\n});\n", "import { HighContrastSelector, concatStyleSets, getFocusStyle, getHighContrastNoAdjustStyle } from '../../../Styling';\nimport { memoizeFunction } from '../../../Utilities';\nimport type { IButtonStyles } from '../Button.types';\nimport type { ITheme, IStyle } from '../../../Styling';\n\nexport const getStyles = memoizeFunction((theme: ITheme, customStyles?: IButtonStyles): IButtonStyles => {\n  const { effects, palette, semanticColors } = theme;\n\n  const buttonHighContrastFocus = {\n    left: -2,\n    top: -2,\n    bottom: -2,\n    right: -2,\n    border: 'none',\n  };\n\n  const splitButtonDividerBaseStyles: IStyle = {\n    position: 'absolute',\n    width: 1,\n    right: 31,\n    top: 8,\n    bottom: 8,\n  };\n\n  const splitButtonStyles: IButtonStyles = {\n    splitButtonContainer: [\n      getFocusStyle(theme, { highContrastStyle: buttonHighContrastFocus, inset: 2, pointerEvents: 'none' }),\n      {\n        display: 'inline-flex',\n        selectors: {\n          '.ms-Button--default': {\n            borderTopRightRadius: '0',\n            borderBottomRightRadius: '0',\n            borderRight: 'none',\n            flexGrow: '1',\n          },\n          '.ms-Button--primary': {\n            borderTopRightRadius: '0',\n            borderBottomRightRadius: '0',\n            border: 'none',\n            flexGrow: '1',\n\n            selectors: {\n              [HighContrastSelector]: {\n                color: 'WindowText',\n                backgroundColor: 'Window',\n                border: '1px solid WindowText',\n                borderRightWidth: '0',\n                ...getHighContrastNoAdjustStyle(),\n              },\n              ':hover': {\n                border: 'none',\n              },\n              ':active': {\n                border: 'none',\n              },\n            },\n          },\n          '.ms-Button--primary + .ms-Button': {\n            border: 'none',\n            selectors: {\n              [HighContrastSelector]: {\n                border: '1px solid WindowText',\n                borderLeftWidth: '0',\n              },\n            },\n          },\n        },\n      },\n    ],\n    splitButtonContainerHovered: {\n      selectors: {\n        '.ms-Button--primary': {\n          selectors: {\n            [HighContrastSelector]: {\n              color: 'Window',\n              backgroundColor: 'Highlight',\n            },\n          },\n        },\n        '.ms-Button.is-disabled': {\n          color: semanticColors.buttonTextDisabled,\n          selectors: {\n            [HighContrastSelector]: {\n              color: 'GrayText',\n              borderColor: 'GrayText',\n              backgroundColor: 'Window',\n            },\n          },\n        },\n      },\n    },\n    splitButtonContainerChecked: {\n      selectors: {\n        '.ms-Button--primary': {\n          selectors: {\n            [HighContrastSelector]: {\n              color: 'Window',\n              backgroundColor: 'WindowText',\n              ...getHighContrastNoAdjustStyle(),\n            },\n          },\n        },\n      },\n    },\n    splitButtonContainerCheckedHovered: {\n      selectors: {\n        '.ms-Button--primary': {\n          selectors: {\n            [HighContrastSelector]: {\n              color: 'Window',\n              backgroundColor: 'WindowText',\n              ...getHighContrastNoAdjustStyle(),\n            },\n          },\n        },\n      },\n    },\n    splitButtonContainerFocused: {\n      outline: 'none!important',\n    },\n    splitButtonMenuButton: {\n      padding: 6,\n      height: 'auto',\n      boxSizing: 'border-box',\n      borderRadius: 0,\n      borderTopRightRadius: effects.roundedCorner2,\n      borderBottomRightRadius: effects.roundedCorner2,\n      border: `1px solid ${palette.neutralSecondaryAlt}`,\n      borderLeft: 'none',\n      outline: 'transparent',\n      userSelect: 'none',\n      display: 'inline-block',\n      textDecoration: 'none',\n      textAlign: 'center',\n      cursor: 'pointer',\n      verticalAlign: 'top',\n      width: 32,\n      marginLeft: -1,\n      marginTop: 0,\n      marginRight: 0,\n      marginBottom: 0,\n      [HighContrastSelector]: {\n        '.ms-Button-menuIcon': {\n          color: 'WindowText',\n        },\n      },\n    },\n    splitButtonDivider: {\n      ...splitButtonDividerBaseStyles,\n      selectors: {\n        [HighContrastSelector]: {\n          backgroundColor: 'WindowText',\n        },\n      },\n    },\n    splitButtonDividerDisabled: {\n      ...splitButtonDividerBaseStyles,\n      selectors: {\n        [HighContrastSelector]: {\n          backgroundColor: 'GrayText',\n        },\n      },\n    },\n    splitButtonMenuButtonDisabled: {\n      pointerEvents: 'none',\n      border: 'none',\n      selectors: {\n        ':hover': {\n          cursor: 'default',\n        },\n\n        '.ms-Button--primary': {\n          selectors: {\n            [HighContrastSelector]: {\n              color: 'GrayText',\n              borderColor: 'GrayText',\n              backgroundColor: 'Window',\n            },\n          },\n        },\n        '.ms-Button-menuIcon': {\n          selectors: {\n            [HighContrastSelector]: {\n              color: 'GrayText',\n            },\n          },\n        },\n        [HighContrastSelector]: {\n          color: 'GrayText',\n          border: '1px solid GrayText',\n          backgroundColor: 'Window',\n        },\n      },\n    },\n\n    splitButtonFlexContainer: {\n      display: 'flex',\n      height: '100%',\n      flexWrap: 'nowrap',\n      justifyContent: 'center',\n      alignItems: 'center',\n    },\n\n    splitButtonContainerDisabled: {\n      outline: 'none',\n      border: 'none',\n      selectors: {\n        [HighContrastSelector]: {\n          color: 'GrayText',\n          borderColor: 'GrayText',\n          backgroundColor: 'Window',\n          ...getHighContrastNoAdjustStyle(),\n        },\n      },\n    },\n    splitButtonMenuFocused: {\n      ...getFocusStyle(theme, { highContrastStyle: buttonHighContrastFocus, inset: 2 }),\n    },\n  };\n\n  return concatStyleSets(splitButtonStyles, customStyles)!;\n});\n", "import { HighContrastSelector, getHighContrastNoAdjustStyle } from '../../Styling';\nimport { IsFocusVisibleClassName } from '../../Utilities';\nimport type { IButtonStyles } from './Button.types';\nimport type { ITheme, IRawStyle } from '../../Styling';\n\nconst splitButtonDividerBaseStyles = (): IRawStyle => {\n  return {\n    position: 'absolute',\n    width: 1,\n    right: 31,\n    top: 8,\n    bottom: 8,\n  };\n};\n\nexport function standardStyles(theme: ITheme): IButtonStyles {\n  const { semanticColors: s, palette: p } = theme;\n\n  const buttonBackground = s.buttonBackground;\n  const buttonBackgroundPressed = s.buttonBackgroundPressed;\n  const buttonBackgroundHovered = s.buttonBackgroundHovered;\n  const buttonBackgroundDisabled = s.buttonBackgroundDisabled;\n\n  const buttonText = s.buttonText;\n  const buttonTextHovered = s.buttonTextHovered;\n  const buttonTextDisabled = s.buttonTextDisabled;\n  const buttonTextChecked = s.buttonTextChecked;\n  const buttonTextCheckedHovered = s.buttonTextCheckedHovered;\n\n  return {\n    root: {\n      backgroundColor: buttonBackground,\n      color: buttonText,\n    },\n\n    rootHovered: {\n      backgroundColor: buttonBackgroundHovered,\n      color: buttonTextHovered,\n      selectors: {\n        [HighContrastSelector]: {\n          borderColor: 'Highlight',\n          color: 'Highlight',\n        },\n      },\n    },\n\n    rootPressed: {\n      backgroundColor: buttonBackgroundPressed,\n      color: buttonTextChecked,\n    },\n\n    rootExpanded: {\n      backgroundColor: buttonBackgroundPressed,\n      color: buttonTextChecked,\n    },\n\n    rootChecked: {\n      backgroundColor: buttonBackgroundPressed,\n      color: buttonTextChecked,\n    },\n\n    rootCheckedHovered: {\n      backgroundColor: buttonBackgroundPressed,\n      color: buttonTextCheckedHovered,\n    },\n\n    rootDisabled: {\n      color: buttonTextDisabled,\n      backgroundColor: buttonBackgroundDisabled,\n      selectors: {\n        [HighContrastSelector]: {\n          color: 'GrayText',\n          borderColor: 'GrayText',\n          backgroundColor: 'Window',\n        },\n      },\n    },\n\n    // Split button styles\n    splitButtonContainer: {\n      selectors: {\n        [HighContrastSelector]: {\n          border: 'none',\n        },\n      },\n    },\n\n    splitButtonMenuButton: {\n      color: p.white,\n      backgroundColor: 'transparent',\n      selectors: {\n        ':hover': {\n          backgroundColor: p.neutralLight,\n          selectors: {\n            [HighContrastSelector]: {\n              color: 'Highlight',\n            },\n          },\n        },\n      },\n    },\n\n    splitButtonMenuButtonDisabled: {\n      backgroundColor: s.buttonBackgroundDisabled,\n      selectors: {\n        ':hover': {\n          backgroundColor: s.buttonBackgroundDisabled,\n        },\n      },\n    },\n\n    splitButtonDivider: {\n      ...splitButtonDividerBaseStyles(),\n      backgroundColor: p.neutralTertiaryAlt,\n      selectors: {\n        [HighContrastSelector]: {\n          backgroundColor: 'WindowText',\n        },\n      },\n    },\n\n    splitButtonDividerDisabled: {\n      backgroundColor: theme.palette.neutralTertiaryAlt,\n    },\n\n    splitButtonMenuButtonChecked: {\n      backgroundColor: p.neutralQuaternaryAlt,\n      selectors: {\n        ':hover': {\n          backgroundColor: p.neutralQuaternaryAlt,\n        },\n      },\n    },\n\n    splitButtonMenuButtonExpanded: {\n      backgroundColor: p.neutralQuaternaryAlt,\n      selectors: {\n        ':hover': {\n          backgroundColor: p.neutralQuaternaryAlt,\n        },\n      },\n    },\n\n    splitButtonMenuIcon: {\n      color: s.buttonText,\n    },\n\n    splitButtonMenuIconDisabled: {\n      color: s.buttonTextDisabled,\n    },\n  };\n}\n\nexport function primaryStyles(theme: ITheme): IButtonStyles {\n  const { palette: p, semanticColors: s } = theme;\n\n  return {\n    root: {\n      backgroundColor: s.primaryButtonBackground,\n      border: `1px solid ${s.primaryButtonBackground}`,\n      color: s.primaryButtonText,\n      selectors: {\n        [HighContrastSelector]: {\n          color: 'Window',\n          backgroundColor: 'WindowText',\n          borderColor: 'WindowText',\n          ...getHighContrastNoAdjustStyle(),\n        },\n        [`.${IsFocusVisibleClassName} &:focus`]: {\n          selectors: {\n            ':after': {\n              border: `none`,\n              outlineColor: p.white,\n            },\n          },\n        },\n      },\n    },\n\n    rootHovered: {\n      backgroundColor: s.primaryButtonBackgroundHovered,\n      border: `1px solid ${s.primaryButtonBackgroundHovered}`,\n      color: s.primaryButtonTextHovered,\n      selectors: {\n        [HighContrastSelector]: {\n          color: 'Window',\n          backgroundColor: 'Highlight',\n          borderColor: 'Highlight',\n        },\n      },\n    },\n\n    rootPressed: {\n      backgroundColor: s.primaryButtonBackgroundPressed,\n      border: `1px solid ${s.primaryButtonBackgroundPressed}`,\n      color: s.primaryButtonTextPressed,\n      selectors: {\n        [HighContrastSelector]: {\n          color: 'Window',\n          backgroundColor: 'WindowText',\n          borderColor: 'WindowText',\n          ...getHighContrastNoAdjustStyle(),\n        },\n      },\n    },\n\n    rootExpanded: {\n      backgroundColor: s.primaryButtonBackgroundPressed,\n      color: s.primaryButtonTextPressed,\n    },\n\n    rootChecked: {\n      backgroundColor: s.primaryButtonBackgroundPressed,\n      color: s.primaryButtonTextPressed,\n    },\n\n    rootCheckedHovered: {\n      backgroundColor: s.primaryButtonBackgroundPressed,\n      color: s.primaryButtonTextPressed,\n    },\n\n    rootDisabled: {\n      color: s.primaryButtonTextDisabled,\n      backgroundColor: s.primaryButtonBackgroundDisabled,\n      selectors: {\n        [HighContrastSelector]: {\n          color: 'GrayText',\n          borderColor: 'GrayText',\n          backgroundColor: 'Window',\n        },\n      },\n    },\n\n    // Split button styles\n    splitButtonContainer: {\n      selectors: {\n        [HighContrastSelector]: {\n          border: 'none',\n        },\n      },\n    },\n\n    splitButtonDivider: {\n      ...splitButtonDividerBaseStyles(),\n      backgroundColor: p.white,\n      selectors: {\n        [HighContrastSelector]: {\n          backgroundColor: 'Window',\n        },\n      },\n    },\n\n    splitButtonMenuButton: {\n      backgroundColor: s.primaryButtonBackground,\n      color: s.primaryButtonText,\n      selectors: {\n        [HighContrastSelector]: {\n          backgroundColor: 'Canvas',\n        },\n        ':hover': {\n          backgroundColor: s.primaryButtonBackgroundHovered,\n          selectors: {\n            [HighContrastSelector]: {\n              color: 'Highlight',\n            },\n          },\n        },\n      },\n    },\n\n    splitButtonMenuButtonDisabled: {\n      backgroundColor: s.primaryButtonBackgroundDisabled,\n      selectors: {\n        ':hover': {\n          backgroundColor: s.primaryButtonBackgroundDisabled,\n        },\n      },\n    },\n\n    splitButtonMenuButtonChecked: {\n      backgroundColor: s.primaryButtonBackgroundPressed,\n      selectors: {\n        ':hover': {\n          backgroundColor: s.primaryButtonBackgroundPressed,\n        },\n      },\n    },\n\n    splitButtonMenuButtonExpanded: {\n      backgroundColor: s.primaryButtonBackgroundPressed,\n      selectors: {\n        ':hover': {\n          backgroundColor: s.primaryButtonBackgroundPressed,\n        },\n      },\n    },\n\n    splitButtonMenuIcon: {\n      color: s.primaryButtonText,\n    },\n\n    splitButtonMenuIconDisabled: {\n      color: p.neutralTertiary,\n\n      selectors: {\n        [HighContrastSelector]: {\n          color: 'GrayText',\n        },\n      },\n    },\n  };\n}\n", "import { concatStyleSets, FontWeights } from '../../../Styling';\nimport { memoizeFunction } from '../../../Utilities';\nimport { getStyles as getBaseButtonStyles } from '../BaseButton.styles';\nimport { getStyles as getSplitButtonStyles } from '../SplitButton/SplitButton.styles';\n\nimport { primaryStyles, standardStyles } from '../ButtonThemes';\nimport type { IButtonStyles } from '../Button.types';\nimport type { ITheme } from '../../../Styling';\n\nconst DEFAULT_BUTTON_HEIGHT = '32px';\nconst DEFAULT_BUTTON_MIN_WIDTH = '80px';\n\nexport const getStyles = memoizeFunction(\n  (theme: ITheme, customStyles?: IButtonStyles, primary?: boolean): IButtonStyles => {\n    const baseButtonStyles: IButtonStyles = getBaseButtonStyles(theme);\n    const splitButtonStyles: IButtonStyles = getSplitButtonStyles(theme);\n    const defaultButtonStyles: IButtonStyles = {\n      root: {\n        minWidth: DEFAULT_BUTTON_MIN_WIDTH,\n        height: DEFAULT_BUTTON_HEIGHT,\n      },\n      label: {\n        fontWeight: FontWeights.semibold,\n      },\n    };\n\n    return concatStyleSets(\n      baseButtonStyles,\n      defaultButtonStyles,\n      primary ? primaryStyles(theme) : standardStyles(theme),\n      splitButtonStyles,\n      customStyles,\n    )!;\n  },\n);\n", "import * as React from 'react';\nimport { BaseButton } from '../BaseButton';\nimport { customizable, nullRender } from '../../../Utilities';\nimport { getStyles } from './ActionButton.styles';\nimport type { IButtonProps } from '../Button.types';\n\n/**\n * {@docCategory Button}\n */\n@customizable('ActionButton', ['theme', 'styles'], true)\nexport class ActionButton extends React.Component<IButtonProps, {}> {\n  public render(): JSX.Element {\n    const { styles, theme } = this.props;\n\n    return (\n      <BaseButton\n        {...this.props}\n        variantClassName=\"ms-Button--action ms-Button--command\"\n        styles={getStyles(theme!, styles)}\n        onRenderDescription={nullRender}\n      />\n    );\n  }\n}\n", "import { concatStyleSets, HighContrastSelector } from '../../../Styling';\nimport { memoizeFunction } from '../../../Utilities';\nimport { getStyles as getBaseButtonStyles } from '../BaseButton.styles';\nimport type { IButtonStyles } from '../Button.types';\nimport type { ITheme } from '../../../Styling';\n\nconst DEFAULT_BUTTON_HEIGHT = '40px';\nconst DEFAULT_PADDING = '0 4px';\n\nexport const getStyles = memoizeFunction((theme: ITheme, customStyles?: IButtonStyles): IButtonStyles => {\n  const baseButtonStyles: IButtonStyles = getBaseButtonStyles(theme);\n  const actionButtonStyles: IButtonStyles = {\n    root: {\n      padding: DEFAULT_PADDING,\n      height: DEFAULT_BUTTON_HEIGHT,\n      color: theme.palette.neutralPrimary,\n      backgroundColor: 'transparent',\n      border: '1px solid transparent',\n      selectors: {\n        [HighContrastSelector]: {\n          borderColor: 'Window',\n        },\n      },\n    },\n\n    rootHovered: {\n      color: theme.palette.themePrimary,\n      selectors: {\n        [HighContrastSelector]: {\n          color: 'Highlight',\n        },\n      },\n    },\n\n    iconHovered: {\n      color: theme.palette.themePrimary,\n    },\n\n    rootPressed: {\n      color: theme.palette.black,\n    },\n\n    rootExpanded: {\n      color: theme.palette.themePrimary,\n    },\n\n    iconPressed: {\n      color: theme.palette.themeDarker,\n    },\n\n    rootDisabled: {\n      color: theme.palette.neutralTertiary,\n      backgroundColor: 'transparent',\n      borderColor: 'transparent',\n      selectors: {\n        [HighContrastSelector]: {\n          color: 'GrayText',\n        },\n      },\n    },\n\n    rootChecked: {\n      color: theme.palette.black,\n    },\n\n    iconChecked: {\n      color: theme.palette.themeDarker,\n    },\n\n    flexContainer: {\n      justifyContent: 'flex-start',\n    },\n\n    icon: {\n      color: theme.palette.themeDarkAlt,\n    },\n\n    iconDisabled: {\n      color: 'inherit',\n    },\n\n    menuIcon: {\n      color: theme.palette.neutralSecondary,\n    },\n\n    textContainer: {\n      flexGrow: 0,\n    },\n  };\n\n  return concatStyleSets(baseButtonStyles, actionButtonStyles, customStyles)!;\n});\n", "import * as React from 'react';\nimport { BaseButton } from '../BaseButton';\nimport { customizable } from '../../../Utilities';\nimport { getStyles } from './CompoundButton.styles';\nimport type { IButtonProps } from '../Button.types';\n\n/**\n * {@docCategory Button}\n */\n@customizable('CompoundButton', ['theme', 'styles'], true)\nexport class CompoundButton extends React.Component<IButtonProps, {}> {\n  public render(): JSX.Element {\n    const { primary = false, styles, theme } = this.props;\n    return (\n      <BaseButton\n        {...this.props}\n        variantClassName={primary ? 'ms-Button--compoundPrimary' : 'ms-Button--compound'}\n        styles={getStyles(theme!, styles, primary)}\n      />\n    );\n  }\n}\n", "import { concatStyleSets, FontWeights, HighContrastSelector, getHighContrastNoAdjustStyle } from '../../../Styling';\nimport { memoizeFunction } from '../../../Utilities';\nimport { getStyles as getBaseButtonStyles } from '../BaseButton.styles';\nimport { getStyles as getSplitButtonStyles } from '../SplitButton/SplitButton.styles';\nimport { primaryStyles, standardStyles } from '../ButtonThemes';\nimport type { IButtonStyles } from '../Button.types';\nimport type { ITheme } from '../../../Styling';\n\nexport const getStyles = memoizeFunction(\n  (theme: ITheme, customStyles?: IButtonStyles, primary?: boolean): IButtonStyles => {\n    const { fonts, palette } = theme;\n\n    const baseButtonStyles: IButtonStyles = getBaseButtonStyles(theme);\n    const splitButtonStyles: IButtonStyles = getSplitButtonStyles(theme);\n    const compoundButtonStyles: IButtonStyles = {\n      root: {\n        maxWidth: '280px',\n        minHeight: '72px',\n        height: 'auto',\n        padding: '16px 12px',\n      },\n\n      flexContainer: {\n        flexDirection: 'row',\n        alignItems: 'flex-start',\n        minWidth: '100%',\n        margin: '',\n      },\n\n      textContainer: {\n        textAlign: 'left',\n      },\n\n      icon: {\n        fontSize: '2em',\n        lineHeight: '1em',\n        height: '1em',\n        margin: '0px 8px 0px 0px',\n        flexBasis: '1em',\n        flexShrink: '0',\n      },\n\n      label: {\n        margin: '0 0 5px',\n        lineHeight: '100%',\n        fontWeight: FontWeights.semibold,\n      },\n      description: [\n        fonts.small,\n        {\n          lineHeight: '100%',\n        },\n      ],\n    };\n\n    const standardCompoundTheme: IButtonStyles = {\n      description: {\n        color: palette.neutralSecondary,\n      },\n\n      descriptionHovered: {\n        color: palette.neutralDark,\n      },\n\n      descriptionPressed: {\n        color: 'inherit',\n      },\n\n      descriptionChecked: {\n        color: 'inherit',\n      },\n\n      descriptionDisabled: {\n        color: 'inherit',\n      },\n    };\n\n    const primaryCompoundTheme: IButtonStyles = {\n      description: {\n        color: palette.white,\n        selectors: {\n          [HighContrastSelector]: {\n            backgroundColor: 'WindowText',\n            color: 'Window',\n            ...getHighContrastNoAdjustStyle(),\n          },\n        },\n      },\n\n      descriptionHovered: {\n        color: palette.white,\n        selectors: {\n          [HighContrastSelector]: {\n            backgroundColor: 'Highlight',\n            color: 'Window',\n          },\n        },\n      },\n\n      descriptionPressed: {\n        color: 'inherit',\n\n        selectors: {\n          [HighContrastSelector]: {\n            color: 'Window',\n            backgroundColor: 'WindowText',\n            ...getHighContrastNoAdjustStyle(),\n          },\n        },\n      },\n\n      descriptionChecked: {\n        color: 'inherit',\n\n        selectors: {\n          [HighContrastSelector]: {\n            color: 'Window',\n            backgroundColor: 'WindowText',\n            ...getHighContrastNoAdjustStyle(),\n          },\n        },\n      },\n\n      descriptionDisabled: {\n        color: 'inherit',\n        selectors: {\n          [HighContrastSelector]: {\n            color: 'inherit',\n          },\n        },\n      },\n    };\n\n    return concatStyleSets(\n      baseButtonStyles,\n      compoundButtonStyles,\n      primary ? primaryStyles(theme) : standardStyles(theme),\n      primary ? primaryCompoundTheme : standardCompoundTheme,\n      splitButtonStyles,\n      customStyles,\n    )!;\n  },\n);\n", "import * as React from 'react';\nimport { BaseButton } from '../BaseButton';\nimport { customizable, nullRender } from '../../../Utilities';\nimport { getStyles } from './IconButton.styles';\nimport type { IButtonProps } from '../Button.types';\n\n/**\n * {@docCategory Button}\n */\n@customizable('IconButton', ['theme', 'styles'], true)\nexport class IconButton extends React.Component<IButtonProps, {}> {\n  public render(): JSX.Element {\n    const { styles, theme } = this.props;\n\n    return (\n      <BaseButton\n        {...this.props}\n        variantClassName=\"ms-Button--icon\"\n        styles={getStyles(theme!, styles)}\n        onRenderText={nullRender}\n        onRenderDescription={nullRender}\n      />\n    );\n  }\n}\n", "import { concatStyleSets, HighContrastSelector } from '../../../Styling';\nimport { memoizeFunction } from '../../../Utilities';\nimport { getStyles as getBaseButtonStyles } from '../BaseButton.styles';\nimport { getStyles as getSplitButtonStyles } from '../SplitButton/SplitButton.styles';\nimport type { IButtonStyles } from '../Button.types';\nimport type { ITheme } from '../../../Styling';\n\nexport const getStyles = memoizeFunction((theme: ITheme, customStyles?: IButtonStyles): IButtonStyles => {\n  const baseButtonStyles: IButtonStyles = getBaseButtonStyles(theme);\n  const splitButtonStyles: IButtonStyles = getSplitButtonStyles(theme);\n  const { palette, semanticColors } = theme;\n  const iconButtonStyles: IButtonStyles = {\n    root: {\n      padding: '0 4px',\n      width: '32px',\n      height: '32px',\n      backgroundColor: 'transparent',\n      border: 'none',\n      color: semanticColors.link,\n    },\n\n    rootHovered: {\n      color: palette.themeDarkAlt,\n      backgroundColor: palette.neutralLighter,\n      selectors: {\n        [HighContrastSelector]: {\n          borderColor: 'Highlight',\n          color: 'Highlight',\n        },\n      },\n    },\n\n    rootHasMenu: {\n      width: 'auto',\n    },\n\n    rootPressed: {\n      color: palette.themeDark,\n      backgroundColor: palette.neutralLight,\n    },\n\n    rootExpanded: {\n      color: palette.themeDark,\n      backgroundColor: palette.neutralLight,\n    },\n\n    rootChecked: {\n      color: palette.themeDark,\n      backgroundColor: palette.neutralLight,\n    },\n\n    rootCheckedHovered: {\n      color: palette.themeDark,\n      backgroundColor: palette.neutralQuaternaryAlt,\n    },\n\n    rootDisabled: {\n      color: palette.neutralTertiaryAlt,\n    },\n  };\n\n  return concatStyleSets(baseButtonStyles, iconButtonStyles, splitButtonStyles, customStyles)!;\n});\n", "import * as React from 'react';\nimport { customizable, nullRender } from '../../../Utilities';\nimport { DefaultButton } from '../DefaultButton/DefaultButton';\nimport type { IButtonProps } from '../Button.types';\n\n/**\n * {@docCategory Button}\n */\n@customizable('PrimaryButton', ['theme', 'styles'], true)\nexport class PrimaryButton extends React.Component<IButtonProps, {}> {\n  public render(): JSX.Element {\n    return <DefaultButton {...this.props} primary={true} onRenderDescription={nullRender} />;\n  }\n}\n", "import * as React from 'react';\nimport { BaseButton } from '../BaseButton';\nimport { customizable, nullRender } from '../../../Utilities';\nimport { getStyles } from './CommandBarButton.styles';\nimport type { IButtonProps } from '../Button.types';\n\n/**\n * {@docCategory Button}\n */\n@customizable('CommandBarButton', ['theme', 'styles'], true)\nexport class CommandBarButton extends React.Component<IButtonProps, {}> {\n  public render(): JSX.Element {\n    const { styles, theme } = this.props;\n\n    return (\n      <BaseButton\n        {...this.props}\n        variantClassName=\"ms-Button--commandBar\"\n        styles={getStyles(theme!, styles)}\n        onRenderDescription={nullRender}\n      />\n    );\n  }\n}\n", "import { concatStyleSets, getFocusStyle, HighContrastSelector, getHighContrastNoAdjustStyle } from '../../../Styling';\nimport { memoizeFunction } from '../../../Utilities';\nimport { getStyles as getBaseButtonStyles } from '../BaseButton.styles';\nimport { getStyles as getSplitButtonStyles } from '../SplitButton/SplitButton.styles';\nimport { ButtonGlobalClassNames } from '../BaseButton.classNames';\nimport type { IButtonStyles } from '../Button.types';\nimport type { ITheme } from '../../../Styling';\n\nexport const getStyles = memoizeFunction(\n  (theme: ITheme, customStyles?: IButtonStyles, focusInset?: string, focusColor?: string): IButtonStyles => {\n    const baseButtonStyles: IButtonStyles = getBaseButtonStyles(theme);\n    const baseSplitButtonStyles: IButtonStyles = getSplitButtonStyles(theme);\n\n    const { palette: p, semanticColors } = theme;\n\n    const commandButtonHighContrastFocus = {\n      left: 4,\n      top: 4,\n      bottom: 4,\n      right: 4,\n      border: 'none',\n    };\n\n    const commandButtonStyles: IButtonStyles = {\n      root: [\n        getFocusStyle(theme, {\n          inset: 2,\n          highContrastStyle: commandButtonHighContrastFocus,\n          borderColor: 'transparent',\n        }),\n        theme.fonts.medium,\n        {\n          minWidth: '40px',\n          backgroundColor: p.white,\n          color: p.neutralPrimary,\n          padding: '0 4px',\n          border: 'none',\n          borderRadius: 0,\n          selectors: {\n            [HighContrastSelector]: {\n              border: 'none',\n            },\n          },\n        },\n      ],\n\n      rootHovered: {\n        backgroundColor: p.neutralLighter,\n        color: p.neutralDark,\n        selectors: {\n          [HighContrastSelector]: {\n            color: 'Highlight',\n          },\n          [`.${ButtonGlobalClassNames.msButtonIcon}`]: {\n            color: p.themeDarkAlt,\n          },\n          [`.${ButtonGlobalClassNames.msButtonMenuIcon}`]: {\n            color: p.neutralPrimary,\n          },\n        },\n      },\n\n      rootPressed: {\n        backgroundColor: p.neutralLight,\n        color: p.neutralDark,\n        selectors: {\n          [`.${ButtonGlobalClassNames.msButtonIcon}`]: {\n            color: p.themeDark,\n          },\n          [`.${ButtonGlobalClassNames.msButtonMenuIcon}`]: {\n            color: p.neutralPrimary,\n          },\n        },\n      },\n\n      rootChecked: {\n        backgroundColor: p.neutralLight,\n        color: p.neutralDark,\n        selectors: {\n          [`.${ButtonGlobalClassNames.msButtonIcon}`]: {\n            color: p.themeDark,\n          },\n          [`.${ButtonGlobalClassNames.msButtonMenuIcon}`]: {\n            color: p.neutralPrimary,\n          },\n        },\n      },\n\n      rootCheckedHovered: {\n        backgroundColor: p.neutralQuaternaryAlt,\n        selectors: {\n          [`.${ButtonGlobalClassNames.msButtonIcon}`]: {\n            color: p.themeDark,\n          },\n          [`.${ButtonGlobalClassNames.msButtonMenuIcon}`]: {\n            color: p.neutralPrimary,\n          },\n        },\n      },\n\n      rootExpanded: {\n        backgroundColor: p.neutralLight,\n        color: p.neutralDark,\n        selectors: {\n          [`.${ButtonGlobalClassNames.msButtonIcon}`]: {\n            color: p.themeDark,\n          },\n          [`.${ButtonGlobalClassNames.msButtonMenuIcon}`]: {\n            color: p.neutralPrimary,\n          },\n        },\n      },\n\n      rootExpandedHovered: {\n        backgroundColor: p.neutralQuaternaryAlt,\n      },\n\n      rootDisabled: {\n        backgroundColor: p.white,\n        selectors: {\n          [`.${ButtonGlobalClassNames.msButtonIcon}`]: {\n            color: semanticColors.disabledBodySubtext,\n            selectors: {\n              [HighContrastSelector]: {\n                color: 'GrayText',\n                ...getHighContrastNoAdjustStyle(),\n              },\n            },\n          },\n          [HighContrastSelector]: {\n            color: 'GrayText',\n            backgroundColor: 'Window',\n            ...getHighContrastNoAdjustStyle(),\n          },\n        },\n      },\n\n      // Split button styles\n      splitButtonContainer: {\n        height: '100%',\n        selectors: {\n          [HighContrastSelector]: {\n            border: 'none',\n          },\n        },\n      },\n\n      splitButtonDividerDisabled: {\n        selectors: {\n          [HighContrastSelector]: {\n            backgroundColor: 'Window',\n          },\n        },\n      },\n\n      splitButtonDivider: {\n        backgroundColor: p.neutralTertiaryAlt,\n      },\n\n      splitButtonMenuButton: {\n        backgroundColor: p.white,\n        border: 'none',\n        borderTopRightRadius: '0',\n        borderBottomRightRadius: '0',\n        color: p.neutralSecondary,\n        selectors: {\n          ':hover': {\n            backgroundColor: p.neutralLighter,\n            color: p.neutralDark,\n            selectors: {\n              [HighContrastSelector]: {\n                color: 'Highlight',\n              },\n              [`.${ButtonGlobalClassNames.msButtonIcon}`]: {\n                color: p.neutralPrimary,\n              },\n            },\n          },\n          ':active': {\n            backgroundColor: p.neutralLight,\n            selectors: {\n              [`.${ButtonGlobalClassNames.msButtonIcon}`]: {\n                color: p.neutralPrimary,\n              },\n            },\n          },\n        },\n      },\n\n      splitButtonMenuButtonDisabled: {\n        backgroundColor: p.white,\n        selectors: {\n          [HighContrastSelector]: {\n            color: 'GrayText',\n            border: 'none',\n            backgroundColor: 'Window',\n            ...getHighContrastNoAdjustStyle(),\n          },\n        },\n      },\n\n      splitButtonMenuButtonChecked: {\n        backgroundColor: p.neutralLight,\n        color: p.neutralDark,\n        selectors: {\n          ':hover': {\n            backgroundColor: p.neutralQuaternaryAlt,\n          },\n        },\n      },\n\n      splitButtonMenuButtonExpanded: {\n        backgroundColor: p.neutralLight,\n        color: p.black,\n        selectors: {\n          ':hover': {\n            backgroundColor: p.neutralQuaternaryAlt,\n          },\n        },\n      },\n\n      splitButtonMenuIcon: {\n        color: p.neutralPrimary,\n      },\n\n      splitButtonMenuIconDisabled: {\n        color: p.neutralTertiary,\n      },\n\n      label: {\n        fontWeight: 'normal', // theme.fontWeights.semibold,\n      },\n\n      icon: {\n        color: p.themePrimary,\n      },\n\n      menuIcon: {\n        color: p.neutralSecondary,\n        [HighContrastSelector]: {\n          color: 'GrayText',\n        },\n      },\n    };\n\n    return concatStyleSets(baseButtonStyles, baseSplitButtonStyles, commandButtonStyles, customStyles)!;\n  },\n);\n", "import { ActionButton } from '../ActionButton/ActionButton';\n\n/**\n * {@docCategory Button}\n */\nexport const CommandButton = ActionButton;\n", "import * as React from 'react';\nimport { DefaultButton } from '../DefaultButton/DefaultButton';\nimport { customizable, nullRender } from '../../../Utilities';\nimport { getStyles } from './MessageBarButton.styles';\nimport type { IButtonProps } from '../Button.types';\n\n/**\n * {@docCategory MessageBar}\n */\n@customizable('MessageBarButton', ['theme', 'styles'], true)\nexport class MessageBarButton extends React.Component<IButtonProps, {}> {\n  public render(): JSX.Element {\n    const { styles, theme } = this.props;\n\n    return <DefaultButton {...this.props} styles={getStyles(theme!, styles)} onRenderDescription={nullRender} />;\n  }\n}\n", "import { concatStyleSets, getFocusStyle } from '../../../Styling';\nimport { memoizeFunction } from '../../../Utilities';\nimport type { IButtonStyles } from '../Button.types';\nimport type { ITheme } from '../../../Styling';\n\nexport const getStyles = memoizeFunction(\n  (theme: ITheme, customStyles?: IButtonStyles): IButtonStyles =>\n    concatStyleSets(\n      {\n        root: [\n          getFocusStyle(theme, {\n            inset: 1,\n            highContrastStyle: {\n              outlineOffset: '-4px',\n              outline: '1px solid Window',\n            },\n            borderColor: 'transparent',\n          }),\n          {\n            height: 24,\n          },\n        ],\n      },\n      customStyles,\n    ),\n);\n", "import * as React from 'react';\nimport { styled } from '../../Utilities';\nimport { CommandBarBase } from './CommandBar.base';\nimport { getStyles } from './CommandBar.styles';\nimport type { ICommandBarProps, ICommandBarStyleProps, ICommandBarStyles } from './CommandBar.types';\n\n// Create a CommandBar variant which uses these default styles and this styled subcomponent.\nexport const CommandBar: React.FunctionComponent<ICommandBarProps> = styled<\n  ICommandBarProps,\n  ICommandBarStyleProps,\n  ICommandBarStyles\n>(CommandBarBase, getStyles, undefined, {\n  scope: 'CommandBar',\n});\n"],
  "mappings": "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",
  "names": ["React", "React", "KeytipEvents", "KeytipManager", "_a", "getStyles", "getStyles", "React", "ResizeGroupDirection", "COMPONENT_NAME", "_a", "React", "React", "React", "ContextualMenuItemType", "React", "ContextualMenuItemBase", "MediumScreenSelector", "React", "React", "ContextualMenuItemWrapper", "React", "React", "ContextualMenuAnchor", "React", "ContextualMenuButton", "onItemMouseDown", "React", "getStyles", "getClassNames", "React", "getClassNames", "getStyles", "ContextualMenuSplitButton", "getDividerClassNames", "onItemMouseDown", "React", "React", "ResponsiveMode", "React", "getClassNames", "COMPONENT_NAME", "_a", "items", "hasCheckmarks", "hasIcons", "adjustedFocusZoneProps", "getItemClassNames", "styles", "classNames", "title", "id", "onRenderSubMenu", "GlobalClassNames", "getStyles", "getStyles", "TouchIdleDelay", "COMPONENT_NAME", "BaseButton", "props", "getClassNames", "Button", "getSplitButtonClassNames", "ElementType", "ButtonType", "React", "React", "getStyles", "getStyles", "splitButtonDividerBaseStyles", "getStyles", "DefaultButton", "getStyles", "React", "DEFAULT_BUTTON_HEIGHT", "getStyles", "ActionButton", "getStyles", "React", "getStyles", "CompoundButton", "getStyles", "React", "getStyles", "IconButton", "getStyles", "React", "PrimaryButton", "Button", "React", "getStyles", "CommandBarButton", "getStyles", "React", "getStyles", "MessageBarButton", "getStyles", "getClassNames", "CommandBarBase", "props"]
}
