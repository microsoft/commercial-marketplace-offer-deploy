{"version":3,"file":"TimePicker.types.js","sourceRoot":"../src/","sources":["components/TimePicker/TimePicker.types.ts"],"names":[],"mappings":"","sourcesContent":["import * as React from 'react';\nimport type { IComboBox, IComboBoxProps } from '../../ComboBox';\n\n/**\n * {@docCategory TimePicker}\n * Range of start and end hours to be shown in the TimePicker.\n */\nexport interface ITimeRange {\n  /** Start hour (inclusive) for the time range, 0-23 */\n  start: number;\n\n  /** End hour (exclusive) for the time range, 0-23 */\n  end: number;\n}\n\n/**\n * {@docCategory TimePicker}\n * Localized strings to use in the TimePicker\n */\nexport interface ITimePickerStrings {\n  /** Error message to render below the field if input parsing fails. */\n  invalidInputErrorMessage: string;\n  /** Error message to render if the user input date is out of bounds. */\n  timeOutOfBoundsErrorMessage?: string;\n}\n\n/**\n * {@docCategory TimePicker}\n * A type used to represent the TimePicker validation result.\n */\nexport type TimePickerValidationResultData = {\n  errorMessage?: string;\n};\n\n/**\n * {@docCategory TimePicker}\n */\nexport interface ITimePickerProps\n  extends Omit<\n    IComboBoxProps,\n    'options' | 'selectedKey' | 'defaultSelectedKey' | 'multiSelect' | 'text' | 'defaultValue' | 'onChange'\n  > {\n  /**\n   * Label of the component.\n   */\n  label?: string;\n\n  /**\n   * Time increments, in minutes, of the options in the dropdown.\n   */\n  increments?: number;\n\n  /**\n   * If true, show seconds in the dropdown options and consider seconds for\n   * default validation purposes.\n   */\n  showSeconds?: boolean;\n\n  /**\n   * If true, use 12-hour time format. Otherwise, use 24-hour format.\n   */\n  useHour12?: boolean;\n\n  /**\n   * If true, the TimePicker allows freeform user input, rather than restricting\n   * to the default increments.\n   *\n   * The input will still be restricted to valid time values.\n   */\n  allowFreeform?: boolean;\n\n  /**\n   * Custom time range to for time options.\n   */\n  timeRange?: ITimeRange;\n\n  /**\n   * Localized strings to use in the TimePicker.\n   */\n  strings?: ITimePickerStrings;\n\n  /**\n   * The uncontrolled default selected time.\n   * Mutually exclusive with `value`.\n   */\n  defaultValue?: Date;\n\n  /**\n   * A Date representing the selected time. If you provide this, you must maintain selection\n   * state by observing onChange events and passing a new value in when changed.\n   * Mutually exclusive with `defaultValue`.\n   */\n  value?: Date;\n\n  /**\n   * The date in which all dropdown options are based off of.\n   */\n  dateAnchor?: Date;\n\n  /**\n   * A callback for receiving a notification when the time has been changed.\n   */\n  onChange?: (event: React.FormEvent<IComboBox>, time: Date) => void;\n\n  /**\n   * Callback to localize the date strings displayed for dropdown options.\n   */\n  onFormatDate?: (date: Date) => string;\n\n  /**\n   * Callback to use custom user-input validation.\n   */\n  onValidateUserInput?: (userInput: string) => string;\n\n  /**\n   * Callback to get validation result.\n   */\n  onValidationResult?: (event: React.FormEvent<IComboBox>, data: TimePickerValidationResultData) => void;\n}\n"]}