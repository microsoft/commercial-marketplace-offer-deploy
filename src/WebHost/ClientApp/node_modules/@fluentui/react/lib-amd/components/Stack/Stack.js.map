{"version":3,"file":"Stack.js","sourceRoot":"../src/","sources":["components/Stack/Stack.tsx"],"names":[],"mappings":"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","sourcesContent":["/** @jsxRuntime classic */\n/** @jsx withSlots */\nimport * as React from 'react';\nimport { withSlots, createComponent, getSlots } from '@fluentui/foundation-legacy';\nimport { css, getNativeProps, htmlElementProperties, warnDeprecations } from '../../Utilities';\nimport { styles, GlobalClassNames as StackGlobalClassNames } from './Stack.styles';\nimport { StackItem } from './StackItem/StackItem';\nimport type { IStackComponent, IStackProps, IStackSlots } from './Stack.types';\nimport type { IStackItemProps } from './StackItem/StackItem.types';\n\nconst StackView: IStackComponent['view'] = props => {\n  const {\n    as: RootType = 'div',\n    disableShrink = false,\n    // eslint-disable-next-line deprecation/deprecation\n    doNotRenderFalsyValues = false,\n    enableScopedSelectors = false,\n    wrap,\n    ...rest\n  } = props;\n\n  warnDeprecations('Stack', props, {\n    gap: 'tokens.childrenGap',\n    maxHeight: 'tokens.maxHeight',\n    maxWidth: 'tokens.maxWidth',\n    padding: 'tokens.padding',\n  });\n\n  const stackChildren = _processStackChildren(props.children, {\n    disableShrink,\n    enableScopedSelectors,\n    doNotRenderFalsyValues,\n  });\n\n  const nativeProps = getNativeProps<React.HTMLAttributes<HTMLDivElement>>(rest, htmlElementProperties);\n\n  const Slots = getSlots<IStackProps, IStackSlots>(props, {\n    root: RootType,\n    inner: 'div',\n  });\n\n  if (wrap) {\n    return (\n      <Slots.root {...nativeProps}>\n        <Slots.inner>{stackChildren}</Slots.inner>\n      </Slots.root>\n    );\n  }\n\n  return <Slots.root {...nativeProps}>{stackChildren}</Slots.root>;\n};\n\nfunction _processStackChildren(\n  children: React.ReactNode,\n  {\n    disableShrink,\n    enableScopedSelectors,\n    doNotRenderFalsyValues,\n  }: { disableShrink: boolean; enableScopedSelectors: boolean; doNotRenderFalsyValues: boolean },\n): (React.ReactChild | React.ReactFragment | React.ReactPortal)[] {\n  let childrenArray = React.Children.toArray(children);\n\n  childrenArray = React.Children.map(childrenArray, child => {\n    if (!child || !React.isValidElement(child)) {\n      return doNotRenderFalsyValues ? null : child;\n    }\n\n    if (child.type === React.Fragment) {\n      return child.props.children\n        ? _processStackChildren(child.props.children, { disableShrink, enableScopedSelectors, doNotRenderFalsyValues })\n        : null;\n    }\n\n    const childAsReactElement = child as React.ReactElement;\n\n    let defaultItemProps: IStackItemProps = {};\n    if (_isStackItem(child)) {\n      defaultItemProps = { shrink: !disableShrink };\n    }\n    const childClassName = childAsReactElement.props.className;\n\n    return React.cloneElement(childAsReactElement, {\n      ...defaultItemProps,\n      ...childAsReactElement.props,\n      ...(childClassName && { className: childClassName }),\n      ...(enableScopedSelectors && { className: css(StackGlobalClassNames.child, childClassName) }),\n    });\n  });\n\n  return childrenArray;\n}\n\nfunction _isStackItem(item: React.ReactNode): item is typeof StackItem {\n  // In theory, we should be able to just check item.type === StackItem.\n  // However, under certain unclear circumstances (see https://github.com/microsoft/fluentui/issues/10785),\n  // the object identity is different despite the function implementation being the same.\n  return (\n    !!item &&\n    typeof item === 'object' &&\n    !!(item as React.ReactElement).type &&\n    // StackItem is generated by createComponent, so we need to check its displayName instead of name\n    ((item as React.ReactElement).type as React.ComponentType).displayName === StackItem.displayName\n  );\n}\n\nconst StackStatics = {\n  Item: StackItem,\n};\n\nexport const Stack: React.FunctionComponent<IStackProps> & {\n  Item: React.FunctionComponent<IStackItemProps>;\n} = createComponent(StackView, {\n  displayName: 'Stack',\n  styles,\n  statics: StackStatics,\n});\n\nexport default Stack;\n"]}