{"version":3,"file":"TimePicker.js","sourceRoot":"../src/","sources":["components/TimePicker/TimePicker.tsx"],"names":[],"mappings":"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","sourcesContent":["import * as React from 'react';\nimport { KeyCodes } from '../../Utilities';\nimport {\n  TimeConstants,\n  addMinutes,\n  formatTimeString,\n  ceilMinuteToIncrement,\n  getDateFromTimeSelection,\n} from '@fluentui/date-time-utilities';\nimport { ComboBox } from '../../ComboBox';\nimport { format } from '../../Utilities';\nimport type { IComboBox, IComboBoxOption } from '../../ComboBox';\nimport type { ITimePickerProps, ITimeRange, ITimePickerStrings } from './TimePicker.types';\nimport { useControllableValue, useConst } from '@fluentui/react-hooks';\n\nconst REGEX_SHOW_SECONDS_HOUR_12 = /^((1[0-2]|0?[1-9]):([0-5][0-9]):([0-5][0-9])\\s([AaPp][Mm]))$/;\nconst REGEX_HIDE_SECONDS_HOUR_12 = /^((1[0-2]|0?[1-9]):[0-5][0-9]\\s([AaPp][Mm]))$/;\nconst REGEX_SHOW_SECONDS_HOUR_24 = /^([0-1]?[0-9]|2[0-3]):[0-5][0-9]:[0-5][0-9]$/;\nconst REGEX_HIDE_SECONDS_HOUR_24 = /^([0-1]?[0-9]|2[0-3]):[0-5][0-9]$/;\n\nconst TIME_LOWER_BOUND = 0;\nconst TIME_UPPER_BOUND = 23;\n\nconst getDefaultStrings = (useHour12: boolean, showSeconds: boolean): ITimePickerStrings => {\n  const hourUnits = useHour12 ? '12-hour' : '24-hour';\n  const timeFormat = `hh:mm${showSeconds ? ':ss' : ''}${useHour12 ? ' AP' : ''}`;\n  const invalidInputErrorMessage = `Enter a valid time in the ${hourUnits} format: ${timeFormat}`;\n  const timeOutOfBoundsErrorMessage = `Please enter a time within the range of {0} and {1}`;\n\n  return {\n    invalidInputErrorMessage,\n    timeOutOfBoundsErrorMessage,\n  };\n};\n\n/**\n * {@docCategory TimePicker}\n */\nexport const TimePicker: React.FunctionComponent<ITimePickerProps> = ({\n  label,\n  increments = 30,\n  showSeconds = false,\n  allowFreeform = true,\n  useHour12 = false,\n  timeRange,\n  strings = getDefaultStrings(useHour12, showSeconds),\n  defaultValue,\n  value,\n  dateAnchor,\n  onChange,\n  onFormatDate,\n  onValidateUserInput,\n  onValidationResult,\n  ...rest\n}: ITimePickerProps) => {\n  const [comboBoxText, setComboBoxText] = React.useState<string>('');\n  const [selectedKey, setSelectedKey] = React.useState<string | number | undefined | null>();\n  const [errorMessage, setErrorMessage] = React.useState<string>('');\n\n  const fallbackDateAnchor = useConst(new Date());\n\n  const [selectedTime, setSelectedTime] = useControllableValue(value, defaultValue);\n\n  const optionsCount = getDropdownOptionsCount(increments, timeRange);\n\n  const internalDateAnchor = dateAnchor || value || defaultValue || fallbackDateAnchor;\n\n  const dateStartAnchor = React.useMemo(\n    () => getDateAnchor(internalDateAnchor, 'start', increments, timeRange),\n    [internalDateAnchor, increments, timeRange],\n  );\n\n  const dateEndAnchor = React.useMemo(\n    () => getDateAnchor(internalDateAnchor, 'end', increments, timeRange),\n    [internalDateAnchor, increments, timeRange],\n  );\n\n  const timePickerOptions: IComboBoxOption[] = React.useMemo(() => {\n    const optionsList = Array(optionsCount);\n    for (let i = 0; i < optionsCount; i++) {\n      optionsList[i] = 0;\n    }\n\n    return optionsList.map((_, index) => {\n      const option: Date = addMinutes(dateStartAnchor, increments * index);\n      option.setSeconds(0);\n      const formattedTimeString = formatTimeString(option, showSeconds, useHour12);\n      const optionText = onFormatDate ? onFormatDate(option) : formattedTimeString;\n      return {\n        key: formattedTimeString,\n        text: optionText,\n        data: option,\n      };\n    });\n  }, [dateStartAnchor, increments, optionsCount, showSeconds, onFormatDate, useHour12]);\n\n  React.useEffect(() => {\n    if (selectedTime && !isNaN(selectedTime.valueOf())) {\n      const formattedTimeString = formatTimeString(selectedTime, showSeconds, useHour12);\n      const comboboxOption = timePickerOptions.find((option: IComboBoxOption) => option.key === formattedTimeString);\n      setSelectedKey(comboboxOption?.key);\n      setComboBoxText(comboboxOption ? comboboxOption.text : formattedTimeString);\n    } else {\n      setSelectedKey(null);\n    }\n  }, [selectedTime, timePickerOptions, onFormatDate, showSeconds, useHour12]);\n\n  const onInputChange = React.useCallback(\n    (ev: React.FormEvent<IComboBox>, option?: IComboBoxOption, _index?: number, input?: string): void => {\n      const validateUserInput = (userInput: string): string => {\n        let errorMessageToDisplay = '';\n        let regex: RegExp;\n        if (useHour12) {\n          regex = showSeconds ? REGEX_SHOW_SECONDS_HOUR_12 : REGEX_HIDE_SECONDS_HOUR_12;\n        } else {\n          regex = showSeconds ? REGEX_SHOW_SECONDS_HOUR_24 : REGEX_HIDE_SECONDS_HOUR_24;\n        }\n        if (!regex.test(userInput)) {\n          errorMessageToDisplay = strings.invalidInputErrorMessage;\n        } else if (timeRange && strings.timeOutOfBoundsErrorMessage) {\n          const optionDate: Date = getDateFromTimeSelection(useHour12, dateStartAnchor, userInput);\n          if (optionDate < dateStartAnchor || optionDate > dateEndAnchor) {\n            errorMessageToDisplay = format(\n              strings.timeOutOfBoundsErrorMessage,\n              dateStartAnchor.toString(),\n              dateEndAnchor.toString(),\n            );\n          }\n        }\n        return errorMessageToDisplay;\n      };\n\n      let errorMessageToDisplay = '';\n      if (input) {\n        if (allowFreeform && !option) {\n          if (!onFormatDate) {\n            // Validate only if user did not add onFormatDate\n            errorMessageToDisplay = validateUserInput(input);\n          } else {\n            // Use user provided validation if onFormatDate is provided\n            if (onValidateUserInput) {\n              errorMessageToDisplay = onValidateUserInput(input);\n            }\n          }\n        }\n      }\n\n      if (onValidationResult && errorMessage !== errorMessageToDisplay) {\n        // only call onValidationResult if stored errorMessage state value is different from latest error message\n        onValidationResult(ev, { errorMessage: errorMessageToDisplay });\n      }\n\n      let changedTime: Date;\n      if (errorMessageToDisplay || (input !== undefined && !input.length)) {\n        const timeSelection = input || option?.text || '';\n        setComboBoxText(timeSelection);\n        setSelectedTime(errorMessageToDisplay ? new Date('invalid') : undefined);\n        changedTime = new Date('invalid');\n      } else {\n        let updatedTime;\n        if (option?.data instanceof Date) {\n          updatedTime = option.data;\n        } else {\n          const timeSelection = (option?.key as string) || input || '';\n          updatedTime = getDateFromTimeSelection(useHour12, dateStartAnchor, timeSelection);\n        }\n        setSelectedTime(updatedTime);\n        changedTime = updatedTime;\n      }\n\n      onChange?.(ev, changedTime);\n      setErrorMessage(errorMessageToDisplay);\n    },\n    [\n      timeRange,\n      dateStartAnchor,\n      dateEndAnchor,\n      allowFreeform,\n      onFormatDate,\n      onValidateUserInput,\n      showSeconds,\n      useHour12,\n      strings.invalidInputErrorMessage,\n      strings.timeOutOfBoundsErrorMessage,\n      setSelectedTime,\n      onValidationResult,\n      onChange,\n      errorMessage,\n    ],\n  );\n\n  const evaluatePressedKey = (event: React.KeyboardEvent<IComboBox>) => {\n    // eslint-disable-next-line deprecation/deprecation\n    const charCode = event.charCode;\n    if (\n      !onFormatDate &&\n      // Only permit input of digits, space, colon, A/P/M characters\n      !(\n        (charCode >= KeyCodes.zero && charCode <= KeyCodes.colon) ||\n        charCode === KeyCodes.space ||\n        charCode === KeyCodes.a ||\n        charCode === KeyCodes.m ||\n        charCode === KeyCodes.p\n      )\n    ) {\n      event.preventDefault();\n    }\n  };\n\n  return (\n    <ComboBox\n      {...rest}\n      allowFreeform={allowFreeform}\n      selectedKey={selectedKey}\n      label={label}\n      errorMessage={errorMessage}\n      options={timePickerOptions}\n      onChange={onInputChange}\n      text={comboBoxText}\n      //eslint-disable-next-line\n      onKeyPress={evaluatePressedKey}\n      useComboBoxAsMenuWidth\n    />\n  );\n};\nTimePicker.displayName = 'TimePicker';\n\nconst getDateAnchor = (\n  internalDateAnchor: Date,\n  startEnd: 'start' | 'end',\n  increments: number,\n  timeRange?: ITimeRange,\n) => {\n  const clampedDateAnchor = new Date(internalDateAnchor.getTime());\n  if (timeRange) {\n    const clampedTimeRange = clampTimeRange(timeRange);\n    const timeRangeHours = startEnd === 'start' ? clampedTimeRange.start : clampedTimeRange.end;\n    if (clampedDateAnchor.getHours() !== timeRangeHours) {\n      clampedDateAnchor.setHours(timeRangeHours);\n    }\n  } else if (startEnd === 'end') {\n    clampedDateAnchor.setDate(clampedDateAnchor.getDate() + 1);\n  }\n  clampedDateAnchor.setMinutes(0);\n  clampedDateAnchor.setSeconds(0);\n  clampedDateAnchor.setMilliseconds(0);\n\n  return ceilMinuteToIncrement(clampedDateAnchor, increments);\n};\n\nconst clampTimeRange = (timeRange: ITimeRange): ITimeRange => {\n  return {\n    start: Math.min(Math.max(timeRange.start, TIME_LOWER_BOUND), TIME_UPPER_BOUND),\n    end: Math.min(Math.max(timeRange.end, TIME_LOWER_BOUND), TIME_UPPER_BOUND),\n  };\n};\n\nconst getHoursInRange = (timeRange: ITimeRange | undefined) => {\n  let hoursInRange = TimeConstants.HoursInOneDay;\n  if (timeRange) {\n    const clampedTimeRange = clampTimeRange(timeRange);\n    if (clampedTimeRange.start > clampedTimeRange.end) {\n      hoursInRange = TimeConstants.HoursInOneDay - timeRange.start - timeRange.end;\n    } else if (timeRange.end > timeRange.start) {\n      hoursInRange = timeRange.end - timeRange.start;\n    }\n  }\n\n  return hoursInRange;\n};\n\nconst getDropdownOptionsCount = (increments: number, timeRange: ITimeRange | undefined) => {\n  const hoursInRange = getHoursInRange(timeRange);\n  return Math.floor((TimeConstants.MinutesInOneHour * hoursInRange) / increments);\n};\n"]}